.. -*- coding: utf-8; mode: rst -*-
.. src-file: block/bio-integrity.c

.. _`bio_integrity_alloc`:

bio_integrity_alloc
===================

.. c:function:: struct bio_integrity_payload *bio_integrity_alloc(struct bio *bio, gfp_t gfp_mask, unsigned int nr_vecs)

    Allocate integrity payload and attach it to bio

    :param bio:
        bio to attach integrity metadata to
    :type bio: struct bio \*

    :param gfp_mask:
        Memory allocation mask
    :type gfp_mask: gfp_t

    :param nr_vecs:
        Number of integrity metadata scatter-gather elements
    :type nr_vecs: unsigned int

.. _`bio_integrity_alloc.description`:

Description
-----------

This function prepares a bio for attaching integrity
metadata.  nr_vecs specifies the maximum number of pages containing
integrity metadata that can be attached.

.. _`bio_integrity_free`:

bio_integrity_free
==================

.. c:function:: void bio_integrity_free(struct bio *bio)

    Free bio integrity payload

    :param bio:
        bio containing bip to be freed
    :type bio: struct bio \*

.. _`bio_integrity_free.description`:

Description
-----------

Used to free the integrity portion of a bio. Usually
called from \ :c:func:`bio_free`\ .

.. _`bio_integrity_add_page`:

bio_integrity_add_page
======================

.. c:function:: int bio_integrity_add_page(struct bio *bio, struct page *page, unsigned int len, unsigned int offset)

    Attach integrity metadata

    :param bio:
        bio to update
    :type bio: struct bio \*

    :param page:
        page containing integrity metadata
    :type page: struct page \*

    :param len:
        number of bytes of integrity metadata in page
    :type len: unsigned int

    :param offset:
        start offset within page
    :type offset: unsigned int

.. _`bio_integrity_add_page.description`:

Description
-----------

Attach a page containing integrity metadata to bio.

.. _`bio_integrity_process`:

bio_integrity_process
=====================

.. c:function:: blk_status_t bio_integrity_process(struct bio *bio, struct bvec_iter *proc_iter, integrity_processing_fn *proc_fn)

    Process integrity metadata for a bio

    :param bio:
        bio to generate/verify integrity metadata for
    :type bio: struct bio \*

    :param proc_iter:
        iterator to process
    :type proc_iter: struct bvec_iter \*

    :param proc_fn:
        Pointer to the relevant processing function
    :type proc_fn: integrity_processing_fn \*

.. _`bio_integrity_prep`:

bio_integrity_prep
==================

.. c:function:: bool bio_integrity_prep(struct bio *bio)

    Prepare bio for integrity I/O

    :param bio:
        bio to prepare
    :type bio: struct bio \*

.. _`bio_integrity_prep.description`:

Description
-----------

Checks if the bio already has an integrity payload attached.
If it does, the payload has been generated by another kernel subsystem,
and we just pass it through. Otherwise allocates integrity payload.
The bio must have data direction, target device and start sector set priot
to calling.  In the WRITE case, integrity metadata will be generated using
the block device's integrity function.  In the READ case, the buffer
will be prepared for DMA and a suitable end_io handler set up.

.. _`bio_integrity_verify_fn`:

bio_integrity_verify_fn
=======================

.. c:function:: void bio_integrity_verify_fn(struct work_struct *work)

    Integrity I/O completion worker

    :param work:
        Work struct stored in bio to be verified
    :type work: struct work_struct \*

.. _`bio_integrity_verify_fn.description`:

Description
-----------

This workqueue function is called to complete a READ
request.  The function verifies the transferred integrity metadata
and then calls the original bio end_io function.

.. _`__bio_integrity_endio`:

\__bio_integrity_endio
======================

.. c:function:: bool __bio_integrity_endio(struct bio *bio)

    Integrity I/O completion function

    :param bio:
        Protected bio
    :type bio: struct bio \*

.. _`__bio_integrity_endio.description`:

Description
-----------

Completion for integrity I/O

Normally I/O completion is done in interrupt context.  However,
verifying I/O integrity is a time-consuming task which must be run
in process context.  This function postpones completion
accordingly.

.. _`bio_integrity_advance`:

bio_integrity_advance
=====================

.. c:function:: void bio_integrity_advance(struct bio *bio, unsigned int bytes_done)

    Advance integrity vector

    :param bio:
        bio whose integrity vector to update
    :type bio: struct bio \*

    :param bytes_done:
        number of data bytes that have been completed
    :type bytes_done: unsigned int

.. _`bio_integrity_advance.description`:

Description
-----------

This function calculates how many integrity bytes the
number of completed data bytes correspond to and advances the
integrity vector accordingly.

.. _`bio_integrity_trim`:

bio_integrity_trim
==================

.. c:function:: void bio_integrity_trim(struct bio *bio)

    Trim integrity vector

    :param bio:
        bio whose integrity vector to update
    :type bio: struct bio \*

.. _`bio_integrity_trim.description`:

Description
-----------

Used to trim the integrity vector in a cloned bio.

.. _`bio_integrity_clone`:

bio_integrity_clone
===================

.. c:function:: int bio_integrity_clone(struct bio *bio, struct bio *bio_src, gfp_t gfp_mask)

    Callback for cloning bios with integrity metadata

    :param bio:
        New bio
    :type bio: struct bio \*

    :param bio_src:
        Original bio
    :type bio_src: struct bio \*

    :param gfp_mask:
        Memory allocation mask
    :type gfp_mask: gfp_t

.. _`bio_integrity_clone.description`:

Description
-----------

Called to allocate a bip when cloning a bio

.. This file was automatic generated / don't edit.

