.. -*- coding: utf-8; mode: rst -*-
.. src-file: sound/soc/codecs/rt5631.c

.. _`rt5631_write_index`:

rt5631_write_index
==================

.. c:function:: void rt5631_write_index(struct snd_soc_component *component, unsigned int reg, unsigned int value)

    write index register of 2nd layer

    :param component:
        *undescribed*
    :type component: struct snd_soc_component \*

    :param reg:
        *undescribed*
    :type reg: unsigned int

    :param value:
        *undescribed*
    :type value: unsigned int

.. _`rt5631_read_index`:

rt5631_read_index
=================

.. c:function:: unsigned int rt5631_read_index(struct snd_soc_component *component, unsigned int reg)

    read index register of 2nd layer

    :param component:
        *undescribed*
    :type component: struct snd_soc_component \*

    :param reg:
        *undescribed*
    :type reg: unsigned int

.. _`onebit_depop_power_stage`:

onebit_depop_power_stage
========================

.. c:function:: void onebit_depop_power_stage(struct snd_soc_component *component, int enable)

    auto depop in power stage.

    :param component:
        *undescribed*
    :type component: struct snd_soc_component \*

    :param enable:
        power on/off
    :type enable: int

.. _`onebit_depop_power_stage.description`:

Description
-----------

When power on/off headphone, the depop sequence is done by hardware.

.. _`onebit_depop_mute_stage`:

onebit_depop_mute_stage
=======================

.. c:function:: void onebit_depop_mute_stage(struct snd_soc_component *component, int enable)

    auto depop in mute stage.

    :param component:
        *undescribed*
    :type component: struct snd_soc_component \*

    :param enable:
        mute/unmute
    :type enable: int

.. _`onebit_depop_mute_stage.description`:

Description
-----------

When mute/unmute headphone, the depop sequence is done by hardware.

.. _`depop_seq_power_stage`:

depop_seq_power_stage
=====================

.. c:function:: void depop_seq_power_stage(struct snd_soc_component *component, int enable)

    step by step depop sequence in power stage.

    :param component:
        *undescribed*
    :type component: struct snd_soc_component \*

    :param enable:
        power on/off
    :type enable: int

.. _`depop_seq_power_stage.description`:

Description
-----------

When power on/off headphone, the depop sequence is done in step by step.

.. _`depop_seq_mute_stage`:

depop_seq_mute_stage
====================

.. c:function:: void depop_seq_mute_stage(struct snd_soc_component *component, int enable)

    step by step depop sequence in mute stage.

    :param component:
        *undescribed*
    :type component: struct snd_soc_component \*

    :param enable:
        mute/unmute
    :type enable: int

.. _`depop_seq_mute_stage.description`:

Description
-----------

When mute/unmute headphone, the depop sequence is done in step by step.

.. This file was automatic generated / don't edit.

