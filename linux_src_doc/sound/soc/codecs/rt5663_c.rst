.. -*- coding: utf-8; mode: rst -*-
.. src-file: sound/soc/codecs/rt5663.c

.. _`rt5663_v2_jack_detect`:

rt5663_v2_jack_detect
=====================

.. c:function:: int rt5663_v2_jack_detect(struct snd_soc_component *component, int jack_insert)

    Detect headset.

    :param component:
        SoC audio component device.
    :type component: struct snd_soc_component \*

    :param jack_insert:
        Jack insert or not.
    :type jack_insert: int

.. _`rt5663_v2_jack_detect.description`:

Description
-----------

Detect whether is headset or not when jack inserted.

Returns detect status.

.. _`rt5663_jack_detect`:

rt5663_jack_detect
==================

.. c:function:: int rt5663_jack_detect(struct snd_soc_component *component, int jack_insert)

    Detect headset.

    :param component:
        SoC audio component device.
    :type component: struct snd_soc_component \*

    :param jack_insert:
        Jack insert or not.
    :type jack_insert: int

.. _`rt5663_jack_detect.description`:

Description
-----------

Detect whether is headset or not when jack inserted.

Returns detect status.

.. _`rt5663_sel_asrc_clk_src`:

rt5663_sel_asrc_clk_src
=======================

.. c:function:: int rt5663_sel_asrc_clk_src(struct snd_soc_component *component, unsigned int filter_mask, unsigned int clk_src)

    select ASRC clock source for a set of filters

    :param component:
        SoC audio component device.
    :type component: struct snd_soc_component \*

    :param filter_mask:
        mask of filters.
    :type filter_mask: unsigned int

    :param clk_src:
        clock source
    :type clk_src: unsigned int

.. _`rt5663_sel_asrc_clk_src.description`:

Description
-----------

The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5663 can
only support standard 32fs or 64fs i2s format, ASRC should be enabled to
support special i2s clock format such as Intel's 100fs(100 \* sampling rate).
ASRC function will track i2s clock and generate a corresponding system clock
for codec. This function provides an API to select the clock source for a
set of filters specified by the mask. And the codec driver will turn on ASRC
for these filters if ASRC is selected as their clock source.

.. This file was automatic generated / don't edit.

