.. -*- coding: utf-8; mode: rst -*-
.. src-file: sound/soc/codecs/rt5677.c

.. _`rt5677_dsp_mode_i2c_write_addr`:

rt5677_dsp_mode_i2c_write_addr
==============================

.. c:function:: int rt5677_dsp_mode_i2c_write_addr(struct rt5677_priv *rt5677, unsigned int addr, unsigned int value, unsigned int opcode)

    Write value to address on DSP mode.

    :param rt5677:
        Private Data.
    :type rt5677: struct rt5677_priv \*

    :param addr:
        Address index.
    :type addr: unsigned int

    :param value:
        Address data.
    :type value: unsigned int

    :param opcode:
        *undescribed*
    :type opcode: unsigned int

.. _`rt5677_dsp_mode_i2c_write_addr.description`:

Description
-----------


Returns 0 for success or negative error code.

.. _`rt5677_dsp_mode_i2c_read_addr`:

rt5677_dsp_mode_i2c_read_addr
=============================

.. c:function:: int rt5677_dsp_mode_i2c_read_addr(struct rt5677_priv *rt5677, unsigned int addr, unsigned int *value)

    Read value from address on DSP mode.

    :param rt5677:
        *undescribed*
    :type rt5677: struct rt5677_priv \*

    :param addr:
        Address index.
    :type addr: unsigned int

    :param value:
        Address data.
    :type value: unsigned int \*

.. _`rt5677_dsp_mode_i2c_read_addr.rt5677`:

rt5677
------

Private Data.

.. _`rt5677_dsp_mode_i2c_read_addr.description`:

Description
-----------


Returns 0 for success or negative error code.

.. _`rt5677_dsp_mode_i2c_write`:

rt5677_dsp_mode_i2c_write
=========================

.. c:function:: int rt5677_dsp_mode_i2c_write(struct rt5677_priv *rt5677, unsigned int reg, unsigned int value)

    Write register on DSP mode.

    :param rt5677:
        *undescribed*
    :type rt5677: struct rt5677_priv \*

    :param reg:
        Register index.
    :type reg: unsigned int

    :param value:
        Register data.
    :type value: unsigned int

.. _`rt5677_dsp_mode_i2c_write.rt5677`:

rt5677
------

Private Data.

.. _`rt5677_dsp_mode_i2c_write.description`:

Description
-----------


Returns 0 for success or negative error code.

.. _`rt5677_dsp_mode_i2c_read`:

rt5677_dsp_mode_i2c_read
========================

.. c:function:: int rt5677_dsp_mode_i2c_read(struct rt5677_priv *rt5677, unsigned int reg, unsigned int *value)

    Read register on DSP mode.

    :param rt5677:
        *undescribed*
    :type rt5677: struct rt5677_priv \*

    :param reg:
        Register index.
    :type reg: unsigned int

    :param value:
        Register data.
    :type value: unsigned int \*

.. _`rt5677_dsp_mode_i2c_read.description`:

Description
-----------


Returns 0 for success or negative error code.

.. _`set_dmic_clk`:

set_dmic_clk
============

.. c:function:: int set_dmic_clk(struct snd_soc_dapm_widget *w, struct snd_kcontrol *kcontrol, int event)

    Set parameter of dmic.

    :param w:
        DAPM widget.
    :type w: struct snd_soc_dapm_widget \*

    :param kcontrol:
        The kcontrol of this widget.
    :type kcontrol: struct snd_kcontrol \*

    :param event:
        Event id.
    :type event: int

.. _`set_dmic_clk.description`:

Description
-----------

Choose dmic clock between 1MHz and 3MHz.
It is better for clock to approximate 3MHz.

.. _`rt5677_sel_asrc_clk_src`:

rt5677_sel_asrc_clk_src
=======================

.. c:function:: int rt5677_sel_asrc_clk_src(struct snd_soc_component *component, unsigned int filter_mask, unsigned int clk_src)

    select ASRC clock source for a set of filters

    :param component:
        SoC audio component device.
    :type component: struct snd_soc_component \*

    :param filter_mask:
        mask of filters.
    :type filter_mask: unsigned int

    :param clk_src:
        clock source
    :type clk_src: unsigned int

.. _`rt5677_sel_asrc_clk_src.description`:

Description
-----------

The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5677 can
only support standard 32fs or 64fs i2s format, ASRC should be enabled to
support special i2s clock format such as Intel's 100fs(100 \* sampling rate).
ASRC function will track i2s clock and generate a corresponding system clock
for codec. This function provides an API to select the clock source for a
set of filters specified by the mask. And the codec driver will turn on ASRC
for these filters if ASRC is selected as their clock source.

.. _`rt5677_pll_calc`:

rt5677_pll_calc
===============

.. c:function:: int rt5677_pll_calc(const unsigned int freq_in, const unsigned int freq_out, struct rl6231_pll_code *pll_code)

    Calcualte PLL M/N/K code.

    :param freq_in:
        external clock provided to codec.
    :type freq_in: const unsigned int

    :param freq_out:
        target clock which codec works on.
    :type freq_out: const unsigned int

    :param pll_code:
        Pointer to structure with M, N, K, bypass K and bypass M flag.
    :type pll_code: struct rl6231_pll_code \*

.. _`rt5677_pll_calc.description`:

Description
-----------

Calcualte M/N/K code and bypass K/M flag to configure PLL for codec.

Returns 0 for success or negative error code.

.. This file was automatic generated / don't edit.

