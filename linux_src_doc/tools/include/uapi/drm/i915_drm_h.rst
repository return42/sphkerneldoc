.. -*- coding: utf-8; mode: rst -*-
.. src-file: tools/include/uapi/drm/i915_drm.h

.. _`uevents-generated-by-i915-on-it-s-device-node`:

uevents generated by i915 on it's device node
=============================================

I915_L3_PARITY_UEVENT - Generated when the driver receives a parity mismatch
event from the gpu l3 cache. Additional information supplied is ROW,
BANK, SUBBANK, SLICE of the affected cacheline. Userspace should keep
track of these events and if a specific cache-line seems to have a
persistent error remap it with the l3 remapping tool supplied in
intel-gpu-tools.  The value supplied with the event is always 1.

I915_ERROR_UEVENT - Generated upon error detection, currently only via
hangcheck. The error detection event is a good indicator of when things
began to go badly. The value supplied with the event is a 1 upon error
detection, and a 0 upon reset completion, signifying no more error
exists. NOTE: Disabling hangcheck or reset via module parameter will
cause the related events to not be seen.

I915_RESET_UEVENT - Event is generated just before an attempt to reset the
the GPU. The value supplied with the event is always 1. NOTE: Disable
reset via module parameter will cause this event to not be seen.

.. _`perf_events-exposed-by-i915-through--sys-bus-event_sources-drivers-i915`:

perf_events exposed by i915 through /sys/bus/event_sources/drivers/i915
=======================================================================



.. _`i915_caching_none`:

I915_CACHING_NONE
=================

.. c:function::  I915_CACHING_NONE()

.. _`i915_caching_none.description`:

Description
-----------

GPU access is not coherent with cpu caches. Default for machines without an
LLC.

.. _`i915_caching_cached`:

I915_CACHING_CACHED
===================

.. c:function::  I915_CACHING_CACHED()

.. _`i915_caching_cached.description`:

Description
-----------

GPU access is coherent with cpu caches and furthermore the data is cached in
last-level caches shared between cpu cores and the gpu GT. Default on
machines with HAS_LLC.

.. _`i915_caching_display`:

I915_CACHING_DISPLAY
====================

.. c:function::  I915_CACHING_DISPLAY()

.. _`i915_caching_display.description`:

Description
-----------

Special GPU caching mode which is coherent with the scanout engines.
Transparently falls back to I915_CACHING_NONE on platforms where no special
cache mode (like write-through or gfdt flushing) is available. The kernel
automatically sets this mode when using a buffer as a scanout target.
Userspace can manually set this mode to avoid a costly stall and clflush in
the hotpath of drawing the first frame.

.. _`i915_perf_ioctl_enable`:

I915_PERF_IOCTL_ENABLE
======================

.. c:function::  I915_PERF_IOCTL_ENABLE()

    via I915_PERF_FLAG_DISABLED or was later disabled via I915_PERF_IOCTL_DISABLE.

.. _`i915_perf_ioctl_enable.description`:

Description
-----------

It is intended to be cheaper to disable and enable a stream than it may be
to close and re-open a stream with the same configuration.

It's undefined whether any pending data for the stream will be lost.

.. _`i915_perf_ioctl_disable`:

I915_PERF_IOCTL_DISABLE
=======================

.. c:function::  I915_PERF_IOCTL_DISABLE()

.. _`i915_perf_ioctl_disable.description`:

Description
-----------

It is an error to try and read a stream that is disabled.

.. This file was automatic generated / don't edit.

