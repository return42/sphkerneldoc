.. -*- coding: utf-8; mode: rst -*-
.. src-file: arch/mips/kvm/entry.c

.. _`kvm_mips_entry_setup`:

kvm_mips_entry_setup
====================

.. c:function:: int kvm_mips_entry_setup( void)

    Perform global setup for entry code.

    :param void:
        no arguments
    :type void: 

.. _`kvm_mips_entry_setup.description`:

Description
-----------

Perform global setup for entry code, such as choosing a scratch register.

.. _`kvm_mips_entry_setup.return`:

Return
------

0 on success.
-errno on failure.

.. _`build_set_exc_base`:

build_set_exc_base
==================

.. c:function:: void build_set_exc_base(u32 **p, unsigned int reg)

    Assemble code to write exception base address.

    :param p:
        Code buffer pointer.
    :type p: u32 \*\*

    :param reg:
        Source register (generated code may set WG bit in \ ``reg``\ ).
    :type reg: unsigned int

.. _`build_set_exc_base.description`:

Description
-----------

Assemble code to modify the exception base address in the EBase register,
using the appropriately sized access and setting the WG bit if necessary.

.. _`kvm_mips_build_vcpu_run`:

kvm_mips_build_vcpu_run
=======================

.. c:function:: void *kvm_mips_build_vcpu_run(void *addr)

    Assemble function to start running a guest VCPU.

    :param addr:
        Address to start writing code.
    :type addr: void \*

.. _`kvm_mips_build_vcpu_run.description`:

Description
-----------

Assemble the start of the vcpu_run function to run a guest VCPU. The function

.. _`kvm_mips_build_vcpu_run.conforms-to-the-following-prototype`:

conforms to the following prototype
-----------------------------------


int vcpu_run(struct kvm_run \*run, struct kvm_vcpu \*vcpu);

The exit from the guest and return to the caller is handled by the code
generated by \ :c:func:`kvm_mips_build_ret_to_host`\ .

.. _`kvm_mips_build_vcpu_run.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_enter_guest`:

kvm_mips_build_enter_guest
==========================

.. c:function:: void *kvm_mips_build_enter_guest(void *addr)

    Assemble code to resume guest execution.

    :param addr:
        Address to start writing code.
    :type addr: void \*

.. _`kvm_mips_build_enter_guest.description`:

Description
-----------

Assemble the code to resume guest execution. This code is common between the
initial entry into the guest from the host, and returning from the exit
handler back to the guest.

.. _`kvm_mips_build_enter_guest.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_tlb_refill_exception`:

kvm_mips_build_tlb_refill_exception
===================================

.. c:function:: void *kvm_mips_build_tlb_refill_exception(void *addr, void *handler)

    Assemble TLB refill handler.

    :param addr:
        Address to start writing code.
    :type addr: void \*

    :param handler:
        Address of common handler (within range of \ ``addr``\ ).
    :type handler: void \*

.. _`kvm_mips_build_tlb_refill_exception.description`:

Description
-----------

Assemble TLB refill exception fast path handler for guest execution.

.. _`kvm_mips_build_tlb_refill_exception.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_exception`:

kvm_mips_build_exception
========================

.. c:function:: void *kvm_mips_build_exception(void *addr, void *handler)

    Assemble first level guest exception handler.

    :param addr:
        Address to start writing code.
    :type addr: void \*

    :param handler:
        Address of common handler (within range of \ ``addr``\ ).
    :type handler: void \*

.. _`kvm_mips_build_exception.description`:

Description
-----------

Assemble exception vector code for guest execution. The generated vector will
branch to the common exception handler generated by \ :c:func:`kvm_mips_build_exit`\ .

.. _`kvm_mips_build_exception.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_exit`:

kvm_mips_build_exit
===================

.. c:function:: void *kvm_mips_build_exit(void *addr)

    Assemble common guest exit handler.

    :param addr:
        Address to start writing code.
    :type addr: void \*

.. _`kvm_mips_build_exit.description`:

Description
-----------

Assemble the generic guest exit handling code. This is called by the
exception vectors (generated by \ :c:func:`kvm_mips_build_exception`\ ), and calls
\ :c:func:`kvm_mips_handle_exit`\ , then either resumes the guest or returns to the host
depending on the return value.

.. _`kvm_mips_build_exit.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_ret_from_exit`:

kvm_mips_build_ret_from_exit
============================

.. c:function:: void *kvm_mips_build_ret_from_exit(void *addr)

    Assemble guest exit return handler.

    :param addr:
        Address to start writing code.
    :type addr: void \*

.. _`kvm_mips_build_ret_from_exit.description`:

Description
-----------

Assemble the code to handle the return from \ :c:func:`kvm_mips_handle_exit`\ , either
resuming the guest or returning to the host depending on the return value.

.. _`kvm_mips_build_ret_from_exit.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_ret_to_guest`:

kvm_mips_build_ret_to_guest
===========================

.. c:function:: void *kvm_mips_build_ret_to_guest(void *addr)

    Assemble code to return to the guest.

    :param addr:
        Address to start writing code.
    :type addr: void \*

.. _`kvm_mips_build_ret_to_guest.description`:

Description
-----------

Assemble the code to handle return from the guest exit handler
(kvm_mips_handle_exit()) back to the guest.

.. _`kvm_mips_build_ret_to_guest.return`:

Return
------

Next address after end of written function.

.. _`kvm_mips_build_ret_to_host`:

kvm_mips_build_ret_to_host
==========================

.. c:function:: void *kvm_mips_build_ret_to_host(void *addr)

    Assemble code to return to the host.

    :param addr:
        Address to start writing code.
    :type addr: void \*

.. _`kvm_mips_build_ret_to_host.description`:

Description
-----------

Assemble the code to handle return from the guest exit handler
(kvm_mips_handle_exit()) back to the host, i.e. to the caller of the vcpu_run
function generated by \ :c:func:`kvm_mips_build_vcpu_run`\ .

.. _`kvm_mips_build_ret_to_host.return`:

Return
------

Next address after end of written function.

.. This file was automatic generated / don't edit.

