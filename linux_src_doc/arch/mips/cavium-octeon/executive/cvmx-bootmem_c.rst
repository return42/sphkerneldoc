.. -*- coding: utf-8; mode: rst -*-
.. src-file: arch/mips/cavium-octeon/executive/cvmx-bootmem.c

.. _`sizeof_field`:

SIZEOF_FIELD
============

.. c:function::  SIZEOF_FIELD( s,  field)

    Logically it is the same as "sizeof(s::field)" in C++, but C lacks the "::" operator.

    :param s:
        *undescribed*
    :type s: 

    :param field:
        *undescribed*
    :type field: 

.. _`cvmx_bootmem_named_get_field`:

CVMX_BOOTMEM_NAMED_GET_FIELD
============================

.. c:function::  CVMX_BOOTMEM_NAMED_GET_FIELD( addr,  field)

    cvmx_bootmem_named_block_desc_t structure. These members can't be directly addressed as they might be in memory not directly reachable. In the case where bootmem is compiled with LINUX_HOST, the structure itself might be located on a remote Octeon. The argument "field" is the member name of the cvmx_bootmem_named_block_desc_t to read. Regardless of the type of the field, the return type is always a uint64_t. The "addr" parameter is the physical address of the structure.

    :param addr:
        *undescribed*
    :type addr: 

    :param field:
        *undescribed*
    :type field: 

.. _`__cvmx_bootmem_desc_get`:

\__cvmx_bootmem_desc_get
========================

.. c:function:: uint64_t __cvmx_bootmem_desc_get(uint64_t base, int offset, int size)

    for individual structure members. The argument are generated by the macros inorder to read only the needed memory.

    :param base:
        *undescribed*
    :type base: uint64_t

    :param offset:
        *undescribed*
    :type offset: int

    :param size:
        *undescribed*
    :type size: int

.. _`__cvmx_bootmem_desc_get.description`:

Description
-----------

\ ``param``\  base   64bit physical address of the complete structure
\ ``param``\  offset Offset from the beginning of the structure to the member being
accessed.
\ ``param``\  size   Size of the structure member.

\ ``return``\  Value of the structure member promoted into a uint64_t.

.. This file was automatic generated / don't edit.

