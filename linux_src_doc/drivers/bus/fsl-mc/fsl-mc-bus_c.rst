.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/bus/fsl-mc/fsl-mc-bus.c

.. _`fsl_mc_default_dma_mask`:

FSL_MC_DEFAULT_DMA_MASK
=======================

.. c:function::  FSL_MC_DEFAULT_DMA_MASK()

    mc bus

.. _`fsl_mc`:

struct fsl_mc
=============

.. c:type:: struct fsl_mc

    Private data of a "fsl,qoriq-mc" platform device

.. _`fsl_mc.definition`:

Definition
----------

.. code-block:: c

    struct fsl_mc {
        struct fsl_mc_device *root_mc_bus_dev;
        u8 num_translation_ranges;
        struct fsl_mc_addr_translation_range *translation_ranges;
    }

.. _`fsl_mc.members`:

Members
-------

root_mc_bus_dev
    fsl-mc device representing the root DPRC

num_translation_ranges
    number of entries in addr_translation_ranges

translation_ranges
    array of bus to system address translation ranges

.. _`fsl_mc_addr_translation_range`:

struct fsl_mc_addr_translation_range
====================================

.. c:type:: struct fsl_mc_addr_translation_range

    bus to system address translation range

.. _`fsl_mc_addr_translation_range.definition`:

Definition
----------

.. code-block:: c

    struct fsl_mc_addr_translation_range {
        enum dprc_region_type mc_region_type;
        u64 start_mc_offset;
        u64 end_mc_offset;
        phys_addr_t start_phys_addr;
    }

.. _`fsl_mc_addr_translation_range.members`:

Members
-------

mc_region_type
    Type of MC region for the range being translated

start_mc_offset
    Start MC offset of the range being translated

end_mc_offset
    MC offset of the first byte after the range (last MC
    offset of the range is end_mc_offset - 1)

start_phys_addr
    system physical address corresponding to start_mc_addr

.. _`mc_version`:

struct mc_version
=================

.. c:type:: struct mc_version


.. _`mc_version.definition`:

Definition
----------

.. code-block:: c

    struct mc_version {
        u32 major;
        u32 minor;
        u32 revision;
    }

.. _`mc_version.members`:

Members
-------

major
    Major version number: incremented on API compatibility changes

minor
    Minor version number: incremented on API additions (that are
    backward compatible); reset when major version is incremented

revision
    Internal revision number: incremented on implementation changes
    and/or bug fixes that have no impact on API

.. _`fsl_mc_bus_match`:

fsl_mc_bus_match
================

.. c:function:: int fsl_mc_bus_match(struct device *dev, struct device_driver *drv)

    device to driver matching callback

    :param struct device \*dev:
        the fsl-mc device to match against

    :param struct device_driver \*drv:
        the device driver to search for matching fsl-mc object type
        structures

.. _`fsl_mc_bus_match.description`:

Description
-----------

Returns 1 on success, 0 otherwise.

.. _`fsl_mc_bus_uevent`:

fsl_mc_bus_uevent
=================

.. c:function:: int fsl_mc_bus_uevent(struct device *dev, struct kobj_uevent_env *env)

    callback invoked when a device is added

    :param struct device \*dev:
        *undescribed*

    :param struct kobj_uevent_env \*env:
        *undescribed*

.. _`__fsl_mc_driver_register`:

\__fsl_mc_driver_register
=========================

.. c:function:: int __fsl_mc_driver_register(struct fsl_mc_driver *mc_driver, struct module *owner)

    registers a child device driver with the MC bus

    :param struct fsl_mc_driver \*mc_driver:
        *undescribed*

    :param struct module \*owner:
        *undescribed*

.. _`__fsl_mc_driver_register.description`:

Description
-----------

This function is implicitly invoked from the registration function of
fsl_mc device drivers, which is generated by the
\ :c:func:`module_fsl_mc_driver`\  macro.

.. _`fsl_mc_driver_unregister`:

fsl_mc_driver_unregister
========================

.. c:function:: void fsl_mc_driver_unregister(struct fsl_mc_driver *mc_driver)

    unregisters a device driver from the MC bus

    :param struct fsl_mc_driver \*mc_driver:
        *undescribed*

.. _`mc_get_version`:

mc_get_version
==============

.. c:function:: int mc_get_version(struct fsl_mc_io *mc_io, u32 cmd_flags, struct mc_version *mc_ver_info)

    Retrieves the Management Complex firmware version information

    :param struct fsl_mc_io \*mc_io:
        Pointer to opaque I/O object

    :param u32 cmd_flags:
        Command flags; one or more of 'MC_CMD_FLAG_'

    :param struct mc_version \*mc_ver_info:
        Returned version information structure

.. _`mc_get_version.return`:

Return
------

'0' on Success; Error code otherwise.

.. _`fsl_mc_get_root_dprc`:

fsl_mc_get_root_dprc
====================

.. c:function:: void fsl_mc_get_root_dprc(struct device *dev, struct device **root_dprc_dev)

    function to traverse to the root dprc

    :param struct device \*dev:
        *undescribed*

    :param struct device \*\*root_dprc_dev:
        *undescribed*

.. _`fsl_mc_is_root_dprc`:

fsl_mc_is_root_dprc
===================

.. c:function:: bool fsl_mc_is_root_dprc(struct device *dev)

    function to check if a given device is a root dprc

    :param struct device \*dev:
        *undescribed*

.. _`fsl_mc_device_add`:

fsl_mc_device_add
=================

.. c:function:: int fsl_mc_device_add(struct fsl_mc_obj_desc *obj_desc, struct fsl_mc_io *mc_io, struct device *parent_dev, struct fsl_mc_device **new_mc_dev)

    mc device to be visible in Linux

    :param struct fsl_mc_obj_desc \*obj_desc:
        *undescribed*

    :param struct fsl_mc_io \*mc_io:
        *undescribed*

    :param struct device \*parent_dev:
        *undescribed*

    :param struct fsl_mc_device \*\*new_mc_dev:
        *undescribed*

.. _`fsl_mc_device_remove`:

fsl_mc_device_remove
====================

.. c:function:: void fsl_mc_device_remove(struct fsl_mc_device *mc_dev)

    Remove an fsl-mc device from being visible to Linux

    :param struct fsl_mc_device \*mc_dev:
        Pointer to an fsl-mc device

.. _`fsl_mc_bus_probe`:

fsl_mc_bus_probe
================

.. c:function:: int fsl_mc_bus_probe(struct platform_device *pdev)

    callback invoked when the root MC bus is being added

    :param struct platform_device \*pdev:
        *undescribed*

.. _`fsl_mc_bus_remove`:

fsl_mc_bus_remove
=================

.. c:function:: int fsl_mc_bus_remove(struct platform_device *pdev)

    callback invoked when the root MC bus is being removed

    :param struct platform_device \*pdev:
        *undescribed*

.. This file was automatic generated / don't edit.

