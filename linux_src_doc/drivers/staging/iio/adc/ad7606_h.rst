.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/staging/iio/adc/ad7606.h

.. _`ad7606_chip_info`:

struct ad7606_chip_info
=======================

.. c:type:: struct ad7606_chip_info

    chip specific information

.. _`ad7606_chip_info.definition`:

Definition
----------

.. code-block:: c

    struct ad7606_chip_info {
        const struct iio_chan_spec *channels;
        unsigned int num_channels;
        bool has_oversampling;
    }

.. _`ad7606_chip_info.members`:

Members
-------

channels
    channel specification

num_channels
    number of channels

has_oversampling
    whether the device has oversampling support

.. _`ad7606_state`:

struct ad7606_state
===================

.. c:type:: struct ad7606_state

    driver instance specific data \ ``dev``\          pointer to kernel device \ ``chip_info``\            entry in the table of chips that describes this device \ ``reg``\          regulator info for the the power supply of the device \ ``poll_work``\            work struct for continuously reading data from the device into an IIO triggered buffer \ ``wq_data_avail``\        wait queue struct for buffer mode \ ``bops``\                 bus operations (SPI or parallel) \ ``range``\                voltage range selection, selects which scale to apply \ ``oversampling``\         oversampling selection \ ``done``\                 marks whether reading data is done \ ``base_address``\         address from where to read data in parallel operation \ ``lock``\                 protect sensor state from concurrent accesses to GPIOs \ ``gpio_convst``\  GPIO descriptor for conversion start signal (CONVST) \ ``gpio_reset``\           GPIO descriptor for device hard-reset \ ``gpio_range``\           GPIO descriptor for range selection \ ``gpio_standby``\         GPIO descriptor for stand-by signal (STBY), controls power-down mode of device \ ``gpio_frstdata``\        GPIO descriptor for reading from device when data is being read on the first channel \ ``gpio_os``\              GPIO descriptors to control oversampling on the device \ ``data``\                 buffer for reading data from the device

.. _`ad7606_state.definition`:

Definition
----------

.. code-block:: c

    struct ad7606_state {
        struct device *dev;
        const struct ad7606_chip_info *chip_info;
        struct regulator *reg;
        struct work_struct poll_work;
        wait_queue_head_t wq_data_avail;
        const struct ad7606_bus_ops *bops;
        unsigned int range;
        unsigned int oversampling;
        bool done;
        void __iomem *base_address;
        struct mutex lock;
        struct gpio_desc *gpio_convst;
        struct gpio_desc *gpio_reset;
        struct gpio_desc *gpio_range;
        struct gpio_desc *gpio_standby;
        struct gpio_desc *gpio_frstdata;
        struct gpio_descs *gpio_os;
        unsigned short data[12] ____cacheline_aligned;
    }

.. _`ad7606_state.members`:

Members
-------

dev
    *undescribed*

chip_info
    *undescribed*

reg
    *undescribed*

poll_work
    *undescribed*

wq_data_avail
    *undescribed*

bops
    *undescribed*

range
    *undescribed*

oversampling
    *undescribed*

done
    *undescribed*

base_address
    *undescribed*

lock
    *undescribed*

gpio_convst
    *undescribed*

gpio_reset
    *undescribed*

gpio_range
    *undescribed*

gpio_standby
    *undescribed*

gpio_frstdata
    *undescribed*

gpio_os
    *undescribed*

data
    *undescribed*

.. _`ad7606_bus_ops`:

struct ad7606_bus_ops
=====================

.. c:type:: struct ad7606_bus_ops

    driver bus operations \ ``read_block``\           function pointer for reading blocks of data

.. _`ad7606_bus_ops.definition`:

Definition
----------

.. code-block:: c

    struct ad7606_bus_ops {
        int (*read_block)(struct device *dev, int num, void *data);
    }

.. _`ad7606_bus_ops.members`:

Members
-------

read_block
    *undescribed*

.. This file was automatic generated / don't edit.

