.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/clk/ti/clkt_dpll.c

.. _`_omap2_dpll_is_in_bypass`:

\_omap2_dpll_is_in_bypass
=========================

.. c:function:: int _omap2_dpll_is_in_bypass(u32 v)

    check if DPLL is in bypass mode or not

    :param u32 v:
        bitfield value of the DPLL enable

.. _`_omap2_dpll_is_in_bypass.description`:

Description
-----------

Checks given DPLL enable bitfield to see whether the DPLL is in bypass
mode or not. Returns 1 if the DPLL is in bypass, 0 otherwise.

.. _`omap2_get_dpll_rate`:

omap2_get_dpll_rate
===================

.. c:function:: unsigned long omap2_get_dpll_rate(struct clk_hw_omap *clk)

    returns the current DPLL CLKOUT rate

    :param struct clk_hw_omap \*clk:
        struct clk \* of a DPLL

.. _`omap2_get_dpll_rate.description`:

Description
-----------

DPLLs can be locked or bypassed - basically, enabled or disabled.
When locked, the DPLL output depends on the M and N values.  When
bypassed, on OMAP2xxx, the output rate is either the 32KiHz clock
or sys_clk.  Bypass rates on OMAP3 depend on the DPLL: DPLLs 1 and
2 are bypassed with dpll1_fclk and dpll2_fclk respectively
(generated by DPLL3), while DPLL 3, 4, and 5 bypass rates are sys_clk.
Returns the current DPLL CLKOUT rate (\*not\* CLKOUTX2) if the DPLL is
locked, or the appropriate bypass rate if the DPLL is bypassed, or 0
if the clock \ ``clk``\  is not a DPLL.

.. _`omap2_dpll_round_rate`:

omap2_dpll_round_rate
=====================

.. c:function:: long omap2_dpll_round_rate(struct clk_hw *hw, unsigned long target_rate, unsigned long *parent_rate)

    round a target rate for an OMAP DPLL

    :param struct clk_hw \*hw:
        *undescribed*

    :param unsigned long target_rate:
        desired DPLL clock rate

    :param unsigned long \*parent_rate:
        *undescribed*

.. _`omap2_dpll_round_rate.description`:

Description
-----------

Given a DPLL and a desired target rate, round the target rate to a
possible, programmable rate for this DPLL.  Attempts to select the
minimum possible n.  Stores the computed (m, n) in the DPLL's
dpll_data structure so \ :c:func:`set_rate`\  will not need to call this
(expensive) function again.  Returns ~0 if the target rate cannot
be rounded, or the rounded rate upon success.

.. This file was automatic generated / don't edit.

