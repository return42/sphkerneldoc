.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/net/wimax/i2400m/i2400m.h

.. _`i2400m_poke_table`:

struct i2400m_poke_table
========================

.. c:type:: struct i2400m_poke_table

    Hardware poke table for the Intel 2400m

.. _`i2400m_poke_table.definition`:

Definition
----------

.. code-block:: c

    struct i2400m_poke_table {
        __le32 address;
        __le32 data;
    }

.. _`i2400m_poke_table.members`:

Members
-------

address
    The device address to poke

data
    The data value to poke to the device address

.. _`i2400m_poke_table.description`:

Description
-----------

This structure will be used to create a device specific poke table
to put the device in a consistent state at boot time.

.. _`i2400m`:

struct i2400m
=============

.. c:type:: struct i2400m

    descriptor for an Intel 2400m

.. _`i2400m.definition`:

Definition
----------

.. code-block:: c

    struct i2400m {
        struct wimax_dev wimax_dev;
        unsigned updown:1;
        unsigned boot_mode:1;
        unsigned sboot:1;
        unsigned ready:1;
        unsigned rx_reorder:1;
        u8 trace_msg_from_user;
        enum i2400m_system_state state;
        wait_queue_head_t state_wq;
        size_t bus_tx_block_size;
        size_t bus_tx_room_min;
        size_t bus_pl_size_max;
        unsigned bus_bm_retries;
        int (*bus_setup)(struct i2400m *);
        int (*bus_dev_start)(struct i2400m *);
        void (*bus_dev_stop)(struct i2400m *);
        void (*bus_release)(struct i2400m *);
        void (*bus_tx_kick)(struct i2400m *);
        int (*bus_reset)(struct i2400m *, enum i2400m_reset_type);
        ssize_t (*bus_bm_cmd_send)(struct i2400m *,const struct i2400m_bootrom_header *, size_t, int flags);
        ssize_t (*bus_bm_wait_for_ack)(struct i2400m *, struct i2400m_bootrom_header *, size_t);
        const char **bus_fw_names;
        unsigned bus_bm_mac_addr_impaired:1;
        const struct i2400m_poke_table *bus_bm_pokes_table;
        spinlock_t tx_lock;
        void *tx_buf;
        size_t tx_in;
        size_t tx_out;
        struct i2400m_msg_hdr *tx_msg;
        size_t tx_sequence;
        size_t tx_msg_size;
        unsigned tx_pl_num;
        unsigned tx_pl_max;
        unsigned tx_pl_min;
        unsigned tx_num;
        unsigned tx_size_acc;
        unsigned tx_size_min;
        unsigned tx_size_max;
        spinlock_t rx_lock;
        unsigned rx_pl_num;
        unsigned rx_pl_max;
        unsigned rx_pl_min;
        unsigned rx_num;
        unsigned rx_size_acc;
        unsigned rx_size_min;
        unsigned rx_size_max;
        struct i2400m_roq *rx_roq;
        struct kref rx_roq_refcount;
        u8 src_mac_addr;
        struct list_head rx_reports;
        struct work_struct rx_report_ws;
        struct mutex msg_mutex;
        struct completion msg_completion;
        struct sk_buff *ack_skb;
        void *bm_ack_buf;
        void *bm_cmd_buf;
        struct workqueue_struct *work_queue;
        struct mutex init_mutex;
        struct i2400m_reset_ctx *reset_ctx;
        struct work_struct wake_tx_ws;
        struct sk_buff *wake_tx_skb;
        struct work_struct reset_ws;
        const char *reset_reason;
        struct work_struct recovery_ws;
        struct dentry *debugfs_dentry;
        const char *fw_name;
        unsigned long fw_version;
        const struct i2400m_bcf_hdr **fw_hdrs;
        struct i2400m_fw *fw_cached;
        struct i2400m_barker_db *barker;
        struct notifier_block pm_notifier;
        atomic_t bus_reset_retries;
        unsigned alive;
        atomic_t error_recovery;
    }

.. _`i2400m.members`:

Members
-------

wimax_dev
    WiMAX generic device for linkage into the kernel WiMAX
    stack. Due to the way a net_device is allocated, we need to
    force this to be the first field so that we can get from
    \ :c:func:`netdev_priv`\  the right pointer.

updown
    the device is up and ready for transmitting control and
    data packets. This implies \ ``ready``\  (communication infrastructure
    with the device is ready) and the device's firmware has been
    loaded and the device initialized.

boot_mode
    *undescribed*

sboot
    *undescribed*

ready
    Communication infrastructure with the device is ready, data
    frames can start to be passed around (this is lighter than
    using the WiMAX state for certain hot paths).

rx_reorder
    1 if RX reordering is enabled; this can only be
    set at probe time.

trace_msg_from_user
    *undescribed*

state
    device's state (as reported by it)

state_wq
    waitqueue that is woken up whenever the state changes

bus_tx_block_size
    [fill] USB imposes a 16 block size, but other
    busses will differ.  So we have a tx_blk_size variable that the
    bus layer sets to tell the engine how much of that we need.

bus_tx_room_min
    [fill] Minimum room required while allocating
    TX queue's buffer space for message header. USB requires
    16 bytes. Refer to bus specific driver code for details.

bus_pl_size_max
    [fill] Maximum payload size.

bus_bm_retries
    [fill] How many times shall a firmware upload /
    device initialization be retried? Different models of the same
    device might need different values, hence it is set by the
    bus-specific driver. Note this value is used in two places,
    \ :c:func:`i2400m_fw_dnload`\  and \__i2400m_dev_start(); they won't become
    multiplicative (__i2400m_dev_start() calling N times
    \ :c:func:`i2400m_fw_dnload`\  and this trying N times to download the
    firmware), as if \__i2400m_dev_start() only retries if the
    firmware crashed while initializing the device (not in a
    general case).

bus_setup
    [optional fill] Function called by the bus-generic code
    [i2400m_setup()] to setup the basic bus-specific communications
    to the the device needed to load firmware. See LIFE CYCLE above.

bus_dev_start
    [optional fill] Function called by the bus-generic
    code [i2400m_dev_start()] to do things needed to start the
    device. See LIFE CYCLE above.

bus_dev_stop
    [optional fill] Function called by the bus-generic
    code [i2400m_dev_stop()] to do things needed for stopping the
    device. See LIFE CYCLE above.

bus_release
    [optional fill] Function called by the bus-generic
    code [i2400m_release()] to shutdown the basic bus-specific
    communications to the the device needed to load firmware. See
    LIFE CYCLE above.

bus_tx_kick
    [fill] Function called by the bus-generic code to let
    the bus-specific code know that there is data available in the
    TX FIFO for transmission to the device.

bus_reset
    [fill] Function called by the bus-generic code to reset
    the device in in various ways. Doesn't need to wait for the
    reset to finish.

bus_bm_cmd_send
    [fill] Function called to send a boot-mode
    command. Flags are defined in 'enum i2400m_bm_cmd_flags'. This
    is synchronous and has to return 0 if ok or < 0 errno code in
    any error condition.

bus_bm_wait_for_ack
    [fill] Function called to wait for a
    boot-mode notification (that can be a response to a previously
    issued command or an asynchronous one). Will read until all the
    indicated size is read or timeout. Reading more or less data
    than asked for is an error condition. Return 0 if ok, < 0 errno
    code on error.

bus_fw_names
    [fill] a NULL-terminated array with the names of the
    firmware images to try loading. This is made a list so we can
    support backward compatibility of firmware releases (eg: if we
    can't find the default v1.4, we try v1.3). In general, the name
    should be i2400m-fw-X-VERSION.sbcf, where X is the bus name.
    The list is tried in order and the first one that loads is
    used. The fw loader will set i2400m->fw_name to point to the
    active firmware image.

bus_bm_mac_addr_impaired
    [fill] Set to true if the device's MAC
    address provided in boot mode is kind of broken and needs to
    be re-read later on.

bus_bm_pokes_table
    [fill/optional] A table of device addresses
    and values that will be poked at device init time to move the
    device to the correct state for the type of boot/firmware being
    used.  This table MUST be terminated with (0x000000,
    0x00000000) or bad things will happen.

tx_lock
    spinlock to protect TX members

tx_buf
    FIFO buffer for TX; we queue data here

tx_in
    FIFO index for incoming data. Note this doesn't wrap around
    and it is always greater than \ ``tx_out``\ .

tx_out
    FIFO index for outgoing data

tx_msg
    current TX message that is active in the FIFO for
    appending payloads.

tx_sequence
    current sequence number for TX messages from the
    device to the host.

tx_msg_size
    size of the current message being transmitted by the
    bus-specific code.

tx_pl_num
    total number of payloads sent

tx_pl_max
    maximum number of payloads sent in a TX message

tx_pl_min
    minimum number of payloads sent in a TX message

tx_num
    number of TX messages sent

tx_size_acc
    number of bytes in all TX messages sent
    (this is different to net_dev's statistics as it also counts
    control messages).

tx_size_min
    smallest TX message sent.

tx_size_max
    biggest TX message sent.

rx_lock
    spinlock to protect RX members and rx_roq_refcount.

rx_pl_num
    total number of payloads received

rx_pl_max
    maximum number of payloads received in a RX message

rx_pl_min
    minimum number of payloads received in a RX message

rx_num
    number of RX messages received

rx_size_acc
    number of bytes in all RX messages received
    (this is different to net_dev's statistics as it also counts
    control messages).

rx_size_min
    smallest RX message received.

rx_size_max
    buggest RX message received.

rx_roq
    RX ReOrder queues. (fw >= v1.4) When packets are received
    out of order, the device will ask the driver to hold certain
    packets until the ones that are received out of order can be
    delivered. Then the driver can release them to the host. See
    drivers/net/i2400m/rx.c for details.

rx_roq_refcount
    refcount rx_roq. This refcounts any access to
    rx_roq thus preventing rx_roq being destroyed when rx_roq
    is being accessed. rx_roq_refcount is protected by rx_lock.

src_mac_addr
    MAC address used to make ethernet packets be coming
    from. This is generated at \ :c:func:`i2400m_setup`\  time and used during
    the life cycle of the instance. See \ :c:func:`i2400m_fake_eth_header`\ .

rx_reports
    reports received from the device that couldn't be
    processed because the driver wasn't still ready; when ready,
    they are pulled from here and chewed.

rx_report_ws
    *undescribed*

msg_mutex
    mutex used to send control commands to the device (we
    only allow one at a time, per host-device interface design).

msg_completion
    used to wait for an ack to a control command sent
    to the device.

ack_skb
    used to store the actual ack to a control command if the
    reception of the command was successful. Otherwise, a \ :c:func:`ERR_PTR`\ 
    errno code that indicates what failed with the ack reception.

bm_ack_buf
    boot mode acknoledge buffer for staging reception of
    responses to commands.

bm_cmd_buf
    boot mode command buffer for composing firmware upload
    commands.

work_queue
    work queue for processing device reports. This
    workqueue cannot be used for processing TX or RX to the device,
    as from it we'll process device reports, which might require
    further communication with the device.

init_mutex
    Mutex used for serializing the device bringup
    sequence; this way if the device reboots in the middle, we
    don't try to do a bringup again while we are tearing down the
    one that failed.

reset_ctx
    *undescribed*

wake_tx_ws
    *undescribed*

wake_tx_skb
    *undescribed*

reset_ws
    *undescribed*

reset_reason
    *undescribed*

recovery_ws
    *undescribed*

debugfs_dentry
    hookup for debugfs files.
    These have to be in a separate directory, a child of
    (wimax_dev->debugfs_dentry) so they can be removed when the
    module unloads, as we don't keep each dentry.

fw_name
    name of the firmware image that is currently being used.

fw_version
    version of the firmware interface, Major.minor,
    encoded in the high word and low word (major << 16 \| minor).

fw_hdrs
    NULL terminated array of pointers to the firmware
    headers. This is only available during firmware load time.

fw_cached
    Used to cache firmware when the system goes to
    suspend/standby/hibernation (as on resume we can't read it). If
    NULL, no firmware was cached, read it. If ~0, you can't read
    any firmware files (the system still didn't come out of suspend
    and failed to cache one), so abort; otherwise, a valid cached
    firmware to be used. Access to this variable is protected by
    the spinlock i2400m->rx_lock.

barker
    barker type that the device uses; this is initialized by
    \ :c:func:`i2400m_is_boot_barker`\  the first time it is called. Then it
    won't change during the life cycle of the device and every time
    a boot barker is received, it is just verified for it being the
    same.

pm_notifier
    used to register for PM events

bus_reset_retries
    counter for the number of bus resets attempted for
    this boot. It's not for tracking the number of bus resets during
    the whole driver life cycle (from insmod to rmmod) but for the
    number of \ :c:func:`dev_start`\  executed until \ :c:func:`dev_start`\  returns a success
    (ie: a good boot means a \ :c:func:`dev_stop`\  followed by a successful
    \ :c:func:`dev_start`\ ). \ :c:func:`dev_reset_handler`\  increments this counter whenever
    it is triggering a bus reset. It checks this counter to decide if a
    subsequent bus reset should be retried. \ :c:func:`dev_reset_handler`\  retries
    the bus reset until \ :c:func:`dev_start`\  succeeds or the counter reaches
    I2400M_BUS_RESET_RETRIES. The counter is cleared to 0 in
    \ :c:func:`dev_reset_handle`\  when \ :c:func:`dev_start`\  returns a success,
    ie: a successul boot is completed.

alive
    flag to denote if the device \*should\* be alive. This flag is
    everything like \ ``updown``\  (see doc for \ ``updown``\ ) except reflecting
    the device state \*we expect\* rather than the actual state as denoted
    by \ ``updown``\ . It is set 1 whenever \ ``updown``\  is set 1 in \ :c:func:`dev_start`\ .
    Then the device is expected to be alive all the time
    (i2400m->alive remains 1) until the driver is removed. Therefore
    all the device reboot events detected can be still handled properly
    by either \ :c:func:`dev_reset_handle`\  or .pre_reset/.post_reset as long as
    the driver presents. It is set 0 along with \ ``updown``\  in \ :c:func:`dev_stop`\ .

error_recovery
    flag to denote if we are ready to take an error recovery.
    0 for ready to take an error recovery; 1 for not ready. It is
    initialized to 1 while \ :c:func:`probe`\  since we don't tend to take any error
    recovery during \ :c:func:`probe`\ . It is decremented by 1 whenever \ :c:func:`dev_start`\ 
    succeeds to indicate we are ready to take error recovery from now on.
    It is checked every time we wanna schedule an error recovery. If an
    error recovery is already in place (error_recovery was set 1), we
    should not schedule another one until the last one is done.

.. _`i2400m.description`:

Description
-----------

Members marked with [fill] must be filled out/initialized before
calling \ :c:func:`i2400m_setup`\ .

Note the \ ``bus_setup``\ /@bus_release, \ ``bus_dev_start``\ /@bus_dev_release
call pairs are very much doing almost the same, and depending on
the underlying bus, some stuff has to be put in one or the
other. The idea of setup/release is that they setup the minimal
amount needed for loading firmware, where us dev_start/stop setup
the rest needed to do full data/control traffic.

This function does not need to reset the device, just tear down
all the host resources created to  handle communication with
the device.

This function does not need to reset the device, just tear down
all the host resources created to handle communication with
the device.

This function cannot sleep.

If warm or cold reset fail, this function is expected to do a
bus-specific reset (eg: USB reset) to get the device to a
working state (even if it implies device disconecction).

Note the warm reset is used by the firmware uploader to
reinitialize the device.

The caller to this function will check if the response is a
barker that indicates the device going into reset mode.

Write to it only inside a i2400m->init_mutex protected area
followed with a \ :c:func:`wmb`\ ; \ :c:func:`rmb`\  before accesing (unless locked
inside i2400m->init_mutex). Read access can be loose like that
[just using \ :c:func:`rmb`\ ] because the paths that use this also do
other error checks later on.

Write to it only inside a i2400m->init_mutex protected area
followed with a \ :c:func:`wmb`\ ; \ :c:func:`rmb`\  before accesing (unless locked
inside i2400m->init_mutex). Read access can be loose like that
[just using \ :c:func:`rmb`\ ] because the paths that use this also do
other error checks later on.

Can't reuse \ ``msg_mutex``\  because from within the bringup sequence
we need to send messages to the device and thus use \ ``msg_mutex``\ .

Only valid after \ ``msg_completion``\  is woken up. Only updateable
if \ ``msg_completion``\  is armed. Only touched by
\ :c:func:`i2400m_msg_to_dev`\ .

Protected by \ ``rx_lock``\ . In theory the command execution flow is
sequential, but in case the device sends an out-of-phase or
very delayed response, we need to avoid it trampling current
execution.

USB can't r/w to stack, vmalloc, etc...as well, we end up
having to alloc/free a lot to compose commands, so we use these
for stagging and not having to realloc all the time.

This assumes the code always runs serialized. Only one thread
can call \ :c:func:`i2400m_bm_cmd`\  at the same time.

See \ ``bm_cmd_buf``\ .

.. _`i2400m.note`:

NOTE
----

Doesn't need to upload the firmware, as that is taken
care of by the bus-generic code.

Doesn't need to upload the firmware, as that is taken
care of by the bus-generic code.

.. _`i2400m.important`:

IMPORTANT
---------

this is called very early in the device setup
process, so it cannot rely on common infrastructure being laid
out.

don't call reset on RT_BUS with i2400m->init_mutex
held, as the .pre/.post reset handlers will deadlock.

.. This file was automatic generated / don't edit.

