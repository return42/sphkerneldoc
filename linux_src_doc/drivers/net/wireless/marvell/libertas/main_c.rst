.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/net/wireless/marvell/libertas/main.c

.. _`lbs_fw_index_to_data_rate`:

lbs_fw_index_to_data_rate
=========================

.. c:function:: u32 lbs_fw_index_to_data_rate(u8 idx)

    use index to get the data rate

    :param u8 idx:
        The index of data rate

.. _`lbs_fw_index_to_data_rate.return`:

Return
------

data rate or 0

.. _`lbs_data_rate_to_fw_index`:

lbs_data_rate_to_fw_index
=========================

.. c:function:: u8 lbs_data_rate_to_fw_index(u32 rate)

    use rate to get the index

    :param u32 rate:
        data rate

.. _`lbs_data_rate_to_fw_index.return`:

Return
------

index or 0

.. _`lbs_dev_open`:

lbs_dev_open
============

.. c:function:: int lbs_dev_open(struct net_device *dev)

    open the ethX interface

    :param struct net_device \*dev:
        A pointer to \ :c:type:`struct net_device <net_device>`\  structure

.. _`lbs_dev_open.return`:

Return
------

0 or -EBUSY if monitor mode active

.. _`lbs_eth_stop`:

lbs_eth_stop
============

.. c:function:: int lbs_eth_stop(struct net_device *dev)

    close the ethX interface

    :param struct net_device \*dev:
        A pointer to \ :c:type:`struct net_device <net_device>`\  structure

.. _`lbs_eth_stop.return`:

Return
------

0

.. _`lbs_thread`:

lbs_thread
==========

.. c:function:: int lbs_thread(void *data)

    handles the major jobs in the LBS driver. It handles all events generated by firmware, RX data received from firmware and TX data sent from kernel.

    :param void \*data:
        A pointer to \ :c:type:`struct lbs_thread <lbs_thread>`\  structure

.. _`lbs_thread.return`:

Return
------

0

.. _`lbs_setup_firmware`:

lbs_setup_firmware
==================

.. c:function:: int lbs_setup_firmware(struct lbs_private *priv)

    gets the HW spec from the firmware and sets some basic parameters

    :param struct lbs_private \*priv:
        A pointer to \ :c:type:`struct lbs_private <lbs_private>`\  structure

.. _`lbs_setup_firmware.return`:

Return
------

0 or -1

.. _`lbs_cmd_timeout_handler`:

lbs_cmd_timeout_handler
=======================

.. c:function:: void lbs_cmd_timeout_handler(struct timer_list *t)

    handles the timeout of command sending. It will re-send the same command again.

    :param struct timer_list \*t:
        *undescribed*

.. _`lbs_tx_lockup_handler`:

lbs_tx_lockup_handler
=====================

.. c:function:: void lbs_tx_lockup_handler(struct timer_list *t)

    handles the timeout of the passing of TX frames to the hardware. This is known to frequently happen with SD8686 when waking up after a Wake-on-WLAN-triggered resume.

    :param struct timer_list \*t:
        *undescribed*

.. _`auto_deepsleep_timer_fn`:

auto_deepsleep_timer_fn
=======================

.. c:function:: void auto_deepsleep_timer_fn(struct timer_list *t)

    put the device back to deep sleep mode when timer expires and no activity (command, event, data etc.) is detected.

    :param struct timer_list \*t:
        *undescribed*

.. _`auto_deepsleep_timer_fn.return`:

Return
------

N/A

.. _`lbs_add_card`:

lbs_add_card
============

.. c:function:: struct lbs_private *lbs_add_card(void *card, struct device *dmdev)

    adds the card. It will probe the card, allocate the lbs_priv and initialize the device.

    :param void \*card:
        A pointer to card

    :param struct device \*dmdev:
        A pointer to \ :c:type:`struct device <device>`\ 

.. _`lbs_add_card.return`:

Return
------

A pointer to \ :c:type:`struct lbs_private <lbs_private>`\  structure

.. This file was automatic generated / don't edit.

