.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/platform/x86/apple-gmux.c

.. _`overview`:

Overview
========

gmux is a microcontroller built into the MacBook Pro to support dual GPUs:
A `Lattice XP2`_ on pre-retinas, a `Renesas R4F2113`_ on retinas.

(The MacPro6,1 2013 also has a gmux, however it is unclear why since it has
dual GPUs but no built-in display.)

gmux is connected to the LPC bus of the southbridge. Its I/O ports are
accessed differently depending on the microcontroller: Driver functions
to access a pre-retina gmux are infixed ``_pio_``, those for a retina gmux
are infixed ``_index_``.

.. _Lattice XP2:
    http://www.latticesemi.com/en/Products/FPGAandCPLD/LatticeXP2.aspx
.. _Renesas R4F2113:
    http://www.renesas.com/products/mpumcu/h8s/h8s2100/h8s2113/index.jsp

.. _`backlight-control`:

Backlight control
=================

On single GPU MacBooks, the PWM signal for the backlight is generated by
the GPU. On dual GPU MacBook Pros by contrast, either GPU may be suspended
to conserve energy. Hence the PWM signal needs to be generated by a separate
backlight driver which is controlled by gmux. The earliest generation
MBP5 2008/09 uses a `TI LP8543`_ backlight driver. All newer models
use a `TI LP8545`_.

.. _TI LP8543: http://www.ti.com/lit/ds/symlink/lp8543.pdf
.. _TI LP8545: http://www.ti.com/lit/ds/symlink/lp8545.pdf

.. _`graphics-mux`:

Graphics mux
============

On pre-retinas, the LVDS outputs of both GPUs feed into gmux which muxes
either of them to the panel. One of the tricks gmux has up its sleeve is
to lengthen the blanking interval of its output during a switch to
synchronize it with the GPU switched to. This allows for a flicker-free
switch that is imperceptible by the user (`US 8,687,007 B2`_).

On retinas, muxing is no longer done by gmux itself, but by a separate
chip which is controlled by gmux. The chip is triple sourced, it is
either an `NXP CBTL06142`_, `TI HD3SS212`_ or `Pericom PI3VDP12412`_.
The panel is driven with eDP instead of LVDS since the pixel clock
required for retina resolution exceeds LVDS' limits.

Pre-retinas are able to switch the panel's DDC pins separately.
This is handled by a `TI SN74LV4066A`_ which is controlled by gmux.
The inactive GPU can thus probe the panel's EDID without switching over
the entire panel. Retinas lack this functionality as the chips used for
eDP muxing are incapable of switching the AUX channel separately (see
the linked data sheets, Pericom would be capable but this is unused).
However the retina panel has the NO_AUX_HANDSHAKE_LINK_TRAINING bit set
in its DPCD, allowing the inactive GPU to skip the AUX handshake and
set up the output with link parameters pre-calibrated by the active GPU.

The external DP port is only fully switchable on the first two unibody
MacBook Pro generations, MBP5 2008/09 and MBP6 2010. This is done by an
`NXP CBTL06141`_ which is controlled by gmux. It's the predecessor of the
eDP mux on retinas, the difference being support for 2.7 versus 5.4 Gbit/s.

The following MacBook Pro generations replaced the external DP port with a
combined DP/Thunderbolt port and lost the ability to switch it between GPUs,
connecting it either to the discrete GPU or the Thunderbolt controller.
Oddly enough, while the full port is no longer switchable, AUX and HPD
are still switchable by way of an `NXP CBTL03062`_ (on pre-retinas
MBP8 2011 and MBP9 2012) or two `TI TS3DS10224`_ (on retinas) under the
control of gmux. Since the integrated GPU is missing the main link,
external displays appear to it as phantoms which fail to link-train.

gmux receives the HPD signal of all display connectors and sends an
interrupt on hotplug. On generations which cannot switch external ports,
the discrete GPU can then be woken to drive the newly connected display.
The ability to switch AUX on these generations could be used to improve
reliability of hotplug detection by having the integrated GPU poll the
ports while the discrete GPU is asleep, but currently we do not make use
of this feature.

Our switching policy for the external port is that on those generations
which are able to switch it fully, the port is switched together with the
panel when IGD / DIS commands are issued to vga_switcheroo. It is thus
possible to drive e.g. a beamer on battery power with the integrated GPU.
The user may manually switch to the discrete GPU if more performance is
needed.

On all newer generations, the external port can only be driven by the
discrete GPU. If a display is plugged in while the panel is switched to
the integrated GPU, *both* GPUs will be in use for maximum performance.
To decrease power consumption, the user may manually switch to the
discrete GPU, thereby suspending the integrated GPU.

gmux' initial switch state on bootup is user configurable via the EFI
variable ``gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9`` (5th byte,
1 = IGD, 0 = DIS). Based on this setting, the EFI firmware tells gmux to
switch the panel and the external DP connector and allocates a framebuffer
for the selected GPU.

.. _US 8,687,007 B2: http://pimg-fpiw.uspto.gov/fdd/07/870/086/0.pdf
.. _NXP CBTL06141:   http://www.nxp.com/documents/data_sheet/CBTL06141.pdf
.. _NXP CBTL06142:   http://www.nxp.com/documents/data_sheet/CBTL06141.pdf
.. _TI HD3SS212:     http://www.ti.com/lit/ds/symlink/hd3ss212.pdf
.. _Pericom PI3VDP12412: https://www.pericom.com/assets/Datasheets/PI3VDP12412.pdf
.. _TI SN74LV4066A:  http://www.ti.com/lit/ds/symlink/sn74lv4066a.pdf
.. _NXP CBTL03062:   http://pdf.datasheetarchive.com/indexerfiles/Datasheets-SW16/DSASW00308511.pdf
.. _TI TS3DS10224:   http://www.ti.com/lit/ds/symlink/ts3ds10224.pdf

.. _`power-control`:

Power control
=============

gmux is able to cut power to the discrete GPU. It automatically takes care
of the correct sequence to tear down and bring up the power rails for
core voltage, VRAM and PCIe.

.. _`interrupt`:

Interrupt
=========

gmux is also connected to a GPIO pin of the southbridge and thereby is able
to trigger an ACPI GPE. On the MBP5 2008/09 it's GPIO pin 22 of the Nvidia
MCP79, on all following generations it's GPIO pin 6 of the Intel PCH.
The GPE merely signals that an interrupt occurred, the actual type of event
is identified by reading a gmux register.

.. This file was automatic generated / don't edit.

