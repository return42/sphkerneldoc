.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/input/misc/mpu3050.c

.. _`mpu3050_xyz_read_reg`:

mpu3050_xyz_read_reg
====================

.. c:function:: int mpu3050_xyz_read_reg(struct i2c_client *client, u8 *buffer, int length)

    read the axes values

    :param struct i2c_client \*client:
        *undescribed*

    :param u8 \*buffer:
        provide register addr and get register

    :param int length:
        length of register

.. _`mpu3050_xyz_read_reg.description`:

Description
-----------

Reads the register values in one transaction or returns a negative
error code on failure.

.. _`mpu3050_read_xyz`:

mpu3050_read_xyz
================

.. c:function:: void mpu3050_read_xyz(struct i2c_client *client, struct axis_data *coords)

    get co-ordinates from device

    :param struct i2c_client \*client:
        i2c address of sensor

    :param struct axis_data \*coords:
        co-ordinates to update

.. _`mpu3050_read_xyz.description`:

Description
-----------

Return the converted X Y and Z co-ordinates from the sensor device

.. _`mpu3050_set_power_mode`:

mpu3050_set_power_mode
======================

.. c:function:: void mpu3050_set_power_mode(struct i2c_client *client, u8 val)

    set the power mode

    :param struct i2c_client \*client:
        i2c client for the sensor

    :param u8 val:
        value to switch on/off of power, 1: normal power, 0: low power

.. _`mpu3050_set_power_mode.description`:

Description
-----------

Put device to normal-power mode or low-power mode.

.. _`mpu3050_input_open`:

mpu3050_input_open
==================

.. c:function:: int mpu3050_input_open(struct input_dev *input)

    called on input event open

    :param struct input_dev \*input:
        input dev of opened device

.. _`mpu3050_input_open.description`:

Description
-----------

The input layer calls this function when input event is opened. The
function will push the device to resume. Then, the device is ready
to provide data.

.. _`mpu3050_input_close`:

mpu3050_input_close
===================

.. c:function:: void mpu3050_input_close(struct input_dev *input)

    called on input event close

    :param struct input_dev \*input:
        input dev of closed device

.. _`mpu3050_input_close.description`:

Description
-----------

The input layer calls this function when input event is closed. The
function will push the device to suspend.

.. _`mpu3050_interrupt_thread`:

mpu3050_interrupt_thread
========================

.. c:function:: irqreturn_t mpu3050_interrupt_thread(int irq, void *data)

    handle an IRQ

    :param int irq:
        interrupt numner

    :param void \*data:
        the sensor

.. _`mpu3050_interrupt_thread.description`:

Description
-----------

Called by the kernel single threaded after an interrupt occurs. Read
the sensor data and generate an input event for it.

.. _`mpu3050_hw_init`:

mpu3050_hw_init
===============

.. c:function:: int mpu3050_hw_init(struct mpu3050_sensor *sensor)

    initialize hardware

    :param struct mpu3050_sensor \*sensor:
        the sensor

.. _`mpu3050_hw_init.description`:

Description
-----------

Called during device probe; configures the sampling method.

.. _`mpu3050_probe`:

mpu3050_probe
=============

.. c:function:: int mpu3050_probe(struct i2c_client *client, const struct i2c_device_id *id)

    device detection callback

    :param struct i2c_client \*client:
        i2c client of found device

    :param const struct i2c_device_id \*id:
        id match information

.. _`mpu3050_probe.description`:

Description
-----------

The I2C layer calls us when it believes a sensor is present at this
address. Probe to see if this is correct and to validate the device.

If present install the relevant sysfs interfaces and input device.

.. _`mpu3050_remove`:

mpu3050_remove
==============

.. c:function:: int mpu3050_remove(struct i2c_client *client)

    remove a sensor

    :param struct i2c_client \*client:
        i2c client of sensor being removed

.. _`mpu3050_remove.description`:

Description
-----------

Our sensor is going away, clean up the resources.

.. _`mpu3050_suspend`:

mpu3050_suspend
===============

.. c:function:: int mpu3050_suspend(struct device *dev)

    called on device suspend

    :param struct device \*dev:
        device being suspended

.. _`mpu3050_suspend.description`:

Description
-----------

Put the device into sleep mode before we suspend the machine.

.. _`mpu3050_resume`:

mpu3050_resume
==============

.. c:function:: int mpu3050_resume(struct device *dev)

    called on device resume

    :param struct device \*dev:
        device being resumed

.. _`mpu3050_resume.description`:

Description
-----------

Put the device into powered mode on resume.

.. This file was automatic generated / don't edit.

