.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/scsi/NCR5380.c

.. _`initialize_scp`:

initialize_SCp
==============

.. c:function:: void initialize_SCp(struct scsi_cmnd *cmd)

    init the scsi pointer field

    :param struct scsi_cmnd \*cmd:
        command block to set up

.. _`initialize_scp.description`:

Description
-----------

Set up the internal fields in the SCSI command.

.. _`ncr5380_poll_politely2`:

NCR5380_poll_politely2
======================

.. c:function:: int NCR5380_poll_politely2(struct NCR5380_hostdata *hostdata, unsigned int reg1, u8 bit1, u8 val1, unsigned int reg2, u8 bit2, u8 val2, unsigned long wait)

    wait for two chip register values

    :param struct NCR5380_hostdata \*hostdata:
        host private data

    :param unsigned int reg1:
        5380 register to poll

    :param u8 bit1:
        Bitmask to check

    :param u8 val1:
        Expected value

    :param unsigned int reg2:
        Second 5380 register to poll

    :param u8 bit2:
        Second bitmask to check

    :param u8 val2:
        Second expected value

    :param unsigned long wait:
        Time-out in jiffies

.. _`ncr5380_poll_politely2.description`:

Description
-----------

Polls the chip in a reasonably efficient manner waiting for an
event to occur. After a short quick poll we begin to yield the CPU
(if possible). In irq contexts the time-out is arbitrarily limited.
Callers may hold locks as long as they are held in irq mode.

Returns 0 if either or both event(s) occurred otherwise -ETIMEDOUT.

.. _`ncr5380_print`:

NCR5380_print
=============

.. c:function:: void NCR5380_print(struct Scsi_Host *instance)

    print scsi bus signals

    :param struct Scsi_Host \*instance:
        adapter state to dump

.. _`ncr5380_print.description`:

Description
-----------

Print the SCSI bus signals for debugging purposes

.. _`ncr5380_print_phase`:

NCR5380_print_phase
===================

.. c:function:: void NCR5380_print_phase(struct Scsi_Host *instance)

    show SCSI phase

    :param struct Scsi_Host \*instance:
        adapter to dump

.. _`ncr5380_print_phase.description`:

Description
-----------

Print the current SCSI phase for debugging purposes

.. _`ncr5380_info`:

NCR5380_info
============

.. c:function:: const char *NCR5380_info(struct Scsi_Host *instance)

    report driver and host information

    :param struct Scsi_Host \*instance:
        relevant scsi host instance

.. _`ncr5380_info.description`:

Description
-----------

For use as the host template \ :c:func:`info`\  handler.

.. _`ncr5380_init`:

NCR5380_init
============

.. c:function:: int NCR5380_init(struct Scsi_Host *instance, int flags)

    initialise an NCR5380

    :param struct Scsi_Host \*instance:
        adapter to configure

    :param int flags:
        control flags

.. _`ncr5380_init.description`:

Description
-----------

Initializes \*instance and corresponding 5380 chip,
with flags OR'd into the initial flags value.

Notes : I assume that the host, hostno, and id bits have been
set correctly. I don't care about the irq and other fields.

Returns 0 for success

.. _`ncr5380_maybe_reset_bus`:

NCR5380_maybe_reset_bus
=======================

.. c:function:: int NCR5380_maybe_reset_bus(struct Scsi_Host *instance)

    Detect and correct bus wedge problems.

    :param struct Scsi_Host \*instance:
        adapter to check

.. _`ncr5380_maybe_reset_bus.description`:

Description
-----------

If the system crashed, it may have crashed with a connected target and
the SCSI bus busy. Check for BUS FREE phase. If not, try to abort the
currently established nexus, which we know nothing about. Failing that
do a bus reset.

Note that a bus reset will cause the chip to assert IRQ.

Returns 0 if successful, otherwise -ENXIO.

.. _`ncr5380_exit`:

NCR5380_exit
============

.. c:function:: void NCR5380_exit(struct Scsi_Host *instance)

    remove an NCR5380

    :param struct Scsi_Host \*instance:
        adapter to remove

.. _`ncr5380_exit.description`:

Description
-----------

Assumes that no more work can be queued (e.g. by NCR5380_intr).

.. _`complete_cmd`:

complete_cmd
============

.. c:function:: void complete_cmd(struct Scsi_Host *instance, struct scsi_cmnd *cmd)

    finish processing a command and return it to the SCSI ML

    :param struct Scsi_Host \*instance:
        the host instance

    :param struct scsi_cmnd \*cmd:
        command to complete

.. _`ncr5380_queue_command`:

NCR5380_queue_command
=====================

.. c:function:: int NCR5380_queue_command(struct Scsi_Host *instance, struct scsi_cmnd *cmd)

    queue a command

    :param struct Scsi_Host \*instance:
        the relevant SCSI adapter

    :param struct scsi_cmnd \*cmd:
        SCSI command

.. _`ncr5380_queue_command.description`:

Description
-----------

cmd is added to the per-instance issue queue, with minor
twiddling done to the host specific fields of cmd.  If the
main coroutine is not running, it is restarted.

.. _`dequeue_next_cmd`:

dequeue_next_cmd
================

.. c:function:: struct scsi_cmnd *dequeue_next_cmd(struct Scsi_Host *instance)

    dequeue a command for processing

    :param struct Scsi_Host \*instance:
        the scsi host instance

.. _`dequeue_next_cmd.description`:

Description
-----------

Priority is given to commands on the autosense queue. These commands
need autosense because of a CHECK CONDITION result.

Returns a command pointer if a command is found for a target that is
not already busy. Otherwise returns NULL.

.. _`ncr5380_main`:

NCR5380_main
============

.. c:function:: void NCR5380_main(struct work_struct *work)

    NCR state machines

    :param struct work_struct \*work:
        *undescribed*

.. _`ncr5380_main.description`:

Description
-----------

NCR5380_main is a coroutine that runs as long as more work can
be done on the NCR5380 host adapters in a system.  Both
\ :c:func:`NCR5380_queue_command`\  and \ :c:func:`NCR5380_intr`\  will try to start it
in case it is not running.

.. _`ncr5380_intr`:

NCR5380_intr
============

.. c:function:: irqreturn_t __maybe_unused NCR5380_intr(int irq, void *dev_id)

    generic NCR5380 irq handler

    :param int irq:
        interrupt number

    :param void \*dev_id:
        device info

.. _`ncr5380_intr.description`:

Description
-----------

Handle interrupts, reestablishing I_T_L or I_T_L_Q nexuses
from the disconnected queue, and restarting \ :c:func:`NCR5380_main`\ 
as required.

The chip can assert IRQ in any of six different conditions. The IRQ flag
is then cleared by reading the Reset Parity/Interrupt Register (RPIR).

.. _`ncr5380_intr.three-of-these-six-conditions-are-latched-in-the-bus-and-status-register`:

Three of these six conditions are latched in the Bus and Status Register
------------------------------------------------------------------------

- End of DMA (cleared by ending DMA Mode)
- Parity error (cleared by reading RPIR)
- Loss of BSY (cleared by reading RPIR)

.. _`ncr5380_intr.two-conditions-have-flag-bits-that-are-not-latched`:

Two conditions have flag bits that are not latched
--------------------------------------------------

- Bus phase mismatch (non-maskable in DMA Mode, cleared by ending DMA Mode)
- Bus reset (non-maskable)

.. _`ncr5380_intr.the-remaining-condition-has-no-flag-bit-at-all`:

The remaining condition has no flag bit at all
----------------------------------------------

- Selection/reselection

Hence, establishing the cause(s) of any interrupt is partly guesswork.
In "The DP8490 and DP5380 Comparison Guide", National Semiconductor
claimed that "the design of the [DP8490] interrupt logic ensures
interrupts will not be lost (they can be on the DP5380)."
The L5380/53C80 datasheet from LOGIC Devices has more details.

Checking for bus reset by reading RST is futile because of interrupt
latency, but a bus reset will reset chip logic. Checking for parity error
is unnecessary because that interrupt is never enabled. A Loss of BSY
condition will clear DMA Mode. We can tell when this occurs because the
the Busy Monitor interrupt is enabled together with DMA Mode.

.. _`do_reset`:

do_reset
========

.. c:function:: void do_reset(struct Scsi_Host *instance)

    issue a reset command

    :param struct Scsi_Host \*instance:
        adapter to reset

.. _`do_reset.description`:

Description
-----------

Issue a reset sequence to the NCR5380 and try and get the bus
back into sane shape.

This clears the reset interrupt flag because there may be no handler for
it. When the driver is initialized, the \ :c:func:`NCR5380_intr`\  handler has not yet
been installed. And when in EH we may have released the ST DMA interrupt.

.. _`do_abort`:

do_abort
========

.. c:function:: int do_abort(struct Scsi_Host *instance)

    abort the currently established nexus by going to MESSAGE OUT phase and sending an ABORT message.

    :param struct Scsi_Host \*instance:
        relevant scsi host instance

.. _`do_abort.description`:

Description
-----------

Returns 0 on success, -1 on failure.

.. _`list_find_cmd`:

list_find_cmd
=============

.. c:function:: bool list_find_cmd(struct list_head *haystack, struct scsi_cmnd *needle)

    test for presence of a command in a linked list

    :param struct list_head \*haystack:
        list of commands

    :param struct scsi_cmnd \*needle:
        command to search for

.. _`list_del_cmd`:

list_del_cmd
============

.. c:function:: bool list_del_cmd(struct list_head *haystack, struct scsi_cmnd *needle)

    remove a command from linked list

    :param struct list_head \*haystack:
        list of commands

    :param struct scsi_cmnd \*needle:
        command to remove

.. _`ncr5380_abort`:

NCR5380_abort
=============

.. c:function:: int NCR5380_abort(struct scsi_cmnd *cmd)

    scsi host \ :c:func:`eh_abort_handler`\  method

    :param struct scsi_cmnd \*cmd:
        the command to be aborted

.. _`ncr5380_abort.description`:

Description
-----------

Try to abort a given command by removing it from queues and/or sending
the target an abort message. This may not succeed in causing a target
to abort the command. Nonetheless, the low-level driver must forget about
the command because the mid-layer reclaims it and it may be re-issued.

The normal path taken by a command is as follows. For EH we trace this
same path to locate and abort the command.

unissued -> selecting -> [unissued -> selecting ->]... connected ->
[disconnected -> connected ->]...
[autosense -> connected ->] done

If cmd was not found at all then presumably it has already been completed,
in which case return SUCCESS to try to avoid further EH measures.

If the command has not completed yet, we must not fail to find it.
We have no option but to forget the aborted command (even if it still
lacks sense data). The mid-layer may re-issue a command that is in error
recovery (see scsi_send_eh_cmnd), but the logic and data structures in
this driver are such that a command can appear on one queue only.

The lock protects driver data structures, but EH handlers also use it
to serialize their own execution and prevent their own re-entry.

.. _`ncr5380_bus_reset`:

NCR5380_bus_reset
=================

.. c:function:: int NCR5380_bus_reset(struct scsi_cmnd *cmd)

    reset the SCSI bus

    :param struct scsi_cmnd \*cmd:
        SCSI command undergoing EH

.. _`ncr5380_bus_reset.description`:

Description
-----------

Returns SUCCESS

.. This file was automatic generated / don't edit.

