.. -*- coding: utf-8; mode: rst -*-
.. src-file: net/batman-adv/packet.h

.. _`batadv_packettype`:

enum batadv_packettype
======================

.. c:type:: enum batadv_packettype

    types for batman-adv encapsulated packets

.. _`batadv_packettype.definition`:

Definition
----------

.. code-block:: c

    enum batadv_packettype {
        BATADV_IV_OGM,
        BATADV_BCAST,
        BATADV_CODED,
        BATADV_ELP,
        BATADV_OGM2,
        BATADV_UNICAST,
        BATADV_UNICAST_FRAG,
        BATADV_UNICAST_4ADDR,
        BATADV_ICMP,
        BATADV_UNICAST_TVLV
    };

.. _`batadv_packettype.constants`:

Constants
---------

BATADV_IV_OGM
    originator messages for B.A.T.M.A.N. IV

BATADV_BCAST
    broadcast packets carrying broadcast payload

BATADV_CODED
    network coded packets

BATADV_ELP
    echo location packets for B.A.T.M.A.N. V

BATADV_OGM2
    originator messages for B.A.T.M.A.N. V

BATADV_UNICAST
    unicast packets carrying unicast payload traffic

BATADV_UNICAST_FRAG
    unicast packets carrying a fragment of the original
    payload packet

BATADV_UNICAST_4ADDR
    unicast packet including the originator address of
    the sender

BATADV_ICMP
    unicast packet like IP ICMP used for ping or traceroute

BATADV_UNICAST_TVLV
    unicast packet carrying TVLV containers

.. _`batadv_subtype`:

enum batadv_subtype
===================

.. c:type:: enum batadv_subtype

    packet subtype for unicast4addr

.. _`batadv_subtype.definition`:

Definition
----------

.. code-block:: c

    enum batadv_subtype {
        BATADV_P_DATA,
        BATADV_P_DAT_DHT_GET,
        BATADV_P_DAT_DHT_PUT,
        BATADV_P_DAT_CACHE_REPLY
    };

.. _`batadv_subtype.constants`:

Constants
---------

BATADV_P_DATA
    user payload

BATADV_P_DAT_DHT_GET
    DHT request message

BATADV_P_DAT_DHT_PUT
    DHT store message

BATADV_P_DAT_CACHE_REPLY
    ARP reply generated by DAT

.. _`batadv_iv_flags`:

enum batadv_iv_flags
====================

.. c:type:: enum batadv_iv_flags

    flags used in B.A.T.M.A.N. IV OGM packets

.. _`batadv_iv_flags.definition`:

Definition
----------

.. code-block:: c

    enum batadv_iv_flags {
        BATADV_NOT_BEST_NEXT_HOP,
        BATADV_PRIMARIES_FIRST_HOP,
        BATADV_DIRECTLINK
    };

.. _`batadv_iv_flags.constants`:

Constants
---------

BATADV_NOT_BEST_NEXT_HOP
    flag is set when ogm packet is forwarded and was
    previously received from someone else than the best neighbor.

BATADV_PRIMARIES_FIRST_HOP
    flag unused.

BATADV_DIRECTLINK
    flag is for the first hop or if rebroadcasted from a
    one hop neighbor on the interface where it was originally received.

.. _`batadv_mcast_flags`:

enum batadv_mcast_flags
=======================

.. c:type:: enum batadv_mcast_flags

    flags for multicast capabilities and settings

.. _`batadv_mcast_flags.definition`:

Definition
----------

.. code-block:: c

    enum batadv_mcast_flags {
        BATADV_MCAST_WANT_ALL_UNSNOOPABLES,
        BATADV_MCAST_WANT_ALL_IPV4,
        BATADV_MCAST_WANT_ALL_IPV6
    };

.. _`batadv_mcast_flags.constants`:

Constants
---------

BATADV_MCAST_WANT_ALL_UNSNOOPABLES
    we want all packets destined for
    224.0.0.0/24 or ff02::1

BATADV_MCAST_WANT_ALL_IPV4
    we want all IPv4 multicast packets

BATADV_MCAST_WANT_ALL_IPV6
    we want all IPv6 multicast packets

.. _`batadv_tt_data_flags`:

enum batadv_tt_data_flags
=========================

.. c:type:: enum batadv_tt_data_flags

    flags for tt data tvlv

.. _`batadv_tt_data_flags.definition`:

Definition
----------

.. code-block:: c

    enum batadv_tt_data_flags {
        BATADV_TT_OGM_DIFF,
        BATADV_TT_REQUEST,
        BATADV_TT_RESPONSE,
        BATADV_TT_FULL_TABLE
    };

.. _`batadv_tt_data_flags.constants`:

Constants
---------

BATADV_TT_OGM_DIFF
    TT diff propagated through OGM

BATADV_TT_REQUEST
    TT request message

BATADV_TT_RESPONSE
    TT response message

BATADV_TT_FULL_TABLE
    contains full table to replace existing table

.. _`batadv_vlan_flags`:

enum batadv_vlan_flags
======================

.. c:type:: enum batadv_vlan_flags

    flags for the four MSB of any vlan ID field

.. _`batadv_vlan_flags.definition`:

Definition
----------

.. code-block:: c

    enum batadv_vlan_flags {
        BATADV_VLAN_HAS_TAG
    };

.. _`batadv_vlan_flags.constants`:

Constants
---------

BATADV_VLAN_HAS_TAG
    whether the field contains a valid vlan tag or not

.. _`batadv_tvlv_type`:

enum batadv_tvlv_type
=====================

.. c:type:: enum batadv_tvlv_type

    tvlv type definitions

.. _`batadv_tvlv_type.definition`:

Definition
----------

.. code-block:: c

    enum batadv_tvlv_type {
        BATADV_TVLV_GW,
        BATADV_TVLV_DAT,
        BATADV_TVLV_NC,
        BATADV_TVLV_TT,
        BATADV_TVLV_ROAM,
        BATADV_TVLV_MCAST
    };

.. _`batadv_tvlv_type.constants`:

Constants
---------

BATADV_TVLV_GW
    gateway tvlv

BATADV_TVLV_DAT
    distributed arp table tvlv

BATADV_TVLV_NC
    network coding tvlv

BATADV_TVLV_TT
    translation table tvlv

BATADV_TVLV_ROAM
    roaming advertisement tvlv

BATADV_TVLV_MCAST
    multicast capability tvlv

.. _`batadv_ogm_packet`:

struct batadv_ogm_packet
========================

.. c:type:: struct batadv_ogm_packet

    ogm (routing protocol) packet

.. _`batadv_ogm_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_ogm_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 flags;
        __be32 seqno;
        u8 orig;
        u8 prev_sender;
        u8 reserved;
        u8 tq;
        __be16 tvlv_len;
    }

.. _`batadv_ogm_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

flags
    contains routing relevant flags - see enum batadv_iv_flags

seqno
    sequence identification

orig
    address of the source node

prev_sender
    address of the previous sender

reserved
    reserved byte for alignment

tq
    transmission quality

tvlv_len
    length of tvlv data following the ogm header

.. _`batadv_ogm2_packet`:

struct batadv_ogm2_packet
=========================

.. c:type:: struct batadv_ogm2_packet

    ogm2 (routing protocol) packet

.. _`batadv_ogm2_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_ogm2_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 flags;
        __be32 seqno;
        u8 orig;
        __be16 tvlv_len;
        __be32 throughput;
    }

.. _`batadv_ogm2_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the general header

ttl
    time to live for this packet, part of the general header

flags
    reseved for routing relevant flags - currently always 0

seqno
    sequence number

orig
    originator mac address

tvlv_len
    length of the appended tvlv buffer (in bytes)

throughput
    the currently flooded path throughput

.. _`batadv_elp_packet`:

struct batadv_elp_packet
========================

.. c:type:: struct batadv_elp_packet

    elp (neighbor discovery) packet

.. _`batadv_elp_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_elp_packet {
        u8 packet_type;
        u8 version;
        u8 orig;
        __be32 seqno;
        __be32 elp_interval;
    }

.. _`batadv_elp_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

orig
    originator mac address

seqno
    sequence number

elp_interval
    currently used ELP sending interval in ms

.. _`batadv_icmp_header`:

struct batadv_icmp_header
=========================

.. c:type:: struct batadv_icmp_header

    common members among all the ICMP packets

.. _`batadv_icmp_header.definition`:

Definition
----------

.. code-block:: c

    struct batadv_icmp_header {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 msg_type;
        u8 dst;
        u8 orig;
        u8 uid;
        u8 align;
    }

.. _`batadv_icmp_header.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

msg_type
    ICMP packet type

dst
    address of the destination node

orig
    address of the source node

uid
    local ICMP socket identifier

align
    not used - useful for alignment purposes only

.. _`batadv_icmp_header.description`:

Description
-----------

This structure is used for ICMP packets parsing only and it is never sent
over the wire. The alignment field at the end is there to ensure that
members are padded the same way as they are in real packets.

.. _`batadv_icmp_packet`:

struct batadv_icmp_packet
=========================

.. c:type:: struct batadv_icmp_packet

    ICMP packet

.. _`batadv_icmp_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_icmp_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 msg_type;
        u8 dst;
        u8 orig;
        u8 uid;
        u8 reserved;
        __be16 seqno;
    }

.. _`batadv_icmp_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

msg_type
    ICMP packet type

dst
    address of the destination node

orig
    address of the source node

uid
    local ICMP socket identifier

reserved
    not used - useful for alignment

seqno
    ICMP sequence number

.. _`batadv_icmp_tp_packet`:

struct batadv_icmp_tp_packet
============================

.. c:type:: struct batadv_icmp_tp_packet

    ICMP TP Meter packet

.. _`batadv_icmp_tp_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_icmp_tp_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 msg_type;
        u8 dst;
        u8 orig;
        u8 uid;
        u8 subtype;
        u8 session;
        __be32 seqno;
        __be32 timestamp;
    }

.. _`batadv_icmp_tp_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

msg_type
    ICMP packet type

dst
    address of the destination node

orig
    address of the source node

uid
    local ICMP socket identifier

subtype
    TP packet subtype (see batadv_icmp_tp_subtype)

session
    TP session identifier

seqno
    the TP sequence number

timestamp
    time when the packet has been sent. This value is filled in a
    TP_MSG and echoed back in the next TP_ACK so that the sender can compute the
    RTT. Since it is read only by the host which wrote it, there is no need to
    store it using network order

.. _`batadv_icmp_tp_subtype`:

enum batadv_icmp_tp_subtype
===========================

.. c:type:: enum batadv_icmp_tp_subtype

    ICMP TP Meter packet subtypes

.. _`batadv_icmp_tp_subtype.definition`:

Definition
----------

.. code-block:: c

    enum batadv_icmp_tp_subtype {
        BATADV_TP_MSG,
        BATADV_TP_ACK
    };

.. _`batadv_icmp_tp_subtype.constants`:

Constants
---------

BATADV_TP_MSG
    Msg from sender to receiver

BATADV_TP_ACK
    acknowledgment from receiver to sender

.. _`batadv_icmp_packet_rr`:

struct batadv_icmp_packet_rr
============================

.. c:type:: struct batadv_icmp_packet_rr

    ICMP RouteRecord packet

.. _`batadv_icmp_packet_rr.definition`:

Definition
----------

.. code-block:: c

    struct batadv_icmp_packet_rr {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 msg_type;
        u8 dst;
        u8 orig;
        u8 uid;
        u8 rr_cur;
        __be16 seqno;
        u8 rr;
    }

.. _`batadv_icmp_packet_rr.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

msg_type
    ICMP packet type

dst
    address of the destination node

orig
    address of the source node

uid
    local ICMP socket identifier

rr_cur
    number of entries the rr array

seqno
    ICMP sequence number

rr
    route record array

.. _`batadv_unicast_packet`:

struct batadv_unicast_packet
============================

.. c:type:: struct batadv_unicast_packet

    unicast packet for network payload

.. _`batadv_unicast_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_unicast_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 ttvn;
        u8 dest;
    }

.. _`batadv_unicast_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

ttvn
    translation table version number

dest
    originator destination of the unicast packet

.. _`batadv_unicast_4addr_packet`:

struct batadv_unicast_4addr_packet
==================================

.. c:type:: struct batadv_unicast_4addr_packet

    extended unicast packet

.. _`batadv_unicast_4addr_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_unicast_4addr_packet {
        struct batadv_unicast_packet u;
        u8 src;
        u8 subtype;
        u8 reserved;
    }

.. _`batadv_unicast_4addr_packet.members`:

Members
-------

u
    common unicast packet header

src
    address of the source

subtype
    packet subtype

reserved
    reserved byte for alignment

.. _`batadv_frag_packet`:

struct batadv_frag_packet
=========================

.. c:type:: struct batadv_frag_packet

    fragmented packet

.. _`batadv_frag_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_frag_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
    #if defined(__BIG_ENDIAN_BITFIELD)
        u8 no:4;
        u8 priority:3;
        u8 reserved:1;
    #elif defined(__LITTLE_ENDIAN_BITFIELD)
        u8 reserved:1;
        u8 priority:3;
        u8 no:4;
    #else
    #error "unknown bitfield endianness"
    #endif
        u8 dest;
        u8 orig;
        __be16 seqno;
        __be16 total_size;
    }

.. _`batadv_frag_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

no
    fragment number within this sequence

priority
    priority of frame, from ToS IP precedence or 802.1p

reserved
    reserved byte for alignment

reserved
    reserved byte for alignment

priority
    priority of frame, from ToS IP precedence or 802.1p

no
    fragment number within this sequence

dest
    final destination used when routing fragments

orig
    originator of the fragment used when merging the packet

seqno
    sequence identification

total_size
    size of the merged packet

.. _`batadv_bcast_packet`:

struct batadv_bcast_packet
==========================

.. c:type:: struct batadv_bcast_packet

    broadcast packet for network payload

.. _`batadv_bcast_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_bcast_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 reserved;
        __be32 seqno;
        u8 orig;
    }

.. _`batadv_bcast_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

reserved
    reserved byte for alignment

seqno
    sequence identification

orig
    originator of the broadcast packet

.. _`batadv_coded_packet`:

struct batadv_coded_packet
==========================

.. c:type:: struct batadv_coded_packet

    network coded packet

.. _`batadv_coded_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_coded_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 first_ttvn;
        u8 first_source;
        u8 first_orig_dest;
        __be32 first_crc;
        u8 second_ttl;
        u8 second_ttvn;
        u8 second_dest;
        u8 second_source;
        u8 second_orig_dest;
        __be32 second_crc;
        __be16 coded_len;
    }

.. _`batadv_coded_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

first_ttvn
    tt-version number of first included packet

first_source
    original source of first included packet

first_orig_dest
    original destinal of first included packet

first_crc
    checksum of first included packet

second_ttl
    ttl of second packet

second_ttvn
    tt version number of second included packet

second_dest
    second receiver of this coded packet

second_source
    original source of second included packet

second_orig_dest
    original destination of second included packet

second_crc
    checksum of second included packet

coded_len
    length of network coded part of the payload

.. _`batadv_unicast_tvlv_packet`:

struct batadv_unicast_tvlv_packet
=================================

.. c:type:: struct batadv_unicast_tvlv_packet

    generic unicast packet with tvlv payload

.. _`batadv_unicast_tvlv_packet.definition`:

Definition
----------

.. code-block:: c

    struct batadv_unicast_tvlv_packet {
        u8 packet_type;
        u8 version;
        u8 ttl;
        u8 reserved;
        u8 dst;
        u8 src;
        __be16 tvlv_len;
        u16 align;
    }

.. _`batadv_unicast_tvlv_packet.members`:

Members
-------

packet_type
    batman-adv packet type, part of the general header

version
    batman-adv protocol version, part of the genereal header

ttl
    time to live for this packet, part of the genereal header

reserved
    reserved field (for packet alignment)

dst
    address of the destination

src
    address of the source

tvlv_len
    length of tvlv data following the unicast tvlv header

align
    2 bytes to align the header to a 4 byte boundary

.. _`batadv_tvlv_hdr`:

struct batadv_tvlv_hdr
======================

.. c:type:: struct batadv_tvlv_hdr

    base tvlv header struct

.. _`batadv_tvlv_hdr.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_hdr {
        u8 type;
        u8 version;
        __be16 len;
    }

.. _`batadv_tvlv_hdr.members`:

Members
-------

type
    tvlv container type (see batadv_tvlv_type)

version
    tvlv container version

len
    tvlv container length

.. _`batadv_tvlv_gateway_data`:

struct batadv_tvlv_gateway_data
===============================

.. c:type:: struct batadv_tvlv_gateway_data

    gateway data propagated through gw tvlv container

.. _`batadv_tvlv_gateway_data.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_gateway_data {
        __be32 bandwidth_down;
        __be32 bandwidth_up;
    }

.. _`batadv_tvlv_gateway_data.members`:

Members
-------

bandwidth_down
    advertised uplink download bandwidth

bandwidth_up
    advertised uplink upload bandwidth

.. _`batadv_tvlv_tt_data`:

struct batadv_tvlv_tt_data
==========================

.. c:type:: struct batadv_tvlv_tt_data

    tt data propagated through the tt tvlv container

.. _`batadv_tvlv_tt_data.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_tt_data {
        u8 flags;
        u8 ttvn;
        __be16 num_vlan;
    }

.. _`batadv_tvlv_tt_data.members`:

Members
-------

flags
    translation table flags (see batadv_tt_data_flags)

ttvn
    translation table version number

num_vlan
    number of announced VLANs. In the TVLV this struct is followed by
    one batadv_tvlv_tt_vlan_data object per announced vlan

.. _`batadv_tvlv_tt_vlan_data`:

struct batadv_tvlv_tt_vlan_data
===============================

.. c:type:: struct batadv_tvlv_tt_vlan_data

    vlan specific tt data propagated through the tt tvlv container

.. _`batadv_tvlv_tt_vlan_data.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_tt_vlan_data {
        __be32 crc;
        __be16 vid;
        u16 reserved;
    }

.. _`batadv_tvlv_tt_vlan_data.members`:

Members
-------

crc
    crc32 checksum of the entries belonging to this vlan

vid
    vlan identifier

reserved
    unused, useful for alignment purposes

.. _`batadv_tvlv_tt_change`:

struct batadv_tvlv_tt_change
============================

.. c:type:: struct batadv_tvlv_tt_change

    translation table diff data

.. _`batadv_tvlv_tt_change.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_tt_change {
        u8 flags;
        u8 reserved;
        u8 addr;
        __be16 vid;
    }

.. _`batadv_tvlv_tt_change.members`:

Members
-------

flags
    status indicators concerning the non-mesh client (see
    batadv_tt_client_flags)

reserved
    reserved field - useful for alignment purposes only

addr
    mac address of non-mesh client that triggered this tt change

vid
    VLAN identifier

.. _`batadv_tvlv_roam_adv`:

struct batadv_tvlv_roam_adv
===========================

.. c:type:: struct batadv_tvlv_roam_adv

    roaming advertisement

.. _`batadv_tvlv_roam_adv.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_roam_adv {
        u8 client;
        __be16 vid;
    }

.. _`batadv_tvlv_roam_adv.members`:

Members
-------

client
    mac address of roaming client

vid
    VLAN identifier

.. _`batadv_tvlv_mcast_data`:

struct batadv_tvlv_mcast_data
=============================

.. c:type:: struct batadv_tvlv_mcast_data

    payload of a multicast tvlv

.. _`batadv_tvlv_mcast_data.definition`:

Definition
----------

.. code-block:: c

    struct batadv_tvlv_mcast_data {
        u8 flags;
        u8 reserved;
    }

.. _`batadv_tvlv_mcast_data.members`:

Members
-------

flags
    multicast flags announced by the orig node

reserved
    reserved field

.. This file was automatic generated / don't edit.

