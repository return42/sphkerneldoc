.. -*- coding: utf-8; mode: rst -*-
.. src-file: include/net/mac802154.h

.. _`ieee802154_hw_addr_filt_flags`:

enum ieee802154_hw_addr_filt_flags
==================================

.. c:type:: enum ieee802154_hw_addr_filt_flags

    hardware address filtering flags

.. _`ieee802154_hw_addr_filt_flags.definition`:

Definition
----------

.. code-block:: c

    enum ieee802154_hw_addr_filt_flags {
        IEEE802154_AFILT_SADDR_CHANGED,
        IEEE802154_AFILT_IEEEADDR_CHANGED,
        IEEE802154_AFILT_PANID_CHANGED,
        IEEE802154_AFILT_PANC_CHANGED
    };

.. _`ieee802154_hw_addr_filt_flags.constants`:

Constants
---------

IEEE802154_AFILT_SADDR_CHANGED
    Indicates that the short address will be
    change.

IEEE802154_AFILT_IEEEADDR_CHANGED
    Indicates that the extended address
    will be change.

IEEE802154_AFILT_PANID_CHANGED
    Indicates that the pan id will be change.

IEEE802154_AFILT_PANC_CHANGED
    Indicates that the address filter will
    do frame address filtering as a pan coordinator.

.. _`ieee802154_hw_addr_filt_flags.description`:

Description
-----------

The following flags are used to indicate changed address settings from
the stack to the hardware.

.. _`ieee802154_hw_addr_filt`:

struct ieee802154_hw_addr_filt
==============================

.. c:type:: struct ieee802154_hw_addr_filt

    hardware address filtering settings

.. _`ieee802154_hw_addr_filt.definition`:

Definition
----------

.. code-block:: c

    struct ieee802154_hw_addr_filt {
        __le16 pan_id;
        __le16 short_addr;
        __le64 ieee_addr;
        bool pan_coord;
    }

.. _`ieee802154_hw_addr_filt.members`:

Members
-------

pan_id
    pan_id which should be set to the hardware address filter.

short_addr
    short_addr which should be set to the hardware address filter.

ieee_addr
    extended address which should be set to the hardware address
    filter.

pan_coord
    boolean if hardware filtering should be operate as coordinator.

.. _`ieee802154_hw`:

struct ieee802154_hw
====================

.. c:type:: struct ieee802154_hw

    ieee802154 hardware

.. _`ieee802154_hw.definition`:

Definition
----------

.. code-block:: c

    struct ieee802154_hw {
        int extra_tx_headroom;
        u32 flags;
        struct device *parent;
        void *priv;
        struct wpan_phy *phy;
    }

.. _`ieee802154_hw.members`:

Members
-------

extra_tx_headroom
    headroom to reserve in each transmit skb for use by the
    driver (e.g. for transmit headers.)

flags
    hardware flags, see \ :c:type:`enum ieee802154_hw_flags <ieee802154_hw_flags>`\ 

parent
    parent device of the hardware.

priv
    pointer to private area that was allocated for driver use along with
    this structure.

phy
    This points to the \ :c:type:`struct wpan_phy <wpan_phy>`\  allocated for this 802.15.4 PHY.

.. _`ieee802154_hw_flags`:

enum ieee802154_hw_flags
========================

.. c:type:: enum ieee802154_hw_flags

    hardware flags

.. _`ieee802154_hw_flags.definition`:

Definition
----------

.. code-block:: c

    enum ieee802154_hw_flags {
        IEEE802154_HW_TX_OMIT_CKSUM,
        IEEE802154_HW_LBT,
        IEEE802154_HW_CSMA_PARAMS,
        IEEE802154_HW_FRAME_RETRIES,
        IEEE802154_HW_AFILT,
        IEEE802154_HW_PROMISCUOUS,
        IEEE802154_HW_RX_OMIT_CKSUM,
        IEEE802154_HW_RX_DROP_BAD_CKSUM
    };

.. _`ieee802154_hw_flags.constants`:

Constants
---------

IEEE802154_HW_TX_OMIT_CKSUM
    Indicates that xmitter will add FCS on it's
    own.

IEEE802154_HW_LBT
    Indicates that transceiver will support listen before
    transmit.

IEEE802154_HW_CSMA_PARAMS
    Indicates that transceiver will support csma
    parameters (max_be, min_be, backoff exponents).

IEEE802154_HW_FRAME_RETRIES
    Indicates that transceiver will support ARET
    frame retries setting.

IEEE802154_HW_AFILT
    Indicates that transceiver will support hardware
    address filter setting.

IEEE802154_HW_PROMISCUOUS
    Indicates that transceiver will support
    promiscuous mode setting.

IEEE802154_HW_RX_OMIT_CKSUM
    Indicates that receiver omits FCS.

IEEE802154_HW_RX_DROP_BAD_CKSUM
    Indicates that receiver will not filter
    frames with bad checksum.

.. _`ieee802154_hw_flags.description`:

Description
-----------

These flags are used to indicate hardware capabilities to
the stack. Generally, flags here should have their meaning
done in a way that the simplest hardware doesn't need setting
any particular flags. There are some exceptions to this rule,
however, so you are advised to review these flags carefully.

.. _`ieee802154_get_fc_from_skb`:

ieee802154_get_fc_from_skb
==========================

.. c:function:: __le16 ieee802154_get_fc_from_skb(const struct sk_buff *skb)

    get the frame control field from an skb

    :param skb:
        skb where the frame control field will be get from
    :type skb: const struct sk_buff \*

.. _`ieee802154_skb_dst_pan`:

ieee802154_skb_dst_pan
======================

.. c:function:: unsigned char *ieee802154_skb_dst_pan(__le16 fc, const struct sk_buff *skb)

    get the pointer to destination pan field

    :param fc:
        mac header frame control field
    :type fc: __le16

    :param skb:
        skb where the destination pan pointer will be get from
    :type skb: const struct sk_buff \*

.. _`ieee802154_skb_src_pan`:

ieee802154_skb_src_pan
======================

.. c:function:: unsigned char *ieee802154_skb_src_pan(__le16 fc, const struct sk_buff *skb)

    get the pointer to source pan field

    :param fc:
        mac header frame control field
    :type fc: __le16

    :param skb:
        skb where the source pan pointer will be get from
    :type skb: const struct sk_buff \*

.. _`ieee802154_skb_is_intra_pan_addressing`:

ieee802154_skb_is_intra_pan_addressing
======================================

.. c:function:: bool ieee802154_skb_is_intra_pan_addressing(__le16 fc, const struct sk_buff *skb)

    checks whenever the mac addressing is an intra pan communication

    :param fc:
        mac header frame control field
    :type fc: __le16

    :param skb:
        skb where the source and destination pan should be get from
    :type skb: const struct sk_buff \*

.. _`ieee802154_be64_to_le64`:

ieee802154_be64_to_le64
=======================

.. c:function:: void ieee802154_be64_to_le64(void *le64_dst, const void *be64_src)

    copies and convert be64 to le64

    :param le64_dst:
        le64 destination pointer
    :type le64_dst: void \*

    :param be64_src:
        be64 source pointer
    :type be64_src: const void \*

.. _`ieee802154_le64_to_be64`:

ieee802154_le64_to_be64
=======================

.. c:function:: void ieee802154_le64_to_be64(void *be64_dst, const void *le64_src)

    copies and convert le64 to be64

    :param be64_dst:
        be64 destination pointer
    :type be64_dst: void \*

    :param le64_src:
        le64 source pointer
    :type le64_src: const void \*

.. _`ieee802154_le16_to_be16`:

ieee802154_le16_to_be16
=======================

.. c:function:: void ieee802154_le16_to_be16(void *be16_dst, const void *le16_src)

    copies and convert le16 to be16

    :param be16_dst:
        be16 destination pointer
    :type be16_dst: void \*

    :param le16_src:
        le16 source pointer
    :type le16_src: const void \*

.. _`ieee802154_be16_to_le16`:

ieee802154_be16_to_le16
=======================

.. c:function:: void ieee802154_be16_to_le16(void *le16_dst, const void *be16_src)

    copies and convert be16 to le16

    :param le16_dst:
        le16 destination pointer
    :type le16_dst: void \*

    :param be16_src:
        be16 source pointer
    :type be16_src: const void \*

.. _`ieee802154_alloc_hw`:

ieee802154_alloc_hw
===================

.. c:function:: struct ieee802154_hw *ieee802154_alloc_hw(size_t priv_data_len, const struct ieee802154_ops *ops)

    Allocate a new hardware device

    :param priv_data_len:
        length of private data
    :type priv_data_len: size_t

    :param ops:
        callbacks for this device
    :type ops: const struct ieee802154_ops \*

.. _`ieee802154_alloc_hw.description`:

Description
-----------

This must be called once for each hardware device. The returned pointer
must be used to refer to this device when calling other functions.
mac802154 allocates a private data area for the driver pointed to by
\ ``priv``\  in \ :c:type:`struct ieee802154_hw <ieee802154_hw>`\ , the size of this area is given as
\ ``priv_data_len``\ .

.. _`ieee802154_alloc_hw.return`:

Return
------

A pointer to the new hardware device, or \ ``NULL``\  on error.

.. _`ieee802154_free_hw`:

ieee802154_free_hw
==================

.. c:function:: void ieee802154_free_hw(struct ieee802154_hw *hw)

    free hardware descriptor

    :param hw:
        the hardware to free
    :type hw: struct ieee802154_hw \*

.. _`ieee802154_free_hw.description`:

Description
-----------

This function frees everything that was allocated, including the
private data for the driver. You must call \ :c:func:`ieee802154_unregister_hw`\ 
before calling this function.

.. _`ieee802154_register_hw`:

ieee802154_register_hw
======================

.. c:function:: int ieee802154_register_hw(struct ieee802154_hw *hw)

    Register hardware device

    :param hw:
        the device to register as returned by \ :c:func:`ieee802154_alloc_hw`\ 
    :type hw: struct ieee802154_hw \*

.. _`ieee802154_register_hw.description`:

Description
-----------

You must call this function before any other functions in
mac802154. Note that before a hardware can be registered, you
need to fill the contained wpan_phy's information.

.. _`ieee802154_register_hw.return`:

Return
------

0 on success. An error code otherwise.

.. _`ieee802154_unregister_hw`:

ieee802154_unregister_hw
========================

.. c:function:: void ieee802154_unregister_hw(struct ieee802154_hw *hw)

    Unregister a hardware device

    :param hw:
        the hardware to unregister
    :type hw: struct ieee802154_hw \*

.. _`ieee802154_unregister_hw.description`:

Description
-----------

This function instructs mac802154 to free allocated resources
and unregister netdevices from the networking subsystem.

.. _`ieee802154_rx_irqsafe`:

ieee802154_rx_irqsafe
=====================

.. c:function:: void ieee802154_rx_irqsafe(struct ieee802154_hw *hw, struct sk_buff *skb, u8 lqi)

    receive frame

    :param hw:
        the hardware this frame came in on
    :type hw: struct ieee802154_hw \*

    :param skb:
        the buffer to receive, owned by mac802154 after this call
    :type skb: struct sk_buff \*

    :param lqi:
        link quality indicator
    :type lqi: u8

.. _`ieee802154_rx_irqsafe.description`:

Description
-----------

Like \ :c:func:`ieee802154_rx`\  but can be called in IRQ context
(internally defers to a tasklet.)

.. _`ieee802154_wake_queue`:

ieee802154_wake_queue
=====================

.. c:function:: void ieee802154_wake_queue(struct ieee802154_hw *hw)

    wake ieee802154 queue

    :param hw:
        pointer as obtained from \ :c:func:`ieee802154_alloc_hw`\ .
    :type hw: struct ieee802154_hw \*

.. _`ieee802154_wake_queue.description`:

Description
-----------

Drivers should use this function instead of netif_wake_queue.

.. _`ieee802154_stop_queue`:

ieee802154_stop_queue
=====================

.. c:function:: void ieee802154_stop_queue(struct ieee802154_hw *hw)

    stop ieee802154 queue

    :param hw:
        pointer as obtained from \ :c:func:`ieee802154_alloc_hw`\ .
    :type hw: struct ieee802154_hw \*

.. _`ieee802154_stop_queue.description`:

Description
-----------

Drivers should use this function instead of netif_stop_queue.

.. _`ieee802154_xmit_complete`:

ieee802154_xmit_complete
========================

.. c:function:: void ieee802154_xmit_complete(struct ieee802154_hw *hw, struct sk_buff *skb, bool ifs_handling)

    frame transmission complete

    :param hw:
        pointer as obtained from \ :c:func:`ieee802154_alloc_hw`\ .
    :type hw: struct ieee802154_hw \*

    :param skb:
        buffer for transmission
    :type skb: struct sk_buff \*

    :param ifs_handling:
        indicate interframe space handling
    :type ifs_handling: bool

.. This file was automatic generated / don't edit.

