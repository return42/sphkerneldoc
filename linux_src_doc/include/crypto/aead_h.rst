.. -*- coding: utf-8; mode: rst -*-
.. src-file: include/crypto/aead.h

.. _`authenticated-encryption-with-associated-data--aead--cipher-api`:

Authenticated Encryption With Associated Data (AEAD) Cipher API
===============================================================

The AEAD cipher API is used with the ciphers of type CRYPTO_ALG_TYPE_AEAD
(listed as type "aead" in /proc/crypto)

The most prominent examples for this type of encryption is GCM and CCM.
However, the kernel supports other types of AEAD ciphers which are defined
with the following cipher string:

     authenc(keyed message digest, block cipher)

For example: authenc(hmac(sha256), cbc(aes))

The example code provided for the symmetric key cipher operation
applies here as well. Naturally all *skcipher* symbols must be exchanged
the *aead* pendants discussed in the following. In addition, for the AEAD
operation, the aead_request_set_ad function must be used to set the
pointer to the associated data memory location before performing the
encryption or decryption operation. In case of an encryption, the associated
data memory is filled during the encryption operation. For decryption, the
associated data memory must contain data that is used to verify the integrity
of the decrypted data. Another deviation from the asynchronous block cipher
operation is that the caller should explicitly check for -EBADMSG of the
crypto_aead_decrypt. That error indicates an authentication error, i.e.
a breach in the integrity of the message. In essence, that -EBADMSG error
code is the key bonus an AEAD cipher has over "standard" block chaining
modes.

Memory Structure:

To support the needs of the most prominent user of AEAD ciphers, namely
IPSEC, the AEAD ciphers have a special memory layout the caller must adhere
to.

The scatter list pointing to the input data must contain:

* for RFC4106 ciphers, the concatenation of
  associated authentication data || IV || plaintext or ciphertext. Note, the
  same IV (buffer) is also set with the aead_request_set_crypt call. Note,
  the API call of aead_request_set_ad must provide the length of the AAD and
  the IV. The API call of aead_request_set_crypt only points to the size of
  the input plaintext or ciphertext.

* for "normal" AEAD ciphers, the concatenation of
  associated authentication data || plaintext or ciphertext.

It is important to note that if multiple scatter gather list entries form
the input data mentioned above, the first entry must not point to a NULL
buffer. If there is any potential where the AAD buffer can be NULL, the
calling code must contain a precaution to ensure that this does not result
in the first scatter gather list entry pointing to a NULL buffer.

.. _`aead_request`:

struct aead_request
===================

.. c:type:: struct aead_request

    AEAD request

.. _`aead_request.definition`:

Definition
----------

.. code-block:: c

    struct aead_request {
        struct crypto_async_request base;
        unsigned int assoclen;
        unsigned int cryptlen;
        u8 *iv;
        struct scatterlist *src;
        struct scatterlist *dst;
        void *__ctx[] CRYPTO_MINALIGN_ATTR;
    }

.. _`aead_request.members`:

Members
-------

base
    Common attributes for async crypto requests

assoclen
    Length in bytes of associated data for authentication

cryptlen
    Length of data to be encrypted or decrypted

iv
    Initialisation vector

src
    Source data

dst
    Destination data

__ctx
    Start of private context data

.. _`aead_alg`:

struct aead_alg
===============

.. c:type:: struct aead_alg

    AEAD cipher definition

.. _`aead_alg.definition`:

Definition
----------

.. code-block:: c

    struct aead_alg {
        int (*setkey)(struct crypto_aead *tfm, const u8 *key, unsigned int keylen);
        int (*setauthsize)(struct crypto_aead *tfm, unsigned int authsize);
        int (*encrypt)(struct aead_request *req);
        int (*decrypt)(struct aead_request *req);
        int (*init)(struct crypto_aead *tfm);
        void (*exit)(struct crypto_aead *tfm);
        const char *geniv;
        unsigned int ivsize;
        unsigned int maxauthsize;
        unsigned int chunksize;
        struct crypto_alg base;
    }

.. _`aead_alg.members`:

Members
-------

setkey
    see struct skcipher_alg

setauthsize
    Set authentication size for the AEAD transformation. This
    function is used to specify the consumer requested size of the
    authentication tag to be either generated by the transformation
    during encryption or the size of the authentication tag to be
    supplied during the decryption operation. This function is also
    responsible for checking the authentication tag size for
    validity.

encrypt
    see struct skcipher_alg

decrypt
    see struct skcipher_alg

init
    Initialize the cryptographic transformation object. This function
    is used to initialize the cryptographic transformation object.
    This function is called only once at the instantiation time, right
    after the transformation context was allocated. In case the
    cryptographic hardware has some special requirements which need to
    be handled by software, this function shall check for the precise
    requirement of the transformation and put any software fallbacks
    in place.

exit
    Deinitialize the cryptographic transformation object. This is a
    counterpart to \ ``init``\ , used to remove various changes set in
    \ ``init``\ .

geniv
    see struct skcipher_alg

ivsize
    see struct skcipher_alg

maxauthsize
    Set the maximum authentication tag size supported by the
    transformation. A transformation may support smaller tag sizes.
    As the authentication tag is a message digest to ensure the
    integrity of the encrypted data, a consumer typically wants the
    largest authentication tag possible as defined by this
    variable.

chunksize
    see struct skcipher_alg

base
    Definition of a generic crypto cipher algorithm.

.. _`aead_alg.description`:

Description
-----------

All fields except \ ``ivsize``\  is mandatory and must be filled.

.. _`crypto_alloc_aead`:

crypto_alloc_aead
=================

.. c:function:: struct crypto_aead *crypto_alloc_aead(const char *alg_name, u32 type, u32 mask)

    allocate AEAD cipher handle

    :param const char \*alg_name:
        is the cra_name / name or cra_driver_name / driver name of the
        AEAD cipher

    :param u32 type:
        specifies the type of the cipher

    :param u32 mask:
        specifies the mask for the cipher

.. _`crypto_alloc_aead.description`:

Description
-----------

Allocate a cipher handle for an AEAD. The returned struct
crypto_aead is the cipher handle that is required for any subsequent
API invocation for that AEAD.

.. _`crypto_alloc_aead.return`:

Return
------

allocated cipher handle in case of success; \ :c:func:`IS_ERR`\  is true in case
        of an error, \ :c:func:`PTR_ERR`\  returns the error code.

.. _`crypto_free_aead`:

crypto_free_aead
================

.. c:function:: void crypto_free_aead(struct crypto_aead *tfm)

    zeroize and free aead handle

    :param struct crypto_aead \*tfm:
        cipher handle to be freed

.. _`crypto_aead_ivsize`:

crypto_aead_ivsize
==================

.. c:function:: unsigned int crypto_aead_ivsize(struct crypto_aead *tfm)

    obtain IV size

    :param struct crypto_aead \*tfm:
        cipher handle

.. _`crypto_aead_ivsize.description`:

Description
-----------

The size of the IV for the aead referenced by the cipher handle is
returned. This IV size may be zero if the cipher does not need an IV.

.. _`crypto_aead_ivsize.return`:

Return
------

IV size in bytes

.. _`crypto_aead_authsize`:

crypto_aead_authsize
====================

.. c:function:: unsigned int crypto_aead_authsize(struct crypto_aead *tfm)

    obtain maximum authentication data size

    :param struct crypto_aead \*tfm:
        cipher handle

.. _`crypto_aead_authsize.description`:

Description
-----------

The maximum size of the authentication data for the AEAD cipher referenced
by the AEAD cipher handle is returned. The authentication data size may be
zero if the cipher implements a hard-coded maximum.

The authentication data may also be known as "tag value".

.. _`crypto_aead_authsize.return`:

Return
------

authentication data size / tag size in bytes

.. _`crypto_aead_blocksize`:

crypto_aead_blocksize
=====================

.. c:function:: unsigned int crypto_aead_blocksize(struct crypto_aead *tfm)

    obtain block size of cipher

    :param struct crypto_aead \*tfm:
        cipher handle

.. _`crypto_aead_blocksize.description`:

Description
-----------

The block size for the AEAD referenced with the cipher handle is returned.
The caller may use that information to allocate appropriate memory for the
data returned by the encryption or decryption operation

.. _`crypto_aead_blocksize.return`:

Return
------

block size of cipher

.. _`crypto_aead_setkey`:

crypto_aead_setkey
==================

.. c:function:: int crypto_aead_setkey(struct crypto_aead *tfm, const u8 *key, unsigned int keylen)

    set key for cipher

    :param struct crypto_aead \*tfm:
        cipher handle

    :param const u8 \*key:
        buffer holding the key

    :param unsigned int keylen:
        length of the key in bytes

.. _`crypto_aead_setkey.description`:

Description
-----------

The caller provided key is set for the AEAD referenced by the cipher
handle.

Note, the key length determines the cipher type. Many block ciphers implement
different cipher modes depending on the key size, such as AES-128 vs AES-192
vs. AES-256. When providing a 16 byte key for an AES cipher handle, AES-128
is performed.

.. _`crypto_aead_setkey.return`:

Return
------

0 if the setting of the key was successful; < 0 if an error occurred

.. _`crypto_aead_setauthsize`:

crypto_aead_setauthsize
=======================

.. c:function:: int crypto_aead_setauthsize(struct crypto_aead *tfm, unsigned int authsize)

    set authentication data size

    :param struct crypto_aead \*tfm:
        cipher handle

    :param unsigned int authsize:
        size of the authentication data / tag in bytes

.. _`crypto_aead_setauthsize.description`:

Description
-----------

Set the authentication data size / tag size. AEAD requires an authentication
tag (or MAC) in addition to the associated data.

.. _`crypto_aead_setauthsize.return`:

Return
------

0 if the setting of the key was successful; < 0 if an error occurred

.. _`crypto_aead_encrypt`:

crypto_aead_encrypt
===================

.. c:function:: int crypto_aead_encrypt(struct aead_request *req)

    encrypt plaintext

    :param struct aead_request \*req:
        reference to the aead_request handle that holds all information
        needed to perform the cipher operation

.. _`crypto_aead_encrypt.description`:

Description
-----------

Encrypt plaintext data using the aead_request handle. That data structure
and how it is filled with data is discussed with the aead_request_*
functions.

IMPORTANT NOTE The encryption operation creates the authentication data /
               tag. That data is concatenated with the created ciphertext.
               The ciphertext memory size is therefore the given number of
               block cipher blocks + the size defined by the
               crypto_aead_setauthsize invocation. The caller must ensure
               that sufficient memory is available for the ciphertext and
               the authentication tag.

.. _`crypto_aead_encrypt.return`:

Return
------

0 if the cipher operation was successful; < 0 if an error occurred

.. _`crypto_aead_decrypt`:

crypto_aead_decrypt
===================

.. c:function:: int crypto_aead_decrypt(struct aead_request *req)

    decrypt ciphertext

    :param struct aead_request \*req:
        reference to the ablkcipher_request handle that holds all information
        needed to perform the cipher operation

.. _`crypto_aead_decrypt.description`:

Description
-----------

Decrypt ciphertext data using the aead_request handle. That data structure
and how it is filled with data is discussed with the aead_request_*
functions.

IMPORTANT NOTE The caller must concatenate the ciphertext followed by the
               authentication data / tag. That authentication data / tag
               must have the size defined by the crypto_aead_setauthsize
               invocation.

.. _`crypto_aead_decrypt.return`:

Return
------

0 if the cipher operation was successful; -EBADMSG: The AEAD
        cipher operation performs the authentication of the data during the
        decryption operation. Therefore, the function returns this error if
        the authentication of the ciphertext was unsuccessful (i.e. the
        integrity of the ciphertext or the associated data was violated);
        < 0 if an error occurred.

.. _`asynchronous-aead-request-handle`:

Asynchronous AEAD Request Handle
================================

The aead_request data structure contains all pointers to data required for
the AEAD cipher operation. This includes the cipher handle (which can be
used by multiple aead_request instances), pointer to plaintext and
ciphertext, asynchronous callback function, etc. It acts as a handle to the
aead_request_* API calls in a similar way as AEAD handle to the
crypto_aead_* API calls.

.. _`crypto_aead_reqsize`:

crypto_aead_reqsize
===================

.. c:function:: unsigned int crypto_aead_reqsize(struct crypto_aead *tfm)

    obtain size of the request data structure

    :param struct crypto_aead \*tfm:
        cipher handle

.. _`crypto_aead_reqsize.return`:

Return
------

number of bytes

.. _`aead_request_set_tfm`:

aead_request_set_tfm
====================

.. c:function:: void aead_request_set_tfm(struct aead_request *req, struct crypto_aead *tfm)

    update cipher handle reference in request

    :param struct aead_request \*req:
        request handle to be modified

    :param struct crypto_aead \*tfm:
        cipher handle that shall be added to the request handle

.. _`aead_request_set_tfm.description`:

Description
-----------

Allow the caller to replace the existing aead handle in the request
data structure with a different one.

.. _`aead_request_alloc`:

aead_request_alloc
==================

.. c:function:: struct aead_request *aead_request_alloc(struct crypto_aead *tfm, gfp_t gfp)

    allocate request data structure

    :param struct crypto_aead \*tfm:
        cipher handle to be registered with the request

    :param gfp_t gfp:
        memory allocation flag that is handed to kmalloc by the API call.

.. _`aead_request_alloc.description`:

Description
-----------

Allocate the request data structure that must be used with the AEAD
encrypt and decrypt API calls. During the allocation, the provided aead
handle is registered in the request data structure.

.. _`aead_request_alloc.return`:

Return
------

allocated request handle in case of success, or NULL if out of memory

.. _`aead_request_free`:

aead_request_free
=================

.. c:function:: void aead_request_free(struct aead_request *req)

    zeroize and free request data structure

    :param struct aead_request \*req:
        request data structure cipher handle to be freed

.. _`aead_request_set_callback`:

aead_request_set_callback
=========================

.. c:function:: void aead_request_set_callback(struct aead_request *req, u32 flags, crypto_completion_t compl, void *data)

    set asynchronous callback function

    :param struct aead_request \*req:
        request handle

    :param u32 flags:
        specify zero or an ORing of the flags
        CRYPTO_TFM_REQ_MAY_BACKLOG the request queue may back log and
        increase the wait queue beyond the initial maximum size;
        CRYPTO_TFM_REQ_MAY_SLEEP the request processing may sleep

    :param crypto_completion_t compl:
        callback function pointer to be registered with the request handle

    :param void \*data:
        The data pointer refers to memory that is not used by the kernel
        crypto API, but provided to the callback function for it to use. Here,
        the caller can provide a reference to memory the callback function can
        operate on. As the callback function is invoked asynchronously to the
        related functionality, it may need to access data structures of the
        related functionality which can be referenced using this pointer. The
        callback function can access the memory via the "data" field in the
        crypto_async_request data structure provided to the callback function.

.. _`aead_request_set_callback.description`:

Description
-----------

Setting the callback function that is triggered once the cipher operation
completes

The callback function is registered with the aead_request handle and
must comply with the following template::

     void callback_function(struct crypto_async_request *req, int error)

.. _`aead_request_set_crypt`:

aead_request_set_crypt
======================

.. c:function:: void aead_request_set_crypt(struct aead_request *req, struct scatterlist *src, struct scatterlist *dst, unsigned int cryptlen, u8 *iv)

    set data buffers

    :param struct aead_request \*req:
        request handle

    :param struct scatterlist \*src:
        source scatter / gather list

    :param struct scatterlist \*dst:
        destination scatter / gather list

    :param unsigned int cryptlen:
        number of bytes to process from \ ``src``\ 

    :param u8 \*iv:
        IV for the cipher operation which must comply with the IV size defined
        by \ :c:func:`crypto_aead_ivsize`\ 

.. _`aead_request_set_crypt.description`:

Description
-----------

Setting the source data and destination data scatter / gather lists which
hold the associated data concatenated with the plaintext or ciphertext. See
below for the authentication tag.

For encryption, the source is treated as the plaintext and the
destination is the ciphertext. For a decryption operation, the use is
reversed - the source is the ciphertext and the destination is the plaintext.

.. _`aead_request_set_crypt.the-memory-structure-for-cipher-operation-has-the-following-structure`:

The memory structure for cipher operation has the following structure
---------------------------------------------------------------------


- AEAD encryption input:  assoc data || plaintext
- AEAD encryption output: assoc data || cipherntext || auth tag
- AEAD decryption input:  assoc data || ciphertext || auth tag
- AEAD decryption output: assoc data || plaintext

Albeit the kernel requires the presence of the AAD buffer, however,
the kernel does not fill the AAD buffer in the output case. If the
caller wants to have that data buffer filled, the caller must either
use an in-place cipher operation (i.e. same memory location for
input/output memory location).

.. _`aead_request_set_ad`:

aead_request_set_ad
===================

.. c:function:: void aead_request_set_ad(struct aead_request *req, unsigned int assoclen)

    set associated data information

    :param struct aead_request \*req:
        request handle

    :param unsigned int assoclen:
        number of bytes in associated data

.. _`aead_request_set_ad.description`:

Description
-----------

Setting the AD information.  This function sets the length of
the associated data.

.. This file was automatic generated / don't edit.

