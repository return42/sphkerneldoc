.. -*- coding: utf-8; mode: rst -*-
.. src-file: include/linux/ieee80211.h

.. _`ieee80211_has_tods`:

ieee80211_has_tods
==================

.. c:function:: bool ieee80211_has_tods(__le16 fc)

    check if IEEE80211_FCTL_TODS is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_fromds`:

ieee80211_has_fromds
====================

.. c:function:: bool ieee80211_has_fromds(__le16 fc)

    check if IEEE80211_FCTL_FROMDS is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_a4`:

ieee80211_has_a4
================

.. c:function:: bool ieee80211_has_a4(__le16 fc)

    check if IEEE80211_FCTL_TODS and IEEE80211_FCTL_FROMDS are set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_morefrags`:

ieee80211_has_morefrags
=======================

.. c:function:: bool ieee80211_has_morefrags(__le16 fc)

    check if IEEE80211_FCTL_MOREFRAGS is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_retry`:

ieee80211_has_retry
===================

.. c:function:: bool ieee80211_has_retry(__le16 fc)

    check if IEEE80211_FCTL_RETRY is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_pm`:

ieee80211_has_pm
================

.. c:function:: bool ieee80211_has_pm(__le16 fc)

    check if IEEE80211_FCTL_PM is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_moredata`:

ieee80211_has_moredata
======================

.. c:function:: bool ieee80211_has_moredata(__le16 fc)

    check if IEEE80211_FCTL_MOREDATA is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_protected`:

ieee80211_has_protected
=======================

.. c:function:: bool ieee80211_has_protected(__le16 fc)

    check if IEEE80211_FCTL_PROTECTED is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_has_order`:

ieee80211_has_order
===================

.. c:function:: bool ieee80211_has_order(__le16 fc)

    check if IEEE80211_FCTL_ORDER is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_mgmt`:

ieee80211_is_mgmt
=================

.. c:function:: bool ieee80211_is_mgmt(__le16 fc)

    check if type is IEEE80211_FTYPE_MGMT

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_ctl`:

ieee80211_is_ctl
================

.. c:function:: bool ieee80211_is_ctl(__le16 fc)

    check if type is IEEE80211_FTYPE_CTL

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_data`:

ieee80211_is_data
=================

.. c:function:: bool ieee80211_is_data(__le16 fc)

    check if type is IEEE80211_FTYPE_DATA

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_data_qos`:

ieee80211_is_data_qos
=====================

.. c:function:: bool ieee80211_is_data_qos(__le16 fc)

    check if type is IEEE80211_FTYPE_DATA and IEEE80211_STYPE_QOS_DATA is set

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_data_present`:

ieee80211_is_data_present
=========================

.. c:function:: bool ieee80211_is_data_present(__le16 fc)

    check if type is IEEE80211_FTYPE_DATA and has data

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_assoc_req`:

ieee80211_is_assoc_req
======================

.. c:function:: bool ieee80211_is_assoc_req(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ASSOC_REQ

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_assoc_resp`:

ieee80211_is_assoc_resp
=======================

.. c:function:: bool ieee80211_is_assoc_resp(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ASSOC_RESP

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_reassoc_req`:

ieee80211_is_reassoc_req
========================

.. c:function:: bool ieee80211_is_reassoc_req(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_REASSOC_REQ

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_reassoc_resp`:

ieee80211_is_reassoc_resp
=========================

.. c:function:: bool ieee80211_is_reassoc_resp(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_REASSOC_RESP

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_probe_req`:

ieee80211_is_probe_req
======================

.. c:function:: bool ieee80211_is_probe_req(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_PROBE_REQ

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_probe_resp`:

ieee80211_is_probe_resp
=======================

.. c:function:: bool ieee80211_is_probe_resp(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_PROBE_RESP

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_beacon`:

ieee80211_is_beacon
===================

.. c:function:: bool ieee80211_is_beacon(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_BEACON

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_atim`:

ieee80211_is_atim
=================

.. c:function:: bool ieee80211_is_atim(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ATIM

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_disassoc`:

ieee80211_is_disassoc
=====================

.. c:function:: bool ieee80211_is_disassoc(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_DISASSOC

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_auth`:

ieee80211_is_auth
=================

.. c:function:: bool ieee80211_is_auth(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_AUTH

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_deauth`:

ieee80211_is_deauth
===================

.. c:function:: bool ieee80211_is_deauth(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_DEAUTH

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_action`:

ieee80211_is_action
===================

.. c:function:: bool ieee80211_is_action(__le16 fc)

    check if IEEE80211_FTYPE_MGMT && IEEE80211_STYPE_ACTION

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_back_req`:

ieee80211_is_back_req
=====================

.. c:function:: bool ieee80211_is_back_req(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_BACK_REQ

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_back`:

ieee80211_is_back
=================

.. c:function:: bool ieee80211_is_back(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_BACK

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_pspoll`:

ieee80211_is_pspoll
===================

.. c:function:: bool ieee80211_is_pspoll(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_PSPOLL

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_rts`:

ieee80211_is_rts
================

.. c:function:: bool ieee80211_is_rts(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_RTS

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_cts`:

ieee80211_is_cts
================

.. c:function:: bool ieee80211_is_cts(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_CTS

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_ack`:

ieee80211_is_ack
================

.. c:function:: bool ieee80211_is_ack(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_ACK

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_cfend`:

ieee80211_is_cfend
==================

.. c:function:: bool ieee80211_is_cfend(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_CFEND

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_cfendack`:

ieee80211_is_cfendack
=====================

.. c:function:: bool ieee80211_is_cfendack(__le16 fc)

    check if IEEE80211_FTYPE_CTL && IEEE80211_STYPE_CFENDACK

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_nullfunc`:

ieee80211_is_nullfunc
=====================

.. c:function:: bool ieee80211_is_nullfunc(__le16 fc)

    check if frame is a regular (non-QoS) nullfunc frame

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_qos_nullfunc`:

ieee80211_is_qos_nullfunc
=========================

.. c:function:: bool ieee80211_is_qos_nullfunc(__le16 fc)

    check if frame is a QoS nullfunc frame

    :param __le16 fc:
        frame control bytes in little-endian byteorder

.. _`ieee80211_is_bufferable_mmpdu`:

ieee80211_is_bufferable_mmpdu
=============================

.. c:function:: bool ieee80211_is_bufferable_mmpdu(__le16 fc)

    check if frame is bufferable MMPDU

    :param __le16 fc:
        frame control field in little-endian byteorder

.. _`ieee80211_is_first_frag`:

ieee80211_is_first_frag
=======================

.. c:function:: bool ieee80211_is_first_frag(__le16 seq_ctrl)

    check if IEEE80211_SCTL_FRAG is not set

    :param __le16 seq_ctrl:
        frame sequence control bytes in little-endian byteorder

.. _`ieee80211_is_frag`:

ieee80211_is_frag
=================

.. c:function:: bool ieee80211_is_frag(struct ieee80211_hdr *hdr)

    check if a frame is a fragment

    :param struct ieee80211_hdr \*hdr:
        802.11 header of the frame

.. _`ieee80211_preq_flags`:

enum ieee80211_preq_flags
=========================

.. c:type:: enum ieee80211_preq_flags

    mesh PREQ element flags

.. _`ieee80211_preq_flags.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_preq_flags {
        IEEE80211_PREQ_PROACTIVE_PREP_FLAG
    };

.. _`ieee80211_preq_flags.constants`:

Constants
---------

IEEE80211_PREQ_PROACTIVE_PREP_FLAG
    proactive PREP subfield

.. _`ieee80211_preq_target_flags`:

enum ieee80211_preq_target_flags
================================

.. c:type:: enum ieee80211_preq_target_flags

    mesh PREQ element per target flags

.. _`ieee80211_preq_target_flags.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_preq_target_flags {
        IEEE80211_PREQ_TO_FLAG,
        IEEE80211_PREQ_USN_FLAG
    };

.. _`ieee80211_preq_target_flags.constants`:

Constants
---------

IEEE80211_PREQ_TO_FLAG
    target only subfield

IEEE80211_PREQ_USN_FLAG
    unknown target HWMP sequence number subfield

.. _`ieee80211_quiet_ie`:

struct ieee80211_quiet_ie
=========================

.. c:type:: struct ieee80211_quiet_ie


.. _`ieee80211_quiet_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_quiet_ie {
        u8 count;
        u8 period;
        __le16 duration;
        __le16 offset;
    }

.. _`ieee80211_quiet_ie.members`:

Members
-------

count
    *undescribed*

period
    *undescribed*

duration
    *undescribed*

offset
    *undescribed*

.. _`ieee80211_quiet_ie.description`:

Description
-----------

This structure refers to "Quiet information element"

.. _`ieee80211_msrment_ie`:

struct ieee80211_msrment_ie
===========================

.. c:type:: struct ieee80211_msrment_ie


.. _`ieee80211_msrment_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_msrment_ie {
        u8 token;
        u8 mode;
        u8 type;
        u8 request[0];
    }

.. _`ieee80211_msrment_ie.members`:

Members
-------

token
    *undescribed*

mode
    *undescribed*

type
    *undescribed*

.. _`ieee80211_msrment_ie.description`:

Description
-----------

This structure refers to "Measurement Request/Report information element"

.. _`ieee80211_channel_sw_ie`:

struct ieee80211_channel_sw_ie
==============================

.. c:type:: struct ieee80211_channel_sw_ie


.. _`ieee80211_channel_sw_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_channel_sw_ie {
        u8 mode;
        u8 new_ch_num;
        u8 count;
    }

.. _`ieee80211_channel_sw_ie.members`:

Members
-------

mode
    *undescribed*

new_ch_num
    *undescribed*

count
    *undescribed*

.. _`ieee80211_channel_sw_ie.description`:

Description
-----------

This structure refers to "Channel Switch Announcement information element"

.. _`ieee80211_ext_chansw_ie`:

struct ieee80211_ext_chansw_ie
==============================

.. c:type:: struct ieee80211_ext_chansw_ie


.. _`ieee80211_ext_chansw_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_ext_chansw_ie {
        u8 mode;
        u8 new_operating_class;
        u8 new_ch_num;
        u8 count;
    }

.. _`ieee80211_ext_chansw_ie.members`:

Members
-------

mode
    *undescribed*

new_operating_class
    *undescribed*

new_ch_num
    *undescribed*

count
    *undescribed*

.. _`ieee80211_ext_chansw_ie.description`:

Description
-----------

This structure represents the "Extended Channel Switch Announcement element"

.. _`ieee80211_sec_chan_offs_ie`:

struct ieee80211_sec_chan_offs_ie
=================================

.. c:type:: struct ieee80211_sec_chan_offs_ie

    secondary channel offset IE

.. _`ieee80211_sec_chan_offs_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_sec_chan_offs_ie {
        u8 sec_chan_offs;
    }

.. _`ieee80211_sec_chan_offs_ie.members`:

Members
-------

sec_chan_offs
    secondary channel offset, uses IEEE80211_HT_PARAM_CHA_SEC\_\*
    values here
    This structure represents the "Secondary Channel Offset element"

.. _`ieee80211_mesh_chansw_params_ie`:

struct ieee80211_mesh_chansw_params_ie
======================================

.. c:type:: struct ieee80211_mesh_chansw_params_ie

    mesh channel switch parameters IE

.. _`ieee80211_mesh_chansw_params_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_mesh_chansw_params_ie {
        u8 mesh_ttl;
        u8 mesh_flags;
        __le16 mesh_reason;
        __le16 mesh_pre_value;
    }

.. _`ieee80211_mesh_chansw_params_ie.members`:

Members
-------

mesh_ttl
    *undescribed*

mesh_flags
    *undescribed*

mesh_reason
    *undescribed*

mesh_pre_value
    *undescribed*

.. _`ieee80211_mesh_chansw_params_ie.description`:

Description
-----------

This structure represents the "Mesh Channel Switch Paramters element"

.. _`ieee80211_wide_bw_chansw_ie`:

struct ieee80211_wide_bw_chansw_ie
==================================

.. c:type:: struct ieee80211_wide_bw_chansw_ie

    wide bandwidth channel switch IE

.. _`ieee80211_wide_bw_chansw_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_wide_bw_chansw_ie {
        u8 new_channel_width;
        u8 new_center_freq_seg0;
        u8 new_center_freq_seg1;
    }

.. _`ieee80211_wide_bw_chansw_ie.members`:

Members
-------

new_channel_width
    *undescribed*

new_center_freq_seg0
    *undescribed*

new_center_freq_seg1
    *undescribed*

.. _`ieee80211_tim_ie`:

struct ieee80211_tim_ie
=======================

.. c:type:: struct ieee80211_tim_ie


.. _`ieee80211_tim_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_tim_ie {
        u8 dtim_count;
        u8 dtim_period;
        u8 bitmap_ctrl;
        u8 virtual_map[1];
    }

.. _`ieee80211_tim_ie.members`:

Members
-------

dtim_count
    *undescribed*

dtim_period
    *undescribed*

bitmap_ctrl
    *undescribed*

.. _`ieee80211_tim_ie.description`:

Description
-----------

This structure refers to "Traffic Indication Map information element"

.. _`ieee80211_meshconf_ie`:

struct ieee80211_meshconf_ie
============================

.. c:type:: struct ieee80211_meshconf_ie


.. _`ieee80211_meshconf_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_meshconf_ie {
        u8 meshconf_psel;
        u8 meshconf_pmetric;
        u8 meshconf_congest;
        u8 meshconf_synch;
        u8 meshconf_auth;
        u8 meshconf_form;
        u8 meshconf_cap;
    }

.. _`ieee80211_meshconf_ie.members`:

Members
-------

meshconf_psel
    *undescribed*

meshconf_pmetric
    *undescribed*

meshconf_congest
    *undescribed*

meshconf_synch
    *undescribed*

meshconf_auth
    *undescribed*

meshconf_form
    *undescribed*

meshconf_cap
    *undescribed*

.. _`ieee80211_meshconf_ie.description`:

Description
-----------

This structure refers to "Mesh Configuration information element"

.. _`mesh_config_capab_flags`:

enum mesh_config_capab_flags
============================

.. c:type:: enum mesh_config_capab_flags

    Mesh Configuration IE capability field flags

.. _`mesh_config_capab_flags.definition`:

Definition
----------

.. code-block:: c

    enum mesh_config_capab_flags {
        IEEE80211_MESHCONF_CAPAB_ACCEPT_PLINKS,
        IEEE80211_MESHCONF_CAPAB_FORWARDING,
        IEEE80211_MESHCONF_CAPAB_TBTT_ADJUSTING,
        IEEE80211_MESHCONF_CAPAB_POWER_SAVE_LEVEL
    };

.. _`mesh_config_capab_flags.constants`:

Constants
---------

IEEE80211_MESHCONF_CAPAB_ACCEPT_PLINKS
    STA is willing to establish
    additional mesh peerings with other mesh STAs

IEEE80211_MESHCONF_CAPAB_FORWARDING
    the STA forwards MSDUs

IEEE80211_MESHCONF_CAPAB_TBTT_ADJUSTING
    TBTT adjustment procedure
    is ongoing

IEEE80211_MESHCONF_CAPAB_POWER_SAVE_LEVEL
    STA is in deep sleep mode or has
    neighbors in deep sleep mode

.. _`wlan_eid_chan_switch_param_tx_restrict`:

WLAN_EID_CHAN_SWITCH_PARAM_TX_RESTRICT
======================================

.. c:function::  WLAN_EID_CHAN_SWITCH_PARAM_TX_RESTRICT()

.. _`ieee80211_rann_ie`:

struct ieee80211_rann_ie
========================

.. c:type:: struct ieee80211_rann_ie


.. _`ieee80211_rann_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_rann_ie {
        u8 rann_flags;
        u8 rann_hopcount;
        u8 rann_ttl;
        u8 rann_addr[ETH_ALEN];
        __le32 rann_seq;
        __le32 rann_interval;
        __le32 rann_metric;
    }

.. _`ieee80211_rann_ie.members`:

Members
-------

rann_flags
    *undescribed*

rann_hopcount
    *undescribed*

rann_ttl
    *undescribed*

rann_seq
    *undescribed*

rann_interval
    *undescribed*

rann_metric
    *undescribed*

.. _`ieee80211_rann_ie.description`:

Description
-----------

This structure refers to "Root Announcement information element"

.. _`ieee80211_vht_opmode_bits`:

enum ieee80211_vht_opmode_bits
==============================

.. c:type:: enum ieee80211_vht_opmode_bits

    VHT operating mode field bits

.. _`ieee80211_vht_opmode_bits.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_vht_opmode_bits {
        IEEE80211_OPMODE_NOTIF_CHANWIDTH_MASK,
        IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ,
        IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ,
        IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ,
        IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ,
        IEEE80211_OPMODE_NOTIF_RX_NSS_MASK,
        IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT,
        IEEE80211_OPMODE_NOTIF_RX_NSS_TYPE_BF
    };

.. _`ieee80211_vht_opmode_bits.constants`:

Constants
---------

IEEE80211_OPMODE_NOTIF_CHANWIDTH_MASK
    channel width mask

IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ
    20 MHz channel width

IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ
    40 MHz channel width

IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ
    80 MHz channel width

IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ
    160 MHz or 80+80 MHz channel width

IEEE80211_OPMODE_NOTIF_RX_NSS_MASK
    number of spatial streams mask
    (the NSS value is the value of this field + 1)

IEEE80211_OPMODE_NOTIF_RX_NSS_SHIFT
    number of spatial streams shift

IEEE80211_OPMODE_NOTIF_RX_NSS_TYPE_BF
    indicates streams in SU-MIMO PPDU
    using a beamforming steering matrix

.. _`ieee80211_tpc_report_ie`:

struct ieee80211_tpc_report_ie
==============================

.. c:type:: struct ieee80211_tpc_report_ie


.. _`ieee80211_tpc_report_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_tpc_report_ie {
        u8 tx_power;
        u8 link_margin;
    }

.. _`ieee80211_tpc_report_ie.members`:

Members
-------

tx_power
    *undescribed*

link_margin
    *undescribed*

.. _`ieee80211_tpc_report_ie.description`:

Description
-----------

This structure refers to "TPC Report element"

.. _`ieee80211_p2p_attr_id`:

enum ieee80211_p2p_attr_id
==========================

.. c:type:: enum ieee80211_p2p_attr_id

    identifies type of peer-to-peer attribute.

.. _`ieee80211_p2p_attr_id.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_p2p_attr_id {
        IEEE80211_P2P_ATTR_STATUS,
        IEEE80211_P2P_ATTR_MINOR_REASON,
        IEEE80211_P2P_ATTR_CAPABILITY,
        IEEE80211_P2P_ATTR_DEVICE_ID,
        IEEE80211_P2P_ATTR_GO_INTENT,
        IEEE80211_P2P_ATTR_GO_CONFIG_TIMEOUT,
        IEEE80211_P2P_ATTR_LISTEN_CHANNEL,
        IEEE80211_P2P_ATTR_GROUP_BSSID,
        IEEE80211_P2P_ATTR_EXT_LISTEN_TIMING,
        IEEE80211_P2P_ATTR_INTENDED_IFACE_ADDR,
        IEEE80211_P2P_ATTR_MANAGABILITY,
        IEEE80211_P2P_ATTR_CHANNEL_LIST,
        IEEE80211_P2P_ATTR_ABSENCE_NOTICE,
        IEEE80211_P2P_ATTR_DEVICE_INFO,
        IEEE80211_P2P_ATTR_GROUP_INFO,
        IEEE80211_P2P_ATTR_GROUP_ID,
        IEEE80211_P2P_ATTR_INTERFACE,
        IEEE80211_P2P_ATTR_OPER_CHANNEL,
        IEEE80211_P2P_ATTR_INVITE_FLAGS,
        IEEE80211_P2P_ATTR_VENDOR_SPECIFIC,
        IEEE80211_P2P_ATTR_MAX
    };

.. _`ieee80211_p2p_attr_id.constants`:

Constants
---------

IEEE80211_P2P_ATTR_STATUS
    *undescribed*

IEEE80211_P2P_ATTR_MINOR_REASON
    *undescribed*

IEEE80211_P2P_ATTR_CAPABILITY
    *undescribed*

IEEE80211_P2P_ATTR_DEVICE_ID
    *undescribed*

IEEE80211_P2P_ATTR_GO_INTENT
    *undescribed*

IEEE80211_P2P_ATTR_GO_CONFIG_TIMEOUT
    *undescribed*

IEEE80211_P2P_ATTR_LISTEN_CHANNEL
    *undescribed*

IEEE80211_P2P_ATTR_GROUP_BSSID
    *undescribed*

IEEE80211_P2P_ATTR_EXT_LISTEN_TIMING
    *undescribed*

IEEE80211_P2P_ATTR_INTENDED_IFACE_ADDR
    *undescribed*

IEEE80211_P2P_ATTR_MANAGABILITY
    *undescribed*

IEEE80211_P2P_ATTR_CHANNEL_LIST
    *undescribed*

IEEE80211_P2P_ATTR_ABSENCE_NOTICE
    *undescribed*

IEEE80211_P2P_ATTR_DEVICE_INFO
    *undescribed*

IEEE80211_P2P_ATTR_GROUP_INFO
    *undescribed*

IEEE80211_P2P_ATTR_GROUP_ID
    *undescribed*

IEEE80211_P2P_ATTR_INTERFACE
    *undescribed*

IEEE80211_P2P_ATTR_OPER_CHANNEL
    *undescribed*

IEEE80211_P2P_ATTR_INVITE_FLAGS
    *undescribed*

IEEE80211_P2P_ATTR_VENDOR_SPECIFIC
    *undescribed*

IEEE80211_P2P_ATTR_MAX
    *undescribed*

.. _`ieee80211_bar`:

struct ieee80211_bar
====================

.. c:type:: struct ieee80211_bar

    HT Block Ack Request

.. _`ieee80211_bar.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_bar {
        __le16 frame_control;
        __le16 duration;
        __u8 ra[ETH_ALEN];
        __u8 ta[ETH_ALEN];
        __le16 control;
        __le16 start_seq_num;
    }

.. _`ieee80211_bar.members`:

Members
-------

frame_control
    *undescribed*

duration
    *undescribed*

control
    *undescribed*

start_seq_num
    *undescribed*

.. _`ieee80211_bar.description`:

Description
-----------

This structure refers to "HT BlockAckReq" as
described in 802.11n draft section 7.2.1.7.1

.. _`ieee80211_mcs_info`:

struct ieee80211_mcs_info
=========================

.. c:type:: struct ieee80211_mcs_info

    MCS information

.. _`ieee80211_mcs_info.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_mcs_info {
        u8 rx_mask[IEEE80211_HT_MCS_MASK_LEN];
        __le16 rx_highest;
        u8 tx_params;
        u8 reserved[3];
    }

.. _`ieee80211_mcs_info.members`:

Members
-------

rx_mask
    RX mask

rx_highest
    highest supported RX rate. If set represents
    the highest supported RX data rate in units of 1 Mbps.
    If this field is 0 this value should not be used to
    consider the highest RX data rate supported.

tx_params
    TX parameters

.. _`ieee80211_ht_cap`:

struct ieee80211_ht_cap
=======================

.. c:type:: struct ieee80211_ht_cap

    HT capabilities

.. _`ieee80211_ht_cap.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_ht_cap {
        __le16 cap_info;
        u8 ampdu_params_info;
        struct ieee80211_mcs_info mcs;
        __le16 extended_ht_cap_info;
        __le32 tx_BF_cap_info;
        u8 antenna_selection_info;
    }

.. _`ieee80211_ht_cap.members`:

Members
-------

cap_info
    *undescribed*

ampdu_params_info
    *undescribed*

mcs
    *undescribed*

extended_ht_cap_info
    *undescribed*

tx_BF_cap_info
    *undescribed*

antenna_selection_info
    *undescribed*

.. _`ieee80211_ht_cap.description`:

Description
-----------

This structure is the "HT capabilities element" as
described in 802.11n D5.0 7.3.2.57

.. _`ieee80211_ht_operation`:

struct ieee80211_ht_operation
=============================

.. c:type:: struct ieee80211_ht_operation

    HT operation IE

.. _`ieee80211_ht_operation.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_ht_operation {
        u8 primary_chan;
        u8 ht_param;
        __le16 operation_mode;
        __le16 stbc_param;
        u8 basic_set[16];
    }

.. _`ieee80211_ht_operation.members`:

Members
-------

primary_chan
    *undescribed*

ht_param
    *undescribed*

operation_mode
    *undescribed*

stbc_param
    *undescribed*

.. _`ieee80211_ht_operation.description`:

Description
-----------

This structure is the "HT operation element" as
described in 802.11n-2009 7.3.2.57

.. _`ieee80211_vht_mcs_info`:

struct ieee80211_vht_mcs_info
=============================

.. c:type:: struct ieee80211_vht_mcs_info

    VHT MCS information

.. _`ieee80211_vht_mcs_info.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_vht_mcs_info {
        __le16 rx_mcs_map;
        __le16 rx_highest;
        __le16 tx_mcs_map;
        __le16 tx_highest;
    }

.. _`ieee80211_vht_mcs_info.members`:

Members
-------

rx_mcs_map
    RX MCS map 2 bits for each stream, total 8 streams

rx_highest
    Indicates highest long GI VHT PPDU data rate
    STA can receive. Rate expressed in units of 1 Mbps.
    If this field is 0 this value should not be used to
    consider the highest RX data rate supported.
    The top 3 bits of this field are reserved.

tx_mcs_map
    TX MCS map 2 bits for each stream, total 8 streams

tx_highest
    Indicates highest long GI VHT PPDU data rate
    STA can transmit. Rate expressed in units of 1 Mbps.
    If this field is 0 this value should not be used to
    consider the highest TX data rate supported.
    The top 3 bits of this field are reserved.

.. _`ieee80211_vht_mcs_support`:

enum ieee80211_vht_mcs_support
==============================

.. c:type:: enum ieee80211_vht_mcs_support

    VHT MCS support definitions

.. _`ieee80211_vht_mcs_support.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_vht_mcs_support {
        IEEE80211_VHT_MCS_SUPPORT_0_7,
        IEEE80211_VHT_MCS_SUPPORT_0_8,
        IEEE80211_VHT_MCS_SUPPORT_0_9,
        IEEE80211_VHT_MCS_NOT_SUPPORTED
    };

.. _`ieee80211_vht_mcs_support.constants`:

Constants
---------

IEEE80211_VHT_MCS_SUPPORT_0_7
    MCSes 0-7 are supported for the
    number of streams

IEEE80211_VHT_MCS_SUPPORT_0_8
    MCSes 0-8 are supported

IEEE80211_VHT_MCS_SUPPORT_0_9
    MCSes 0-9 are supported

IEEE80211_VHT_MCS_NOT_SUPPORTED
    This number of streams isn't supported

.. _`ieee80211_vht_mcs_support.description`:

Description
-----------

These definitions are used in each 2-bit subfield of the \ ``rx_mcs_map``\ 
and \ ``tx_mcs_map``\  fields of \ :c:type:`struct ieee80211_vht_mcs_info <ieee80211_vht_mcs_info>`\ , which are
both split into 8 subfields by number of streams. These values indicate
which MCSes are supported for the number of streams the value appears
for.

.. _`ieee80211_vht_cap`:

struct ieee80211_vht_cap
========================

.. c:type:: struct ieee80211_vht_cap

    VHT capabilities

.. _`ieee80211_vht_cap.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_vht_cap {
        __le32 vht_cap_info;
        struct ieee80211_vht_mcs_info supp_mcs;
    }

.. _`ieee80211_vht_cap.members`:

Members
-------

vht_cap_info
    VHT capability info

supp_mcs
    VHT MCS supported rates

.. _`ieee80211_vht_cap.description`:

Description
-----------

This structure is the "VHT capabilities element" as
described in 802.11ac D3.0 8.4.2.160

.. _`ieee80211_vht_chanwidth`:

enum ieee80211_vht_chanwidth
============================

.. c:type:: enum ieee80211_vht_chanwidth

    VHT channel width

.. _`ieee80211_vht_chanwidth.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_vht_chanwidth {
        IEEE80211_VHT_CHANWIDTH_USE_HT,
        IEEE80211_VHT_CHANWIDTH_80MHZ,
        IEEE80211_VHT_CHANWIDTH_160MHZ,
        IEEE80211_VHT_CHANWIDTH_80P80MHZ
    };

.. _`ieee80211_vht_chanwidth.constants`:

Constants
---------

IEEE80211_VHT_CHANWIDTH_USE_HT
    use the HT operation IE to
    determine the channel width (20 or 40 MHz)

IEEE80211_VHT_CHANWIDTH_80MHZ
    80 MHz bandwidth

IEEE80211_VHT_CHANWIDTH_160MHZ
    160 MHz bandwidth

IEEE80211_VHT_CHANWIDTH_80P80MHZ
    80+80 MHz bandwidth

.. _`ieee80211_vht_operation`:

struct ieee80211_vht_operation
==============================

.. c:type:: struct ieee80211_vht_operation

    VHT operation IE

.. _`ieee80211_vht_operation.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_vht_operation {
        u8 chan_width;
        u8 center_freq_seg1_idx;
        u8 center_freq_seg2_idx;
        __le16 basic_mcs_set;
    }

.. _`ieee80211_vht_operation.members`:

Members
-------

chan_width
    Operating channel width

center_freq_seg1_idx
    center freq segment 1 index

center_freq_seg2_idx
    center freq segment 2 index

basic_mcs_set
    VHT Basic MCS rate set

.. _`ieee80211_vht_operation.description`:

Description
-----------

This structure is the "VHT operation element" as
described in 802.11ac D3.0 8.4.2.161

.. _`ieee80211_root_mode_identifier`:

enum ieee80211_root_mode_identifier
===================================

.. c:type:: enum ieee80211_root_mode_identifier

    root mesh STA mode identifier

.. _`ieee80211_root_mode_identifier.definition`:

Definition
----------

.. code-block:: c

    enum ieee80211_root_mode_identifier {
        IEEE80211_ROOTMODE_NO_ROOT,
        IEEE80211_ROOTMODE_ROOT,
        IEEE80211_PROACTIVE_PREQ_NO_PREP,
        IEEE80211_PROACTIVE_PREQ_WITH_PREP,
        IEEE80211_PROACTIVE_RANN
    };

.. _`ieee80211_root_mode_identifier.constants`:

Constants
---------

IEEE80211_ROOTMODE_NO_ROOT
    the mesh STA is not a root mesh STA (default)

IEEE80211_ROOTMODE_ROOT
    the mesh STA is a root mesh STA if greater than
    this value

IEEE80211_PROACTIVE_PREQ_NO_PREP
    the mesh STA is a root mesh STA supports
    the proactive PREQ with proactive PREP subfield set to 0

IEEE80211_PROACTIVE_PREQ_WITH_PREP
    the mesh STA is a root mesh STA
    supports the proactive PREQ with proactive PREP subfield set to 1

IEEE80211_PROACTIVE_RANN
    the mesh STA is a root mesh STA supports
    the proactive RANN

.. _`ieee80211_root_mode_identifier.description`:

Description
-----------

These attribute are used by dot11MeshHWMPRootMode to set root mesh STA mode

.. _`ieee80211_timeout_interval_ie`:

struct ieee80211_timeout_interval_ie
====================================

.. c:type:: struct ieee80211_timeout_interval_ie

    Timeout Interval element

.. _`ieee80211_timeout_interval_ie.definition`:

Definition
----------

.. code-block:: c

    struct ieee80211_timeout_interval_ie {
        u8 type;
        __le32 value;
    }

.. _`ieee80211_timeout_interval_ie.members`:

Members
-------

type
    type, see \ :c:type:`enum ieee80211_timeout_interval_type <ieee80211_timeout_interval_type>`\ 

value
    timeout interval value

.. _`ieee80211_get_qos_ctl`:

ieee80211_get_qos_ctl
=====================

.. c:function:: u8 *ieee80211_get_qos_ctl(struct ieee80211_hdr *hdr)

    get pointer to qos control bytes

    :param struct ieee80211_hdr \*hdr:
        the frame

.. _`ieee80211_get_qos_ctl.description`:

Description
-----------

The qos ctrl bytes come after the frame_control, duration, seq_num
and 3 or 4 addresses of length ETH_ALEN.

.. _`ieee80211_get_qos_ctl.3-addr`:

3 addr
------

2 + 2 + 2 + 3\*6 = 24

.. _`ieee80211_get_qos_ctl.4-addr`:

4 addr
------

2 + 2 + 2 + 4\*6 = 30

.. _`ieee80211_get_sa`:

ieee80211_get_SA
================

.. c:function:: u8 *ieee80211_get_SA(struct ieee80211_hdr *hdr)

    get pointer to SA

    :param struct ieee80211_hdr \*hdr:
        the frame

.. _`ieee80211_get_sa.description`:

Description
-----------

Given an 802.11 frame, this function returns the offset
to the source address (SA). It does not verify that the
header is long enough to contain the address, and the
header must be long enough to contain the frame control
field.

.. _`ieee80211_get_da`:

ieee80211_get_DA
================

.. c:function:: u8 *ieee80211_get_DA(struct ieee80211_hdr *hdr)

    get pointer to DA

    :param struct ieee80211_hdr \*hdr:
        the frame

.. _`ieee80211_get_da.description`:

Description
-----------

Given an 802.11 frame, this function returns the offset
to the destination address (DA). It does not verify that
the header is long enough to contain the address, and the
header must be long enough to contain the frame control
field.

.. _`_ieee80211_is_robust_mgmt_frame`:

_ieee80211_is_robust_mgmt_frame
===============================

.. c:function:: bool _ieee80211_is_robust_mgmt_frame(struct ieee80211_hdr *hdr)

    check if frame is a robust management frame

    :param struct ieee80211_hdr \*hdr:
        the frame (buffer must include at least the first octet of payload)

.. _`ieee80211_is_robust_mgmt_frame`:

ieee80211_is_robust_mgmt_frame
==============================

.. c:function:: bool ieee80211_is_robust_mgmt_frame(struct sk_buff *skb)

    check if skb contains a robust mgmt frame

    :param struct sk_buff \*skb:
        the skb containing the frame, length will be checked

.. _`ieee80211_is_public_action`:

ieee80211_is_public_action
==========================

.. c:function:: bool ieee80211_is_public_action(struct ieee80211_hdr *hdr, size_t len)

    check if frame is a public action frame

    :param struct ieee80211_hdr \*hdr:
        the frame

    :param size_t len:
        length of the frame

.. _`_ieee80211_is_group_privacy_action`:

_ieee80211_is_group_privacy_action
==================================

.. c:function:: bool _ieee80211_is_group_privacy_action(struct ieee80211_hdr *hdr)

    check if frame is a group addressed privacy action frame

    :param struct ieee80211_hdr \*hdr:
        the frame

.. _`ieee80211_is_group_privacy_action`:

ieee80211_is_group_privacy_action
=================================

.. c:function:: bool ieee80211_is_group_privacy_action(struct sk_buff *skb)

    check if frame is a group addressed privacy action frame

    :param struct sk_buff \*skb:
        the skb containing the frame, length will be checked

.. _`ieee80211_tu_to_usec`:

ieee80211_tu_to_usec
====================

.. c:function:: unsigned long ieee80211_tu_to_usec(unsigned long tu)

    convert time units (TU) to microseconds

    :param unsigned long tu:
        the TUs

.. _`ieee80211_check_tim`:

ieee80211_check_tim
===================

.. c:function:: bool ieee80211_check_tim(const struct ieee80211_tim_ie *tim, u8 tim_len, u16 aid)

    check if AID bit is set in TIM

    :param const struct ieee80211_tim_ie \*tim:
        the TIM IE

    :param u8 tim_len:
        length of the TIM IE

    :param u16 aid:
        the AID to look for

.. _`ieee80211_get_tdls_action`:

ieee80211_get_tdls_action
=========================

.. c:function:: int ieee80211_get_tdls_action(struct sk_buff *skb, u32 hdr_size)

    get tdls packet action (or -1, if not tdls packet)

    :param struct sk_buff \*skb:
        the skb containing the frame, length will not be checked

    :param u32 hdr_size:
        the size of the ieee80211_hdr that starts at skb->data

.. _`ieee80211_get_tdls_action.description`:

Description
-----------

This function assumes the frame is a data frame, and that the network header
is in the correct place.

.. _`ieee80211_action_contains_tpc`:

ieee80211_action_contains_tpc
=============================

.. c:function:: bool ieee80211_action_contains_tpc(struct sk_buff *skb)

    checks if the frame contains TPC element

    :param struct sk_buff \*skb:
        the skb containing the frame, length will be checked

.. _`ieee80211_action_contains_tpc.description`:

Description
-----------

This function checks if it's either TPC report action frame or Link
Measurement report action frame as defined in IEEE Std. 802.11-2012 8.5.2.5
and 8.5.7.5 accordingly.

.. This file was automatic generated / don't edit.

