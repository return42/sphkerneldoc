.. -*- coding: utf-8; mode: rst -*-
.. src-file: include/linux/amba/pl022.h

.. _`ssp_interface`:

enum ssp_interface
==================

.. c:type:: enum ssp_interface

    interfaces allowed for this SSP Controller

.. _`ssp_interface.definition`:

Definition
----------

.. code-block:: c

    enum ssp_interface {
        SSP_INTERFACE_MOTOROLA_SPI,
        SSP_INTERFACE_TI_SYNC_SERIAL,
        SSP_INTERFACE_NATIONAL_MICROWIRE,
        SSP_INTERFACE_UNIDIRECTIONAL
    };

.. _`ssp_interface.constants`:

Constants
---------

SSP_INTERFACE_MOTOROLA_SPI
    Motorola Interface

SSP_INTERFACE_TI_SYNC_SERIAL
    Texas Instrument Synchronous Serial
    interface

SSP_INTERFACE_NATIONAL_MICROWIRE
    National Semiconductor Microwire
    interface

SSP_INTERFACE_UNIDIRECTIONAL
    Unidirectional interface (STn8810
    \ :c:type:`struct STn8815 <STn8815>`\  only)

.. _`ssp_hierarchy`:

enum ssp_hierarchy
==================

.. c:type:: enum ssp_hierarchy

    whether SSP is configured as Master or Slave

.. _`ssp_hierarchy.definition`:

Definition
----------

.. code-block:: c

    enum ssp_hierarchy {
        SSP_MASTER,
        SSP_SLAVE
    };

.. _`ssp_hierarchy.constants`:

Constants
---------

SSP_MASTER
    *undescribed*

SSP_SLAVE
    *undescribed*

.. _`ssp_rx_endian`:

enum ssp_rx_endian
==================

.. c:type:: enum ssp_rx_endian

    endianess of Rx FIFO Data this feature is only available in ST versionf of PL022

.. _`ssp_rx_endian.definition`:

Definition
----------

.. code-block:: c

    enum ssp_rx_endian {
        SSP_RX_MSB,
        SSP_RX_LSB
    };

.. _`ssp_rx_endian.constants`:

Constants
---------

SSP_RX_MSB
    *undescribed*

SSP_RX_LSB
    *undescribed*

.. _`ssp_tx_endian`:

enum ssp_tx_endian
==================

.. c:type:: enum ssp_tx_endian

    endianess of Tx FIFO Data

.. _`ssp_tx_endian.definition`:

Definition
----------

.. code-block:: c

    enum ssp_tx_endian {
        SSP_TX_MSB,
        SSP_TX_LSB
    };

.. _`ssp_tx_endian.constants`:

Constants
---------

SSP_TX_MSB
    *undescribed*

SSP_TX_LSB
    *undescribed*

.. _`ssp_data_size`:

enum ssp_data_size
==================

.. c:type:: enum ssp_data_size

    number of bits in one data element

.. _`ssp_data_size.definition`:

Definition
----------

.. code-block:: c

    enum ssp_data_size {
        SSP_DATA_BITS_4,
        SSP_DATA_BITS_5,
        SSP_DATA_BITS_6,
        SSP_DATA_BITS_7,
        SSP_DATA_BITS_8,
        SSP_DATA_BITS_9,
        SSP_DATA_BITS_10,
        SSP_DATA_BITS_11,
        SSP_DATA_BITS_12,
        SSP_DATA_BITS_13,
        SSP_DATA_BITS_14,
        SSP_DATA_BITS_15,
        SSP_DATA_BITS_16,
        SSP_DATA_BITS_17,
        SSP_DATA_BITS_18,
        SSP_DATA_BITS_19,
        SSP_DATA_BITS_20,
        SSP_DATA_BITS_21,
        SSP_DATA_BITS_22,
        SSP_DATA_BITS_23,
        SSP_DATA_BITS_24,
        SSP_DATA_BITS_25,
        SSP_DATA_BITS_26,
        SSP_DATA_BITS_27,
        SSP_DATA_BITS_28,
        SSP_DATA_BITS_29,
        SSP_DATA_BITS_30,
        SSP_DATA_BITS_31,
        SSP_DATA_BITS_32
    };

.. _`ssp_data_size.constants`:

Constants
---------

SSP_DATA_BITS_4
    *undescribed*

SSP_DATA_BITS_5
    *undescribed*

SSP_DATA_BITS_6
    *undescribed*

SSP_DATA_BITS_7
    *undescribed*

SSP_DATA_BITS_8
    *undescribed*

SSP_DATA_BITS_9
    *undescribed*

SSP_DATA_BITS_10
    *undescribed*

SSP_DATA_BITS_11
    *undescribed*

SSP_DATA_BITS_12
    *undescribed*

SSP_DATA_BITS_13
    *undescribed*

SSP_DATA_BITS_14
    *undescribed*

SSP_DATA_BITS_15
    *undescribed*

SSP_DATA_BITS_16
    *undescribed*

SSP_DATA_BITS_17
    *undescribed*

SSP_DATA_BITS_18
    *undescribed*

SSP_DATA_BITS_19
    *undescribed*

SSP_DATA_BITS_20
    *undescribed*

SSP_DATA_BITS_21
    *undescribed*

SSP_DATA_BITS_22
    *undescribed*

SSP_DATA_BITS_23
    *undescribed*

SSP_DATA_BITS_24
    *undescribed*

SSP_DATA_BITS_25
    *undescribed*

SSP_DATA_BITS_26
    *undescribed*

SSP_DATA_BITS_27
    *undescribed*

SSP_DATA_BITS_28
    *undescribed*

SSP_DATA_BITS_29
    *undescribed*

SSP_DATA_BITS_30
    *undescribed*

SSP_DATA_BITS_31
    *undescribed*

SSP_DATA_BITS_32
    *undescribed*

.. _`ssp_mode`:

enum ssp_mode
=============

.. c:type:: enum ssp_mode

    SSP mode of operation (Communication modes)

.. _`ssp_mode.definition`:

Definition
----------

.. code-block:: c

    enum ssp_mode {
        INTERRUPT_TRANSFER,
        POLLING_TRANSFER,
        DMA_TRANSFER
    };

.. _`ssp_mode.constants`:

Constants
---------

INTERRUPT_TRANSFER
    *undescribed*

POLLING_TRANSFER
    *undescribed*

DMA_TRANSFER
    *undescribed*

.. _`ssp_rx_level_trig`:

enum ssp_rx_level_trig
======================

.. c:type:: enum ssp_rx_level_trig

    receive FIFO watermark level which triggers IT: Interrupt fires when \_N\_ or more elements in RX FIFO.

.. _`ssp_rx_level_trig.definition`:

Definition
----------

.. code-block:: c

    enum ssp_rx_level_trig {
        SSP_RX_1_OR_MORE_ELEM,
        SSP_RX_4_OR_MORE_ELEM,
        SSP_RX_8_OR_MORE_ELEM,
        SSP_RX_16_OR_MORE_ELEM,
        SSP_RX_32_OR_MORE_ELEM
    };

.. _`ssp_rx_level_trig.constants`:

Constants
---------

SSP_RX_1_OR_MORE_ELEM
    *undescribed*

SSP_RX_4_OR_MORE_ELEM
    *undescribed*

SSP_RX_8_OR_MORE_ELEM
    *undescribed*

SSP_RX_16_OR_MORE_ELEM
    *undescribed*

SSP_RX_32_OR_MORE_ELEM
    *undescribed*

.. _`ssp_spi_clk_phase`:

enum ssp_spi_clk_phase
======================

.. c:type:: enum ssp_spi_clk_phase

    clock phase (Motorola SPI interface only)

.. _`ssp_spi_clk_phase.definition`:

Definition
----------

.. code-block:: c

    enum ssp_spi_clk_phase {
        SSP_CLK_FIRST_EDGE,
        SSP_CLK_SECOND_EDGE
    };

.. _`ssp_spi_clk_phase.constants`:

Constants
---------

SSP_CLK_FIRST_EDGE
    Receive data on first edge transition (actual direction depends on polarity)

SSP_CLK_SECOND_EDGE
    Receive data on second edge transition (actual direction depends on polarity)

.. _`ssp_spi_clk_pol`:

enum ssp_spi_clk_pol
====================

.. c:type:: enum ssp_spi_clk_pol

    clock polarity (Motorola SPI interface only)

.. _`ssp_spi_clk_pol.definition`:

Definition
----------

.. code-block:: c

    enum ssp_spi_clk_pol {
        SSP_CLK_POL_IDLE_LOW,
        SSP_CLK_POL_IDLE_HIGH
    };

.. _`ssp_spi_clk_pol.constants`:

Constants
---------

SSP_CLK_POL_IDLE_LOW
    Low inactive level

SSP_CLK_POL_IDLE_HIGH
    High inactive level

.. _`ssp_microwire_wait_state`:

enum ssp_microwire_wait_state
=============================

.. c:type:: enum ssp_microwire_wait_state


.. _`ssp_microwire_wait_state.definition`:

Definition
----------

.. code-block:: c

    enum ssp_microwire_wait_state {
        SSP_MWIRE_WAIT_ZERO,
        SSP_MWIRE_WAIT_ONE
    };

.. _`ssp_microwire_wait_state.constants`:

Constants
---------

SSP_MWIRE_WAIT_ZERO
    No wait state inserted after last command bit

SSP_MWIRE_WAIT_ONE
    One wait state inserted after last command bit

.. _`ssp_duplex`:

enum ssp_duplex
===============

.. c:type:: enum ssp_duplex

    whether Full/Half Duplex on microwire, only available in the ST Micro variant.

.. _`ssp_duplex.definition`:

Definition
----------

.. code-block:: c

    enum ssp_duplex {
        SSP_MICROWIRE_CHANNEL_FULL_DUPLEX,
        SSP_MICROWIRE_CHANNEL_HALF_DUPLEX
    };

.. _`ssp_duplex.constants`:

Constants
---------

SSP_MICROWIRE_CHANNEL_FULL_DUPLEX
    SSPTXD becomes bi-directional,
    SSPRXD not used

SSP_MICROWIRE_CHANNEL_HALF_DUPLEX
    SSPTXD is an output, SSPRXD is
    an input.

.. _`ssp_clkdelay`:

enum ssp_clkdelay
=================

.. c:type:: enum ssp_clkdelay

    an optional clock delay on the feedback clock only available in the ST Micro PL023 variant.

.. _`ssp_clkdelay.definition`:

Definition
----------

.. code-block:: c

    enum ssp_clkdelay {
        SSP_FEEDBACK_CLK_DELAY_NONE,
        SSP_FEEDBACK_CLK_DELAY_1T,
        SSP_FEEDBACK_CLK_DELAY_2T,
        SSP_FEEDBACK_CLK_DELAY_3T,
        SSP_FEEDBACK_CLK_DELAY_4T,
        SSP_FEEDBACK_CLK_DELAY_5T,
        SSP_FEEDBACK_CLK_DELAY_6T,
        SSP_FEEDBACK_CLK_DELAY_7T
    };

.. _`ssp_clkdelay.constants`:

Constants
---------

SSP_FEEDBACK_CLK_DELAY_NONE
    no delay, the data coming in from the
    slave is sampled directly

SSP_FEEDBACK_CLK_DELAY_1T
    the incoming slave data is sampled with
    a delay of T-dt

SSP_FEEDBACK_CLK_DELAY_2T
    dito with a delay if 2T-dt

SSP_FEEDBACK_CLK_DELAY_3T
    dito with a delay if 3T-dt

SSP_FEEDBACK_CLK_DELAY_4T
    dito with a delay if 4T-dt

SSP_FEEDBACK_CLK_DELAY_5T
    dito with a delay if 5T-dt

SSP_FEEDBACK_CLK_DELAY_6T
    dito with a delay if 6T-dt

SSP_FEEDBACK_CLK_DELAY_7T
    dito with a delay if 7T-dt

.. _`pl022_ssp_controller`:

struct pl022_ssp_controller
===========================

.. c:type:: struct pl022_ssp_controller

    device.platform_data for SPI controller devices.

.. _`pl022_ssp_controller.definition`:

Definition
----------

.. code-block:: c

    struct pl022_ssp_controller {
        u16 bus_id;
        u8 num_chipselect;
        u8 enable_dma:1;
        bool (*dma_filter)(struct dma_chan *chan, void *filter_param);
        void *dma_rx_param;
        void *dma_tx_param;
        int autosuspend_delay;
        bool rt;
        int *chipselects;
    }

.. _`pl022_ssp_controller.members`:

Members
-------

bus_id
    identifier for this bus

num_chipselect
    chipselects are used to distinguish individual
    SPI slaves, and are numbered from zero to num_chipselects - 1.
    each slave has a chipselect signal, but it's common that not
    every chipselect is connected to a slave.

enable_dma
    if true enables DMA driven transfers.

dma_filter
    *undescribed*

dma_rx_param
    parameter to locate an RX DMA channel.

dma_tx_param
    parameter to locate a TX DMA channel.

autosuspend_delay
    delay in ms following transfer completion before the
    runtime power management system suspends the device. A setting of 0
    indicates no delay and the device will be suspended immediately.

rt
    indicates the controller should run the message pump with realtime
    priority to minimise the transfer latency on the bus.

chipselects
    list of <num_chipselects> chip select gpios

.. _`pl022_config_chip`:

struct pl022_config_chip
========================

.. c:type:: struct pl022_config_chip

    spi_board_info.controller_data for SPI slave devices, copied to spi_device.controller_data.

.. _`pl022_config_chip.definition`:

Definition
----------

.. code-block:: c

    struct pl022_config_chip {
        enum ssp_interface iface;
        enum ssp_hierarchy hierarchy;
        bool slave_tx_disable;
        struct ssp_clock_params clk_freq;
        enum ssp_mode com_mode;
        enum ssp_rx_level_trig rx_lev_trig;
        enum ssp_tx_level_trig tx_lev_trig;
        enum ssp_microwire_ctrl_len ctrl_len;
        enum ssp_microwire_wait_state wait_state;
        enum ssp_duplex duplex;
        enum ssp_clkdelay clkdelay;
        void (*cs_control) (u32 control);
    }

.. _`pl022_config_chip.members`:

Members
-------

iface
    Interface type(Motorola, TI, Microwire, Universal)

hierarchy
    sets whether interface is master or slave

slave_tx_disable
    SSPTXD is disconnected (in slave mode only)

clk_freq
    Tune freq parameters of SSP(when in master mode)

com_mode
    communication mode: polling, Interrupt or DMA

rx_lev_trig
    Rx FIFO watermark level (for IT & DMA mode)

tx_lev_trig
    Tx FIFO watermark level (for IT & DMA mode)

ctrl_len
    Microwire interface: Control length

wait_state
    Microwire interface: Wait state

duplex
    Microwire interface: Full/Half duplex

clkdelay
    on the PL023 variant, the delay in feeback clock cycles
    before sampling the incoming line

cs_control
    function pointer to board-specific function to
    assert/deassert I/O port to control HW generation of devices chip-select.

.. This file was automatic generated / don't edit.

