.. -*- coding: utf-8; mode: rst -*-
.. src-file: security/tomoyo/file.c

.. _`tomoyo_put_name_union`:

tomoyo_put_name_union
=====================

.. c:function:: void tomoyo_put_name_union(struct tomoyo_name_union *ptr)

    Drop reference on "struct tomoyo_name_union".

    :param ptr:
        Pointer to "struct tomoyo_name_union".
    :type ptr: struct tomoyo_name_union \*

.. _`tomoyo_put_name_union.description`:

Description
-----------

Returns nothing.

.. _`tomoyo_compare_name_union`:

tomoyo_compare_name_union
=========================

.. c:function:: const struct tomoyo_path_info *tomoyo_compare_name_union(const struct tomoyo_path_info *name, const struct tomoyo_name_union *ptr)

    Check whether a name matches "struct tomoyo_name_union" or not.

    :param name:
        Pointer to "struct tomoyo_path_info".
    :type name: const struct tomoyo_path_info \*

    :param ptr:
        Pointer to "struct tomoyo_name_union".
    :type ptr: const struct tomoyo_name_union \*

.. _`tomoyo_compare_name_union.description`:

Description
-----------

Returns "struct tomoyo_path_info" if \ ``name``\  matches \ ``ptr``\ , NULL otherwise.

.. _`tomoyo_put_number_union`:

tomoyo_put_number_union
=======================

.. c:function:: void tomoyo_put_number_union(struct tomoyo_number_union *ptr)

    Drop reference on "struct tomoyo_number_union".

    :param ptr:
        Pointer to "struct tomoyo_number_union".
    :type ptr: struct tomoyo_number_union \*

.. _`tomoyo_put_number_union.description`:

Description
-----------

Returns nothing.

.. _`tomoyo_compare_number_union`:

tomoyo_compare_number_union
===========================

.. c:function:: bool tomoyo_compare_number_union(const unsigned long value, const struct tomoyo_number_union *ptr)

    Check whether a value matches "struct tomoyo_number_union" or not.

    :param value:
        Number to check.
    :type value: const unsigned long

    :param ptr:
        Pointer to "struct tomoyo_number_union".
    :type ptr: const struct tomoyo_number_union \*

.. _`tomoyo_compare_number_union.description`:

Description
-----------

Returns true if \ ``value``\  matches \ ``ptr``\ , false otherwise.

.. _`tomoyo_add_slash`:

tomoyo_add_slash
================

.. c:function:: void tomoyo_add_slash(struct tomoyo_path_info *buf)

    Add trailing '/' if needed.

    :param buf:
        Pointer to "struct tomoyo_path_info".
    :type buf: struct tomoyo_path_info \*

.. _`tomoyo_add_slash.description`:

Description
-----------

Returns nothing.

\ ``buf``\  must be generated by \ :c:func:`tomoyo_encode`\  because this function does not
allocate memory for adding '/'.

.. _`tomoyo_get_realpath`:

tomoyo_get_realpath
===================

.. c:function:: bool tomoyo_get_realpath(struct tomoyo_path_info *buf, const struct path *path)

    Get realpath.

    :param buf:
        Pointer to "struct tomoyo_path_info".
    :type buf: struct tomoyo_path_info \*

    :param path:
        Pointer to "struct path".
    :type path: const struct path \*

.. _`tomoyo_get_realpath.description`:

Description
-----------

Returns true on success, false otherwise.

.. _`tomoyo_audit_path_log`:

tomoyo_audit_path_log
=====================

.. c:function:: int tomoyo_audit_path_log(struct tomoyo_request_info *r)

    Audit path request log.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

.. _`tomoyo_audit_path_log.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_audit_path2_log`:

tomoyo_audit_path2_log
======================

.. c:function:: int tomoyo_audit_path2_log(struct tomoyo_request_info *r)

    Audit path/path request log.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

.. _`tomoyo_audit_path2_log.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_audit_mkdev_log`:

tomoyo_audit_mkdev_log
======================

.. c:function:: int tomoyo_audit_mkdev_log(struct tomoyo_request_info *r)

    Audit path/number/number/number request log.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

.. _`tomoyo_audit_mkdev_log.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_audit_path_number_log`:

tomoyo_audit_path_number_log
============================

.. c:function:: int tomoyo_audit_path_number_log(struct tomoyo_request_info *r)

    Audit path/number request log.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

.. _`tomoyo_audit_path_number_log.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_check_path_acl`:

tomoyo_check_path_acl
=====================

.. c:function:: bool tomoyo_check_path_acl(struct tomoyo_request_info *r, const struct tomoyo_acl_info *ptr)

    Check permission for path operation.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

    :param ptr:
        Pointer to "struct tomoyo_acl_info".
    :type ptr: const struct tomoyo_acl_info \*

.. _`tomoyo_check_path_acl.description`:

Description
-----------

Returns true if granted, false otherwise.

To be able to use wildcard for domain transition, this function sets
matching entry on success. Since the caller holds \ :c:func:`tomoyo_read_lock`\ ,
it is safe to set matching entry.

.. _`tomoyo_check_path_number_acl`:

tomoyo_check_path_number_acl
============================

.. c:function:: bool tomoyo_check_path_number_acl(struct tomoyo_request_info *r, const struct tomoyo_acl_info *ptr)

    Check permission for path number operation.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

    :param ptr:
        Pointer to "struct tomoyo_acl_info".
    :type ptr: const struct tomoyo_acl_info \*

.. _`tomoyo_check_path_number_acl.description`:

Description
-----------

Returns true if granted, false otherwise.

.. _`tomoyo_check_path2_acl`:

tomoyo_check_path2_acl
======================

.. c:function:: bool tomoyo_check_path2_acl(struct tomoyo_request_info *r, const struct tomoyo_acl_info *ptr)

    Check permission for path path operation.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

    :param ptr:
        Pointer to "struct tomoyo_acl_info".
    :type ptr: const struct tomoyo_acl_info \*

.. _`tomoyo_check_path2_acl.description`:

Description
-----------

Returns true if granted, false otherwise.

.. _`tomoyo_check_mkdev_acl`:

tomoyo_check_mkdev_acl
======================

.. c:function:: bool tomoyo_check_mkdev_acl(struct tomoyo_request_info *r, const struct tomoyo_acl_info *ptr)

    Check permission for path number number number operation.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

    :param ptr:
        Pointer to "struct tomoyo_acl_info".
    :type ptr: const struct tomoyo_acl_info \*

.. _`tomoyo_check_mkdev_acl.description`:

Description
-----------

Returns true if granted, false otherwise.

.. _`tomoyo_same_path_acl`:

tomoyo_same_path_acl
====================

.. c:function:: bool tomoyo_same_path_acl(const struct tomoyo_acl_info *a, const struct tomoyo_acl_info *b)

    Check for duplicated "struct tomoyo_path_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: const struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: const struct tomoyo_acl_info \*

.. _`tomoyo_same_path_acl.description`:

Description
-----------

Returns true if \ ``a``\  == \ ``b``\  except permission bits, false otherwise.

.. _`tomoyo_merge_path_acl`:

tomoyo_merge_path_acl
=====================

.. c:function:: bool tomoyo_merge_path_acl(struct tomoyo_acl_info *a, struct tomoyo_acl_info *b, const bool is_delete)

    Merge duplicated "struct tomoyo_path_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: struct tomoyo_acl_info \*

    :param is_delete:
        True for \ ``a``\  &= ~@b, false for \ ``a``\  \|= \ ``b``\ .
    :type is_delete: const bool

.. _`tomoyo_merge_path_acl.description`:

Description
-----------

Returns true if \ ``a``\  is empty, false otherwise.

.. _`tomoyo_update_path_acl`:

tomoyo_update_path_acl
======================

.. c:function:: int tomoyo_update_path_acl(const u16 perm, struct tomoyo_acl_param *param)

    Update "struct tomoyo_path_acl" list.

    :param perm:
        Permission.
    :type perm: const u16

    :param param:
        Pointer to "struct tomoyo_acl_param".
    :type param: struct tomoyo_acl_param \*

.. _`tomoyo_update_path_acl.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. _`tomoyo_same_mkdev_acl`:

tomoyo_same_mkdev_acl
=====================

.. c:function:: bool tomoyo_same_mkdev_acl(const struct tomoyo_acl_info *a, const struct tomoyo_acl_info *b)

    Check for duplicated "struct tomoyo_mkdev_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: const struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: const struct tomoyo_acl_info \*

.. _`tomoyo_same_mkdev_acl.description`:

Description
-----------

Returns true if \ ``a``\  == \ ``b``\  except permission bits, false otherwise.

.. _`tomoyo_merge_mkdev_acl`:

tomoyo_merge_mkdev_acl
======================

.. c:function:: bool tomoyo_merge_mkdev_acl(struct tomoyo_acl_info *a, struct tomoyo_acl_info *b, const bool is_delete)

    Merge duplicated "struct tomoyo_mkdev_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: struct tomoyo_acl_info \*

    :param is_delete:
        True for \ ``a``\  &= ~@b, false for \ ``a``\  \|= \ ``b``\ .
    :type is_delete: const bool

.. _`tomoyo_merge_mkdev_acl.description`:

Description
-----------

Returns true if \ ``a``\  is empty, false otherwise.

.. _`tomoyo_update_mkdev_acl`:

tomoyo_update_mkdev_acl
=======================

.. c:function:: int tomoyo_update_mkdev_acl(const u8 perm, struct tomoyo_acl_param *param)

    Update "struct tomoyo_mkdev_acl" list.

    :param perm:
        Permission.
    :type perm: const u8

    :param param:
        Pointer to "struct tomoyo_acl_param".
    :type param: struct tomoyo_acl_param \*

.. _`tomoyo_update_mkdev_acl.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. _`tomoyo_same_path2_acl`:

tomoyo_same_path2_acl
=====================

.. c:function:: bool tomoyo_same_path2_acl(const struct tomoyo_acl_info *a, const struct tomoyo_acl_info *b)

    Check for duplicated "struct tomoyo_path2_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: const struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: const struct tomoyo_acl_info \*

.. _`tomoyo_same_path2_acl.description`:

Description
-----------

Returns true if \ ``a``\  == \ ``b``\  except permission bits, false otherwise.

.. _`tomoyo_merge_path2_acl`:

tomoyo_merge_path2_acl
======================

.. c:function:: bool tomoyo_merge_path2_acl(struct tomoyo_acl_info *a, struct tomoyo_acl_info *b, const bool is_delete)

    Merge duplicated "struct tomoyo_path2_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: struct tomoyo_acl_info \*

    :param is_delete:
        True for \ ``a``\  &= ~@b, false for \ ``a``\  \|= \ ``b``\ .
    :type is_delete: const bool

.. _`tomoyo_merge_path2_acl.description`:

Description
-----------

Returns true if \ ``a``\  is empty, false otherwise.

.. _`tomoyo_update_path2_acl`:

tomoyo_update_path2_acl
=======================

.. c:function:: int tomoyo_update_path2_acl(const u8 perm, struct tomoyo_acl_param *param)

    Update "struct tomoyo_path2_acl" list.

    :param perm:
        Permission.
    :type perm: const u8

    :param param:
        Pointer to "struct tomoyo_acl_param".
    :type param: struct tomoyo_acl_param \*

.. _`tomoyo_update_path2_acl.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. _`tomoyo_path_permission`:

tomoyo_path_permission
======================

.. c:function:: int tomoyo_path_permission(struct tomoyo_request_info *r, u8 operation, const struct tomoyo_path_info *filename)

    Check permission for single path operation.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

    :param operation:
        Type of operation.
    :type operation: u8

    :param filename:
        Filename to check.
    :type filename: const struct tomoyo_path_info \*

.. _`tomoyo_path_permission.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. _`tomoyo_execute_permission`:

tomoyo_execute_permission
=========================

.. c:function:: int tomoyo_execute_permission(struct tomoyo_request_info *r, const struct tomoyo_path_info *filename)

    Check permission for execute operation.

    :param r:
        Pointer to "struct tomoyo_request_info".
    :type r: struct tomoyo_request_info \*

    :param filename:
        Filename to check.
    :type filename: const struct tomoyo_path_info \*

.. _`tomoyo_execute_permission.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. _`tomoyo_same_path_number_acl`:

tomoyo_same_path_number_acl
===========================

.. c:function:: bool tomoyo_same_path_number_acl(const struct tomoyo_acl_info *a, const struct tomoyo_acl_info *b)

    Check for duplicated "struct tomoyo_path_number_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: const struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: const struct tomoyo_acl_info \*

.. _`tomoyo_same_path_number_acl.description`:

Description
-----------

Returns true if \ ``a``\  == \ ``b``\  except permission bits, false otherwise.

.. _`tomoyo_merge_path_number_acl`:

tomoyo_merge_path_number_acl
============================

.. c:function:: bool tomoyo_merge_path_number_acl(struct tomoyo_acl_info *a, struct tomoyo_acl_info *b, const bool is_delete)

    Merge duplicated "struct tomoyo_path_number_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: struct tomoyo_acl_info \*

    :param is_delete:
        True for \ ``a``\  &= ~@b, false for \ ``a``\  \|= \ ``b``\ .
    :type is_delete: const bool

.. _`tomoyo_merge_path_number_acl.description`:

Description
-----------

Returns true if \ ``a``\  is empty, false otherwise.

.. _`tomoyo_update_path_number_acl`:

tomoyo_update_path_number_acl
=============================

.. c:function:: int tomoyo_update_path_number_acl(const u8 perm, struct tomoyo_acl_param *param)

    Update ioctl/chmod/chown/chgrp ACL.

    :param perm:
        Permission.
    :type perm: const u8

    :param param:
        Pointer to "struct tomoyo_acl_param".
    :type param: struct tomoyo_acl_param \*

.. _`tomoyo_update_path_number_acl.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_path_number_perm`:

tomoyo_path_number_perm
=======================

.. c:function:: int tomoyo_path_number_perm(const u8 type, const struct path *path, unsigned long number)

    Check permission for "create", "mkdir", "mkfifo", "mksock", "ioctl", "chmod", "chown", "chgrp".

    :param type:
        Type of operation.
    :type type: const u8

    :param path:
        Pointer to "struct path".
    :type path: const struct path \*

    :param number:
        Number.
    :type number: unsigned long

.. _`tomoyo_path_number_perm.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_check_open_permission`:

tomoyo_check_open_permission
============================

.. c:function:: int tomoyo_check_open_permission(struct tomoyo_domain_info *domain, const struct path *path, const int flag)

    Check permission for "read" and "write".

    :param domain:
        Pointer to "struct tomoyo_domain_info".
    :type domain: struct tomoyo_domain_info \*

    :param path:
        Pointer to "struct path".
    :type path: const struct path \*

    :param flag:
        Flags for \ :c:func:`open`\ .
    :type flag: const int

.. _`tomoyo_check_open_permission.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_path_perm`:

tomoyo_path_perm
================

.. c:function:: int tomoyo_path_perm(const u8 operation, const struct path *path, const char *target)

    Check permission for "unlink", "rmdir", "truncate", "symlink", "append", "chroot" and "unmount".

    :param operation:
        Type of operation.
    :type operation: const u8

    :param path:
        Pointer to "struct path".
    :type path: const struct path \*

    :param target:
        Symlink's target if \ ``operation``\  is TOMOYO_TYPE_SYMLINK,
        NULL otherwise.
    :type target: const char \*

.. _`tomoyo_path_perm.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_mkdev_perm`:

tomoyo_mkdev_perm
=================

.. c:function:: int tomoyo_mkdev_perm(const u8 operation, const struct path *path, const unsigned int mode, unsigned int dev)

    Check permission for "mkblock" and "mkchar".

    :param operation:
        Type of operation. (TOMOYO_TYPE_MKCHAR or TOMOYO_TYPE_MKBLOCK)
    :type operation: const u8

    :param path:
        Pointer to "struct path".
    :type path: const struct path \*

    :param mode:
        Create mode.
    :type mode: const unsigned int

    :param dev:
        Device number.
    :type dev: unsigned int

.. _`tomoyo_mkdev_perm.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_path2_perm`:

tomoyo_path2_perm
=================

.. c:function:: int tomoyo_path2_perm(const u8 operation, const struct path *path1, const struct path *path2)

    Check permission for "rename", "link" and "pivot_root".

    :param operation:
        Type of operation.
    :type operation: const u8

    :param path1:
        Pointer to "struct path".
    :type path1: const struct path \*

    :param path2:
        Pointer to "struct path".
    :type path2: const struct path \*

.. _`tomoyo_path2_perm.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

.. _`tomoyo_same_mount_acl`:

tomoyo_same_mount_acl
=====================

.. c:function:: bool tomoyo_same_mount_acl(const struct tomoyo_acl_info *a, const struct tomoyo_acl_info *b)

    Check for duplicated "struct tomoyo_mount_acl" entry.

    :param a:
        Pointer to "struct tomoyo_acl_info".
    :type a: const struct tomoyo_acl_info \*

    :param b:
        Pointer to "struct tomoyo_acl_info".
    :type b: const struct tomoyo_acl_info \*

.. _`tomoyo_same_mount_acl.description`:

Description
-----------

Returns true if \ ``a``\  == \ ``b``\ , false otherwise.

.. _`tomoyo_update_mount_acl`:

tomoyo_update_mount_acl
=======================

.. c:function:: int tomoyo_update_mount_acl(struct tomoyo_acl_param *param)

    Write "struct tomoyo_mount_acl" list.

    :param param:
        Pointer to "struct tomoyo_acl_param".
    :type param: struct tomoyo_acl_param \*

.. _`tomoyo_update_mount_acl.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. _`tomoyo_write_file`:

tomoyo_write_file
=================

.. c:function:: int tomoyo_write_file(struct tomoyo_acl_param *param)

    Update file related list.

    :param param:
        Pointer to "struct tomoyo_acl_param".
    :type param: struct tomoyo_acl_param \*

.. _`tomoyo_write_file.description`:

Description
-----------

Returns 0 on success, negative value otherwise.

Caller holds \ :c:func:`tomoyo_read_lock`\ .

.. This file was automatic generated / don't edit.

