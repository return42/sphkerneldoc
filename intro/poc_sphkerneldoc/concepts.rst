.. -*- coding: utf-8; mode: rst -*-
.. include:: refs.txt

.. _concepts:

========================
Concepts of this project
========================

.. _concept-man-pages:

man pages
=========

The :ref:`LinuxDoc project <linuxdoc:linuxdoc>` serves a Sphinx man page builder
and the kernel-doc parser of this project has a ``:man-sect:`` option. See:

* :ref:`linuxdoc:man-pages`
* :ref:`kernel-doc :man-sect: option <linuxdoc:kernel-doc-man-pages>`

.. _concept-thematic-areas:

build along thematic areas
==========================

One *concept* of this POC is to build Kernel's documentation along thematic
areas, while the build process of kernel's sources is more in a monolith manner
(`ref <http://static.lwn.net/kerneldoc/>`__). E.g. the Kernel's documentation is
already split into thematic areas and those are bundled into one big intro
site. Here in this POC we do not bundle all books into one big HTML, the intro
site give only links to separated books. By this we can also build and ship man
pages or PDF books in that manner. Cross references in between books are done
with intersphinx_ extension :ref:`[ref] <concept-cross-references>`. If you like
to see, how this could work jump to:

* :ref:`linux-doc-intro-site`

To build run::

  make intro.html books.html books.man books.pdf

.. hint::

  Target ``books.pdf`` is in work, do not except to much.

.. _`concept-cross-references`:

cross references (intersphinx)
==============================

The `Linux kernel source <../linux_src_doc/index.html>`_ page could also be used
for cross references, a feature which is available from the extension
`sphinx.ext.intersphinx`_. Add just one line to your sphinx-project:

.. code-block:: python

   intersphinx_mapping = {}
   ...
   intersphinx_mapping['linux'] = (
       'https://h2626237.stratoserver.net/kernel/linux_src_doc/', None)

E.g. to refer to a function in the DVB-Frontend, write:

.. code-block:: rst

    lorem :ref:`dtv_get_frontend <linux:dtv_get_frontend>` ipsum

which will be rendered like this:

    lorem :ref:`dtv_get_frontend <linux:dtv_get_frontend>` ipsum

This technology could also be used to for cross references in between books like
mentioned :ref:`above <concept-thematic-areas>`. E.g.:

.. code-block:: rst

   Want to be a Linux kernel developer? / :ref:`read this book <process:process_index>`

which will be rendered like this:

   Want to be a Linux kernel developer? / :ref:`read this book <process:process_index>`

And here is the related *intersphinx entry* in our ``conf.py``.

.. code-block:: python

   intersphinx_mapping['process'] = (
       'https://h2626237.stratoserver.net/kernel/books/process', None)


.. _concept-autodoc-sources:

build doc from source tree
==========================

Another *concept* of this POC is to build source code documentation directly
from the whole kernel source tree.  This can be done easily with the
:ref:`kernel-autodoc <linuxdoc:kernel-autodoc>` tool from the :ref:`LinuxDoc
project <linuxdoc:linuxdoc>`. If you like to see, how this could work jump to:

* `Linux kernel source <../linux_src_doc/index.html>`__

Latter links the HTML build from the reST which was generated by the
:ref:`kernel-autodoc <linuxdoc:kernel-autodoc>` tool. Next links to the produced
reST, which is also versioned within this POC at github:

* `reST linux_src_doc`_ (https://github.com/return42/sphkerneldoc/tree/master/linux_src_doc)

.. hint::

   `reST linux_src_doc`_ is generated at irregular times from::

      git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git master

To re-build reST from Kernel's source code use ``src2rst`` and to build HTML use
``src.html``::

  make src2rst src.html

