.. -*- coding: utf-8; mode: rst -*-
.. src-file: arch/x86/include/asm/special_insns.h

.. _`pcommit_sfence`:

pcommit_sfence
==============

.. c:function:: void pcommit_sfence( void)

    persistent commit and fence

    :param  void:
        no arguments

.. _`pcommit_sfence.description`:

Description
-----------

The PCOMMIT instruction ensures that data that has been flushed from the
processor's cache hierarchy with CLWB, CLFLUSHOPT or CLFLUSH is accepted to
memory and is durable on the DIMM.  The primary use case for this is
persistent memory.

This function shows how to properly use CLWB/CLFLUSHOPT/CLFLUSH and PCOMMIT
with appropriate fencing.

.. _`pcommit_sfence.example`:

Example
-------

.. code-block:: c

    void flush_and_commit_buffer(void *vaddr, unsigned int size)
    {
            unsigned long clflush_mask = boot_cpu_data.x86_clflush_size - 1;
            void *vend = vaddr + size;
            void *p;

            for (p = (void *)((unsigned long)vaddr & ~clflush_mask);
                 p < vend; p += boot_cpu_data.x86_clflush_size)
                    clwb(p);

            // SFENCE to order CLWB/CLFLUSHOPT/CLFLUSH cache flushes
            // MFENCE via mb() also works
            wmb();

            // PCOMMIT and the required SFENCE for ordering
            pcommit_sfence();
    }

    After this function completes the data pointed to by 'vaddr' has been
    accepted to memory and will be durable if the 'vaddr' points to persistent
    memory.

    PCOMMIT must always be ordered by an MFENCE or SFENCE, so to help simplify
    things we include both the PCOMMIT and the required SFENCE in the
    alternatives generated by pcommit_sfence().


.. This file was automatic generated / don't edit.

