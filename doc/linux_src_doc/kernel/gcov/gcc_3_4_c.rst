.. -*- coding: utf-8; mode: rst -*-
.. src-file: kernel/gcov/gcc_3_4.c

.. _`gcov_fn_info`:

struct gcov_fn_info
===================

.. c:type:: struct gcov_fn_info

    profiling meta data per function

.. _`gcov_fn_info.definition`:

Definition
----------

.. code-block:: c

    struct gcov_fn_info {
        unsigned int ident;
        unsigned int checksum;
        unsigned int n_ctrs[0];
    }

.. _`gcov_fn_info.members`:

Members
-------

ident
    object file-unique function identifier

checksum
    function checksum

n_ctrs
    number of values per counter type belonging to this function

.. _`gcov_fn_info.description`:

Description
-----------

This data is generated by gcc during compilation and doesn't change
at run-time.

.. _`gcov_ctr_info`:

struct gcov_ctr_info
====================

.. c:type:: struct gcov_ctr_info

    profiling data per counter type

.. _`gcov_ctr_info.definition`:

Definition
----------

.. code-block:: c

    struct gcov_ctr_info {
        unsigned int num;
        gcov_type *values;
        void (* merge) (gcov_type *, unsigned int);
    }

.. _`gcov_ctr_info.members`:

Members
-------

num
    number of counter values for this type

values
    array of counter values for this type

merge
    merge function for counter values of this type (unused)

.. _`gcov_ctr_info.description`:

Description
-----------

This data is generated by gcc during compilation and doesn't change
at run-time with the exception of the values array.

.. _`gcov_info`:

struct gcov_info
================

.. c:type:: struct gcov_info

    profiling data per object file

.. _`gcov_info.definition`:

Definition
----------

.. code-block:: c

    struct gcov_info {
        unsigned int version;
        struct gcov_info *next;
        unsigned int stamp;
        const char *filename;
        unsigned int n_functions;
        const struct gcov_fn_info *functions;
        unsigned int ctr_mask;
        struct gcov_ctr_info counts[0];
    }

.. _`gcov_info.members`:

Members
-------

version
    gcov version magic indicating the gcc version used for compilation

next
    list head for a singly-linked list

stamp
    time stamp

filename
    name of the associated gcov data file

n_functions
    number of instrumented functions

functions
    function data

ctr_mask
    mask specifying which counter types are active

counts
    counter data per counter type

.. _`gcov_info.description`:

Description
-----------

This data is generated by gcc during compilation and doesn't change
at run-time with the exception of the next pointer.

.. _`gcov_info_filename`:

gcov_info_filename
==================

.. c:function:: const char *gcov_info_filename(struct gcov_info *info)

    return info filename

    :param struct gcov_info \*info:
        profiling data set

.. _`gcov_info_version`:

gcov_info_version
=================

.. c:function:: unsigned int gcov_info_version(struct gcov_info *info)

    return info version

    :param struct gcov_info \*info:
        profiling data set

.. _`gcov_info_next`:

gcov_info_next
==============

.. c:function:: struct gcov_info *gcov_info_next(struct gcov_info *info)

    return next profiling data set

    :param struct gcov_info \*info:
        profiling data set

.. _`gcov_info_next.description`:

Description
-----------

Returns next gcov_info following \ ``info``\  or first gcov_info in the chain if
\ ``info``\  is \ ``NULL``\ .

.. _`gcov_info_link`:

gcov_info_link
==============

.. c:function:: void gcov_info_link(struct gcov_info *info)

    link/add profiling data set to the list

    :param struct gcov_info \*info:
        profiling data set

.. _`gcov_info_unlink`:

gcov_info_unlink
================

.. c:function:: void gcov_info_unlink(struct gcov_info *prev, struct gcov_info *info)

    unlink/remove profiling data set from the list

    :param struct gcov_info \*prev:
        previous profiling data set

    :param struct gcov_info \*info:
        profiling data set

.. _`gcov_info_reset`:

gcov_info_reset
===============

.. c:function:: void gcov_info_reset(struct gcov_info *info)

    reset profiling data to zero

    :param struct gcov_info \*info:
        profiling data set

.. _`gcov_info_is_compatible`:

gcov_info_is_compatible
=======================

.. c:function:: int gcov_info_is_compatible(struct gcov_info *info1, struct gcov_info *info2)

    check if profiling data can be added

    :param struct gcov_info \*info1:
        first profiling data set

    :param struct gcov_info \*info2:
        second profiling data set

.. _`gcov_info_is_compatible.description`:

Description
-----------

Returns non-zero if profiling data can be added, zero otherwise.

.. _`gcov_info_add`:

gcov_info_add
=============

.. c:function:: void gcov_info_add(struct gcov_info *dest, struct gcov_info *source)

    add up profiling data

    :param struct gcov_info \*dest:
        profiling data set to which data is added

    :param struct gcov_info \*source:
        profiling data set which is added

.. _`gcov_info_add.description`:

Description
-----------

Adds profiling counts of \ ``source``\  to \ ``dest``\ .

.. _`gcov_info_dup`:

gcov_info_dup
=============

.. c:function:: struct gcov_info *gcov_info_dup(struct gcov_info *info)

    duplicate profiling data set

    :param struct gcov_info \*info:
        profiling data set to duplicate

.. _`gcov_info_dup.description`:

Description
-----------

Return newly allocated duplicate on success, \ ``NULL``\  on error.

.. _`gcov_info_free`:

gcov_info_free
==============

.. c:function:: void gcov_info_free(struct gcov_info *info)

    release memory for profiling data set duplicate

    :param struct gcov_info \*info:
        profiling data set duplicate to free

.. _`type_info`:

struct type_info
================

.. c:type:: struct type_info

    iterator helper array

.. _`type_info.definition`:

Definition
----------

.. code-block:: c

    struct type_info {
        int ctr_type;
        unsigned int offset;
    }

.. _`type_info.members`:

Members
-------

ctr_type
    counter type

offset
    index of the first value of the current function for this type

.. _`type_info.description`:

Description
-----------

This array is needed to convert the in-memory data format into the in-file

.. _`type_info.data-format`:

data format
-----------


In-memory:
for each counter type
for each function
values

In-file:
for each function
for each counter type
values

See gcc source gcc/gcov-io.h for more information on data organization.

.. _`gcov_iterator`:

struct gcov_iterator
====================

.. c:type:: struct gcov_iterator

    specifies current file position in logical records

.. _`gcov_iterator.definition`:

Definition
----------

.. code-block:: c

    struct gcov_iterator {
        struct gcov_info *info;
        int record;
        unsigned int function;
        unsigned int type;
        unsigned int count;
        int num_types;
        struct type_info type_info[0];
    }

.. _`gcov_iterator.members`:

Members
-------

info
    associated profiling data

record
    record type

function
    function number

type
    counter type

count
    index into values array

num_types
    number of counter types

type_info
    helper array to get values-array offset for current function

.. _`gcov_iter_new`:

gcov_iter_new
=============

.. c:function:: struct gcov_iterator *gcov_iter_new(struct gcov_info *info)

    allocate and initialize profiling data iterator

    :param struct gcov_info \*info:
        profiling data set to be iterated

.. _`gcov_iter_new.description`:

Description
-----------

Return file iterator on success, \ ``NULL``\  otherwise.

.. _`gcov_iter_free`:

gcov_iter_free
==============

.. c:function:: void gcov_iter_free(struct gcov_iterator *iter)

    release memory for iterator

    :param struct gcov_iterator \*iter:
        file iterator to free

.. _`gcov_iter_get_info`:

gcov_iter_get_info
==================

.. c:function:: struct gcov_info *gcov_iter_get_info(struct gcov_iterator *iter)

    return profiling data set for given file iterator

    :param struct gcov_iterator \*iter:
        file iterator

.. _`gcov_iter_start`:

gcov_iter_start
===============

.. c:function:: void gcov_iter_start(struct gcov_iterator *iter)

    reset file iterator to starting position

    :param struct gcov_iterator \*iter:
        file iterator

.. _`gcov_iter_next`:

gcov_iter_next
==============

.. c:function:: int gcov_iter_next(struct gcov_iterator *iter)

    advance file iterator to next logical record

    :param struct gcov_iterator \*iter:
        file iterator

.. _`gcov_iter_next.description`:

Description
-----------

Return zero if new position is valid, non-zero if iterator has reached end.

.. _`seq_write_gcov_u32`:

seq_write_gcov_u32
==================

.. c:function:: int seq_write_gcov_u32(struct seq_file *seq, u32 v)

    write 32 bit number in gcov format to seq_file

    :param struct seq_file \*seq:
        seq_file handle

    :param u32 v:
        value to be stored

.. _`seq_write_gcov_u32.number-format-defined-by-gcc`:

Number format defined by gcc
----------------------------

numbers are recorded in the 32 bit
unsigned binary form of the endianness of the machine generating the
file.

.. _`seq_write_gcov_u64`:

seq_write_gcov_u64
==================

.. c:function:: int seq_write_gcov_u64(struct seq_file *seq, u64 v)

    write 64 bit number in gcov format to seq_file

    :param struct seq_file \*seq:
        seq_file handle

    :param u64 v:
        value to be stored

.. _`seq_write_gcov_u64.number-format-defined-by-gcc`:

Number format defined by gcc
----------------------------

numbers are recorded in the 32 bit
unsigned binary form of the endianness of the machine generating the
file. 64 bit numbers are stored as two 32 bit numbers, the low part
first.

.. _`gcov_iter_write`:

gcov_iter_write
===============

.. c:function:: int gcov_iter_write(struct gcov_iterator *iter, struct seq_file *seq)

    write data for current pos to seq_file

    :param struct gcov_iterator \*iter:
        file iterator

    :param struct seq_file \*seq:
        seq_file handle

.. _`gcov_iter_write.description`:

Description
-----------

Return zero on success, non-zero otherwise.

.. This file was automatic generated / don't edit.

