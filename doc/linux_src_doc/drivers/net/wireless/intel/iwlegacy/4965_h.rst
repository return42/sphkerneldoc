.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/net/wireless/intel/iwlegacy/4965.h

.. _`il4965_tx_queue_set_status`:

il4965_tx_queue_set_status
==========================

.. c:function:: void il4965_tx_queue_set_status(struct il_priv *il, struct il_tx_queue *txq, int tx_fifo_id, int scd_retry)

    (optionally) start Tx/Cmd queue

    :param struct il_priv \*il:
        *undescribed*

    :param struct il_tx_queue \*txq:
        *undescribed*

    :param int tx_fifo_id:
        Tx DMA/FIFO channel (range 0-7) that the queue will feed

    :param int scd_retry:
        (1) Indicates queue will be used in aggregation mode

.. _`il4965_tx_queue_set_status.note`:

NOTE
----

Acquire il->lock before calling this function !

.. _`temperature_calib_kelvin_offset`:

TEMPERATURE_CALIB_KELVIN_OFFSET
===============================

.. c:function::  TEMPERATURE_CALIB_KELVIN_OFFSET()

.. _`temperature_calib_kelvin_offset.description`:

Description
-----------

The driver must calculate the device temperature before calculating
a txpower setting (amplifier gain is temperature dependent).  The
calculation uses 4 measurements, 3 of which (R1, R2, R3) are calibration
values used for the life of the driver, and one of which (R4) is the
real-time temperature indicator.

uCode provides all 4 values to the driver via the "initialize alive"
notification (see struct il4965_init_alive_resp).  After the runtime uCode
image loads, uCode updates the R4 value via stats notifications
(see N_STATS), which occur after each received beacon
when associated, or can be requested via C_STATS.

.. _`temperature_calib_kelvin_offset.note`:

NOTE
----

uCode provides the R4 value as a 23-bit signed value.  Driver
must sign-extend to 32 bits before applying formula below.

The basic formula is 259 \* (R4-R2) / (R3-R1).  The 97/100 is
an additional correction, which should be centered around 0 degrees
Celsius (273 degrees Kelvin).  The 8 (3 percent of 273) compensates for
centering the 97/100 correction around 0 degrees K.

Add 273 to Kelvin value to find degrees Celsius, for comparing current
temperature with factory-measured temperatures when calculating txpower
settings.

.. _`temperature_calib_kelvin_offset.formula`:

Formula
-------


degrees Kelvin = ((97 \* 259 \* (R4 - R2) / (R3 - R1)) / 100) + 8

.. _`il_tx_power_mimo_regulatory_compensation`:

IL_TX_POWER_MIMO_REGULATORY_COMPENSATION
========================================

.. c:function::  IL_TX_POWER_MIMO_REGULATORY_COMPENSATION()

.. _`il_tx_power_mimo_regulatory_compensation.description`:

Description
-----------

1) EEPROM
2) "initialize" alive notification
3) stats notifications

.. _`il_tx_power_mimo_regulatory_compensation.eeprom-data-consists-of`:

EEPROM data consists of
-----------------------


1)  Regulatory information (max txpower and channel usage flags) is provided
separately for each channel that can possibly supported by 4965.
40 MHz wide (.11n HT40) channels are listed separately from 20 MHz
(legacy) channels.

See struct il4965_eeprom_channel for format, and struct il4965_eeprom
for locations in EEPROM.

2)  Factory txpower calibration information is provided separately for
sub-bands of contiguous channels.  2.4GHz has just one sub-band,
but 5 GHz has several sub-bands.

In addition, per-band (2.4 and 5 Ghz) saturation txpowers are provided.

See struct il4965_eeprom_calib_info (and the tree of structures
contained within it) for format, and struct il4965_eeprom for
locations in EEPROM.

"Initialization alive" notification (see struct il4965_init_alive_resp)

.. _`il_tx_power_mimo_regulatory_compensation.consists-of`:

consists of
-----------


1)  Temperature calculation parameters.

2)  Power supply voltage measurement.

3)  Tx gain compensation to balance 2 transmitters for MIMO use.

.. _`il_tx_power_mimo_regulatory_compensation.statistics-notifications-deliver`:

Statistics notifications deliver
--------------------------------


1)  Current values for temperature param R4.

.. _`il_tx_power_cck_compensation_b_step`:

IL_TX_POWER_CCK_COMPENSATION_B_STEP
===================================

.. c:function::  IL_TX_POWER_CCK_COMPENSATION_B_STEP()

.. _`il_tx_power_cck_compensation_b_step.description`:

Description
-----------

When calculating txpowers for CCK, after making sure that the target power
is within regulatory and saturation limits, driver must additionally
back off gain by adding these values to the gain table idx.

Hardware rev for 4965 can be determined by reading CSR_HW_REV_WA_REG,
bits [3:2], 1 = B, 2 = C.

.. _`min_tx_gain_idx`:

MIN_TX_GAIN_IDX
===============

.. c:function::  MIN_TX_GAIN_IDX()

.. _`min_tx_gain_idx.description`:

Description
-----------

The following tables contain pair of values for setting txpower, i.e.
gain settings for the output of the device's digital signal processor (DSP),
and for the analog gain structure of the transmitter.

Each entry in the gain tables represents a step of 1/2 dB.  Note that these
are \*relative\* steps, not indications of absolute output power.  Output
power varies with temperature, voltage, and channel frequency, and also
requires consideration of average power (to satisfy regulatory constraints),
and peak power (to avoid distortion of the output signal).

.. _`min_tx_gain_idx.each-entry-contains-two-values`:

Each entry contains two values
------------------------------

1)  DSP gain (or sometimes called DSP attenuation).  This is a fine-grained
linear value that multiplies the output of the digital signal processor,
before being sent to the analog radio.
2)  Radio gain.  This sets the analog gain of the radio Tx path.
It is a coarser setting, and behaves in a logarithmic (dB) fashion.

EEPROM contains factory calibration data for txpower.  This maps actual
measured txpower levels to gain settings in the "well known" tables
below ("well-known" means here that both factory calibration \*and\* the
driver work with the same table).

There are separate tables for 2.4 GHz and 5 GHz bands.  The 5 GHz table
has an extension (into negative idxes), in case the driver needs to
boost power setting for high device temperatures (higher than would be
present during factory calibration).  A 5 Ghz EEPROM idx of "40"
corresponds to the 49th entry in the table used by the driver.

.. _`il_tx_power_default_regulatory_24`:

IL_TX_POWER_DEFAULT_REGULATORY_24
=================================

.. c:function::  IL_TX_POWER_DEFAULT_REGULATORY_24()

.. _`il_tx_power_default_regulatory_24.description`:

Description
-----------

Index    Dsp gain   Radio gain
0        110         0x3f      (highest gain)
1        104         0x3f
2         98         0x3f
3        110         0x3e
4        104         0x3e
5         98         0x3e
6        110         0x3d
7        104         0x3d
8         98         0x3d
9        110         0x3c
10        104         0x3c
11         98         0x3c
12        110         0x3b
13        104         0x3b
14         98         0x3b
15        110         0x3a
16        104         0x3a
17         98         0x3a
18        110         0x39
19        104         0x39
20         98         0x39
21        110         0x38
22        104         0x38
23         98         0x38
24        110         0x37
25        104         0x37
26         98         0x37
27        110         0x36
28        104         0x36
29         98         0x36
30        110         0x35
31        104         0x35
32         98         0x35
33        110         0x34
34        104         0x34
35         98         0x34
36        110         0x33
37        104         0x33
38         98         0x33
39        110         0x32
40        104         0x32
41         98         0x32
42        110         0x31
43        104         0x31
44         98         0x31
45        110         0x30
46        104         0x30
47         98         0x30
48        110          0x6
49        104          0x6
50         98          0x6
51        110          0x5
52        104          0x5
53         98          0x5
54        110          0x4
55        104          0x4
56         98          0x4
57        110          0x3
58        104          0x3
59         98          0x3
60        110          0x2
61        104          0x2
62         98          0x2
63        110          0x1
64        104          0x1
65         98          0x1
66        110          0x0
67        104          0x0
68         98          0x0
69         97            0
70         96            0
71         95            0
72         94            0
73         93            0
74         92            0
75         91            0
76         90            0
77         89            0
78         88            0
79         87            0
80         86            0
81         85            0
82         84            0
83         83            0
84         82            0
85         81            0
86         80            0
87         79            0
88         78            0
89         77            0
90         76            0
91         75            0
92         74            0
93         73            0
94         72            0
95         71            0
96         70            0
97         69            0
98         68            0

.. _`il_tx_power_default_saturation_24`:

IL_TX_POWER_DEFAULT_SATURATION_24
=================================

.. c:function::  IL_TX_POWER_DEFAULT_SATURATION_24()

    If EEPROM values fall outside MIN/MAX range, use default values.

.. _`il_tx_power_default_saturation_24.description`:

Description
-----------

Saturation is the highest level that the output power amplifier can produce
without significant clipping distortion.  This is a "peak" power level.
Different types of modulation (i.e. various "rates", and OFDM vs. CCK)
require differing amounts of backoff, relative to their average power output,
in order to avoid clipping distortion.

Driver must make sure that it is violating neither the saturation limit,
nor the regulatory limit, when calculating Tx power settings for various
rates.

Units are in half-dBm (i.e. "38" means 19 dBm).

.. _`calib_il_tx_atten_gr1_fch`:

CALIB_IL_TX_ATTEN_GR1_FCH
=========================

.. c:function::  CALIB_IL_TX_ATTEN_GR1_FCH()

    and thermal Txpower calibration.

.. _`calib_il_tx_atten_gr1_fch.description`:

Description
-----------

When calculating txpower, driver must compensate for current device
temperature; higher temperature requires higher gain.  Driver must calculate
current temperature (see "4965 temperature calculation"), then compare vs.
factory calibration temperature in EEPROM; if current temperature is higher
than factory temperature, driver must \*increase\* gain by proportions shown
in table below.  If current temperature is lower than factory, driver must
\*decrease\* gain.

Different frequency ranges require different compensation, as shown below.

.. _`il49_num_fifos`:

IL49_NUM_FIFOS
==============

.. c:function::  IL49_NUM_FIFOS()

.. _`il49_num_fifos.description`:

Description
-----------

Most communication between driver and 4965 is via queues of data buffers.
For example, all commands that the driver issues to device's embedded
controller (uCode) are via the command queue (one of the Tx queues).  All
uCode command responses/replies/notifications, including Rx frames, are
conveyed from uCode to driver via the Rx queue.

Most support for these queues, including handshake support, resides in
structures in host DRAM, shared between the driver and the device.  When
allocating this memory, the driver must make sure that data written by
the host CPU updates DRAM immediately (and does not get "stuck" in CPU's
cache memory), so DRAM and cache are consistent, and the device can
immediately see changes made by the driver.

4965 supports up to 16 DRAM-based Tx queues, and services these queues via
up to 7 DMA channels (FIFOs).  Each Tx queue is supported by a circular array
in DRAM containing 256 Transmit Frame Descriptors (TFDs).

.. _`il4965_scd_bc_tbl`:

struct il4965_scd_bc_tbl
========================

.. c:type:: struct il4965_scd_bc_tbl


.. _`il4965_scd_bc_tbl.definition`:

Definition
----------

.. code-block:: c

    struct il4965_scd_bc_tbl {
        __le16 tfd_offset[TFD_QUEUE_BC_SIZE];
        u8 pad[1024 - (TFD_QUEUE_BC_SIZE) * sizeof(__le16)];
    }

.. _`il4965_scd_bc_tbl.members`:

Members
-------

.. _`il4965_scd_bc_tbl.description`:

Description
-----------

Byte Count table

Each Tx queue uses a byte-count table containing 320 entries:
one 16-bit entry for each of 256 TFDs, plus an additional 64 entries that
duplicate the first 64 entries (to avoid wrap-around within a Tx win;
max Tx win is 64 TFDs).

When driver sets up a new TFD, it must also enter the total byte count
of the frame to be transmitted into the corresponding entry in the byte
count table for the chosen Tx queue.  If the TFD idx is 0-63, the driver
must duplicate the byte count entry in corresponding idx 256-319.

padding puts each byte count table on a 1024-byte boundary;
4965 assumes tables are separated by 1024 bytes.

.. _`fh49_mem_lower_bound`:

FH49_MEM_LOWER_BOUND
====================

.. c:function::  FH49_MEM_LOWER_BOUND()

    Addresses are offsets from device's PCI hardware base address.

.. _`fh49_kw_mem_addr_reg`:

FH49_KW_MEM_ADDR_REG
====================

.. c:function::  FH49_KW_MEM_ADDR_REG()

    Warm (KW) buffer base address.

.. _`fh49_kw_mem_addr_reg.description`:

Description
-----------

Driver must allocate a 4KByte buffer that is used by 4965 for keeping the
host DRAM powered on (via dummy accesses to DRAM) to maintain low-latency
DRAM access when 4965 is Txing or Rxing.  The dummy accesses prevent host
from going into a power-savings mode that would cause higher DRAM latency,
and possible data over/under-runs, before all Tx/Rx is complete.

Driver loads FH49_KW_MEM_ADDR_REG with the physical address (bits 35:4)
of the buffer, which must be 4K aligned.  Once this is set up, the 4965
automatically invokes keep-warm accesses when normal accesses might not
be sufficient to maintain fast DRAM response.

.. _`fh49_kw_mem_addr_reg.bit-fields`:

Bit fields
----------

31-0:  Keep-warm buffer physical base address [35:4], must be 4K aligned

.. _`fh49_mem_cbbc_lower_bound`:

FH49_MEM_CBBC_LOWER_BOUND
=========================

.. c:function::  FH49_MEM_CBBC_LOWER_BOUND()

.. _`fh49_mem_cbbc_lower_bound.description`:

Description
-----------

4965 has 16 base pointer registers, one for each of 16 host-DRAM-resident
circular buffers (CBs/queues) containing Transmit Frame Descriptors (TFDs)
(see struct il_tfd_frame).  These 16 pointer registers are offset by 0x04
bytes from one another.  Each TFD circular buffer in DRAM must be 256-byte
aligned (address bits 0-7 must be 0).

.. _`fh49_mem_cbbc_lower_bound.bit-fields-in-each-pointer-register`:

Bit fields in each pointer register
-----------------------------------

27-0: TFD CB physical base address [35:8], must be 256-byte aligned

.. _`fh49_mem_rscsr_lower_bound`:

FH49_MEM_RSCSR_LOWER_BOUND
==========================

.. c:function::  FH49_MEM_RSCSR_LOWER_BOUND()

.. _`fh49_mem_rscsr_lower_bound.description`:

Description
-----------

These registers provide handshake between driver and 4965 for the Rx queue
(this queue handles \*all\* command responses, notifications, Rx data, etc.
sent from 4965 uCode to host driver).  Unlike Tx, there is only one Rx
queue, and only one Rx DMA/FIFO channel.  Also unlike Tx, which can
concatenate up to 20 DRAM buffers to form a Tx frame, each Receive Buffer
Descriptor (RBD) points to only one Rx Buffer (RB); there is a 1:1
mapping between RBDs and RBs.

Driver must allocate host DRAM memory for the following, and set the

.. _`fh49_mem_rscsr_lower_bound.physical-address-of-each-into-4965-registers`:

physical address of each into 4965 registers
--------------------------------------------


1)  Receive Buffer Descriptor (RBD) circular buffer (CB), typically with 256
entries (although any power of 2, up to 4096, is selectable by driver).
Each entry (1 dword) points to a receive buffer (RB) of consistent size
(typically 4K, although 8K or 16K are also selectable by driver).
Driver sets up RB size and number of RBDs in the CB via Rx config
register FH49_MEM_RCSR_CHNL0_CONFIG_REG.

.. _`fh49_mem_rscsr_lower_bound.bit-fields-within-one-rbd`:

Bit fields within one RBD
-------------------------

27-0:  Receive Buffer physical address bits [35:8], 256-byte aligned

Driver sets physical address [35:8] of base of RBD circular buffer
into FH49_RSCSR_CHNL0_RBDCB_BASE_REG [27:0].

2)  Rx status buffer, 8 bytes, in which 4965 indicates which Rx Buffers
(RBs) have been filled, via a "write pointer", actually the idx of
the RB's corresponding RBD within the circular buffer.  Driver sets
physical address [35:4] into FH49_RSCSR_CHNL0_STTS_WPTR_REG [31:0].

Bit fields in lower dword of Rx status buffer (upper dword not used
by driver; see struct il4965_shared, val0):
31-12:  Not used by driver
11- 0:  Index of last filled Rx buffer descriptor
(4965 writes, driver reads this value)

As the driver prepares Receive Buffers (RBs) for 4965 to fill, driver must
enter pointers to these RBs into contiguous RBD circular buffer entries,
and update the 4965's "write" idx register,
FH49_RSCSR_CHNL0_RBDCB_WPTR_REG.

This "write" idx corresponds to the \*next\* RBD that the driver will make
available, i.e. one RBD past the tail of the ready-to-fill RBDs within
the circular buffer.  This value should initially be 0 (before preparing any
RBs), should be 8 after preparing the first 8 RBs (for example), and must
wrap back to 0 at the end of the circular buffer (but don't wrap before
"read" idx has advanced past 1!  See below).

.. _`fh49_mem_rscsr_lower_bound.note`:

NOTE
----

4965 EXPECTS THE WRITE IDX TO BE INCREMENTED IN MULTIPLES OF 8.

As the 4965 fills RBs (referenced from contiguous RBDs within the circular
buffer), it updates the Rx status buffer in host DRAM, 2) described above,
to tell the driver the idx of the latest filled RBD.  The driver must
read this "read" idx from DRAM after receiving an Rx interrupt from 4965.

The driver must also internally keep track of a third idx, which is the
next RBD to process.  When receiving an Rx interrupt, driver should process
all filled but unprocessed RBs up to, but not including, the RB
corresponding to the "read" idx.  For example, if "read" idx becomes "1",
driver may process the RB pointed to by RBD 0.  Depending on volume of
traffic, there may be many RBs to process.

If read idx == write idx, 4965 thinks there is no room to put new data.
Due to this, the maximum number of filled RBs is 255, instead of 256.  To
be safe, make sure that there is a gap of at least 2 RBDs between "write"
and "read" idxes; that is, make sure that there are no more than 254
buffers waiting to be filled.

.. _`fh49_rscsr_chnl0_stts_wptr_reg`:

FH49_RSCSR_CHNL0_STTS_WPTR_REG
==============================

.. c:function::  FH49_RSCSR_CHNL0_STTS_WPTR_REG()

    byte Rx Status buffer.

.. _`fh49_rscsr_chnl0_stts_wptr_reg.bit-fields`:

Bit fields
----------

31-0: Rx status buffer physical base address [35:4], must 16-byte aligned.

.. _`fh49_rscsr_chnl0_rbdcb_base_reg`:

FH49_RSCSR_CHNL0_RBDCB_BASE_REG
===============================

.. c:function::  FH49_RSCSR_CHNL0_RBDCB_BASE_REG()

.. _`fh49_rscsr_chnl0_rbdcb_base_reg.bit-fields`:

Bit fields
----------

27-0:  RBD CD physical base address [35:8], must be 256-byte aligned.

.. _`fh49_rscsr_chnl0_rbdcb_wptr_reg`:

FH49_RSCSR_CHNL0_RBDCB_WPTR_REG
===============================

.. c:function::  FH49_RSCSR_CHNL0_RBDCB_WPTR_REG()

.. _`fh49_rscsr_chnl0_rbdcb_wptr_reg.bit-fields`:

Bit fields
----------

11-0:  Index of driver's most recent prepared-to-be-filled RBD, + 1.
NOTE:  For 256-entry circular buffer, use only bits [7:0].

.. _`fh49_mem_rcsr_lower_bound`:

FH49_MEM_RCSR_LOWER_BOUND
=========================

.. c:function::  FH49_MEM_RCSR_LOWER_BOUND()

    Rx Config Reg for channel 0 (only channel used)

.. _`fh49_mem_rcsr_lower_bound.description`:

Description
-----------

Driver must initialize FH49_MEM_RCSR_CHNL0_CONFIG_REG as follows for
normal operation (see bit fields).

Clearing FH49_MEM_RCSR_CHNL0_CONFIG_REG to 0 turns off Rx DMA.
Driver should poll FH49_MEM_RSSR_RX_STATUS_REG       for
FH49_RSSR_CHNL0_RX_STATUS_CHNL_IDLE (bit 24) before continuing.

.. _`fh49_mem_rcsr_lower_bound.bit-fields`:

Bit fields
----------

31-30: Rx DMA channel enable: '00' off/pause, '01' pause at end of frame,
'10' operate normally
29-24: reserved
23-20: # RBDs in circular buffer = 2^value; use "8" for 256 RBDs (normal),
min "5" for 32 RBDs, max "12" for 4096 RBDs.
19-18: reserved
17-16: size of each receive buffer; '00' 4K (normal), '01' 8K,
'10' 12K, '11' 16K.
15-14: reserved
13-12: IRQ destination; '00' none, '01' host driver (normal operation)
11- 4: timeout for closing Rx buffer and interrupting host (units 32 usec)
typical value 0x10 (about 1/2 msec)
3- 0: reserved

.. _`fh49_mem_rssr_lower_bound`:

FH49_MEM_RSSR_LOWER_BOUND
=========================

.. c:function::  FH49_MEM_RSSR_LOWER_BOUND()

.. _`fh49_mem_rssr_lower_bound.description`:

Description
-----------

After stopping Rx DMA channel (writing 0 to
FH49_MEM_RCSR_CHNL0_CONFIG_REG), driver must poll
FH49_MEM_RSSR_RX_STATUS_REG until Rx channel is idle.

.. _`fh49_mem_rssr_lower_bound.bit-fields`:

Bit fields
----------

24:  1 = Channel 0 is idle

FH49_MEM_RSSR_SHARED_CTRL_REG and FH49_MEM_RSSR_RX_ENABLE_ERR_IRQ2DRV
contain default values that should not be altered by the driver.

.. _`fh49_tcsr_lower_bound`:

FH49_TCSR_LOWER_BOUND
=====================

.. c:function::  FH49_TCSR_LOWER_BOUND()

.. _`fh49_tcsr_lower_bound.description`:

Description
-----------

4965 has one configuration register for each of 8 Tx DMA/FIFO channels
supported in hardware (don't confuse these with the 16 Tx queues in DRAM,
which feed the DMA/FIFO channels); config regs are separated by 0x20 bytes.

To use a Tx DMA channel, driver must initialize its
FH49_TCSR_CHNL_TX_CONFIG_REG(chnl) with:

FH49_TCSR_TX_CONFIG_REG_VAL_DMA_CHNL_ENABLE \|
FH49_TCSR_TX_CONFIG_REG_VAL_DMA_CREDIT_ENABLE_VAL

All other bits should be 0.

.. _`fh49_tcsr_lower_bound.bit-fields`:

Bit fields
----------

31-30: Tx DMA channel enable: '00' off/pause, '01' pause at end of frame,
'10' operate normally
29- 4: Reserved, set to "0"
3: Enable internal DMA requests (1, normal operation), disable (0)
2- 0: Reserved, set to "0"

.. _`fh49_tssr_lower_bound`:

FH49_TSSR_LOWER_BOUND
=====================

.. c:function::  FH49_TSSR_LOWER_BOUND()

.. _`fh49_tssr_lower_bound.description`:

Description
-----------

After stopping Tx DMA channel (writing 0 to
FH49_TCSR_CHNL_TX_CONFIG_REG(chnl)), driver must poll
FH49_TSSR_TX_STATUS_REG until selected Tx channel is idle
(channel's buffers empty \| no pending requests).

.. _`fh49_tssr_lower_bound.bit-fields`:

Bit fields
----------

31-24:  1 = Channel buffers empty (channel 7:0)
23-16:  1 = No pending requests (channel 7:0)

.. _`fh49_tssr_tx_error_reg`:

FH49_TSSR_TX_ERROR_REG
======================

.. c:function::  FH49_TSSR_TX_ERROR_REG()

    31:  Indicates an address error when accessed to internal memory uCode/driver must write "1" in order to clear this flag 30:  Indicates that Host did not send the expected number of dwords to FH uCode/driver must write "1" in order to clear this flag 16-9:Each status bit is for one channel. Indicates that an (Error) ActDMA command was received from the scheduler while the TRB was already full with previous command uCode/driver must write "1" in order to clear this flag 7-0: Each status bit indicates a channel's TxCredit error. When an error bit is set, it indicates that the FH has received a full indication from the RTC TxFIFO and the current value of the TxCredit counter was not equal to zero. This mean that the credit mechanism was not synchronized to the TxFIFO status uCode/driver must write "1" in order to clear this flag

.. This file was automatic generated / don't edit.

