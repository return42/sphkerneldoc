.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/w1/masters/ds2482.c

.. _`ds2482_cmd_reset`:

DS2482_CMD_RESET
================

.. c:function::  DS2482_CMD_RESET()

    there are 3 registers that are addressed by a read pointer. The read pointer is set by the last command executed.

.. _`ds2482_cmd_reset.description`:

Description
-----------

To read the data, issue a register read for any address

.. _`ds2482_reg_cfg_1ws`:

DS2482_REG_CFG_1WS
==================

.. c:function::  DS2482_REG_CFG_1WS()

    The top 4 bits always read 0. To write, the top nibble must be the 1's compl. of the low nibble.

.. _`ds2482_reg_sts_dir`:

DS2482_REG_STS_DIR
==================

.. c:function::  DS2482_REG_STS_DIR()

.. _`ds2482_calculate_config`:

ds2482_calculate_config
=======================

.. c:function:: u8 ds2482_calculate_config(u8 conf)

    \ ``param``\  conf the raw config value \ ``return``\  the value w/ complements that can be written to register

    :param u8 conf:
        *undescribed*

.. _`ds2482_select_register`:

ds2482_select_register
======================

.. c:function:: int ds2482_select_register(struct ds2482_data *pdev, u8 read_ptr)

    \ ``param``\  pdev          The ds2482 client pointer \ ``param``\  read_ptr      see DS2482_PTR_CODE_xxx above \ ``return``\  -1 on failure, 0 on success

    :param struct ds2482_data \*pdev:
        *undescribed*

    :param u8 read_ptr:
        *undescribed*

.. _`ds2482_send_cmd`:

ds2482_send_cmd
===============

.. c:function:: int ds2482_send_cmd(struct ds2482_data *pdev, u8 cmd)

    \ ``param``\  pdev  The ds2482 client pointer \ ``param``\  cmd   DS2482_CMD_RESET, DS2482_CMD_1WIRE_RESET, DS2482_CMD_1WIRE_READ_BYTE \ ``return``\  -1 on failure, 0 on success

    :param struct ds2482_data \*pdev:
        *undescribed*

    :param u8 cmd:
        *undescribed*

.. _`ds2482_send_cmd_data`:

ds2482_send_cmd_data
====================

.. c:function:: int ds2482_send_cmd_data(struct ds2482_data *pdev, u8 cmd, u8 byte)

    \ ``param``\  pdev  The ds2482 client pointer \ ``param``\  cmd   DS2482_CMD_WRITE_CONFIG, DS2482_CMD_1WIRE_SINGLE_BIT, DS2482_CMD_1WIRE_WRITE_BYTE, DS2482_CMD_1WIRE_TRIPLET \ ``param``\  byte  The data to send \ ``return``\  -1 on failure, 0 on success

    :param struct ds2482_data \*pdev:
        *undescribed*

    :param u8 cmd:
        *undescribed*

    :param u8 byte:
        *undescribed*

.. _`ds2482_wait_1wire_idle`:

ds2482_wait_1wire_idle
======================

.. c:function:: int ds2482_wait_1wire_idle(struct ds2482_data *pdev)

    wire interface is idle (not busy)

    :param struct ds2482_data \*pdev:
        *undescribed*

.. _`ds2482_wait_1wire_idle.description`:

Description
-----------

\ ``param``\  pdev Pointer to the device structure
\ ``return``\  the last value read from status or -1 (failure)

.. _`ds2482_set_channel`:

ds2482_set_channel
==================

.. c:function:: int ds2482_set_channel(struct ds2482_data *pdev, u8 channel)

    The 1-wire interface must be idle before calling this function.

    :param struct ds2482_data \*pdev:
        *undescribed*

    :param u8 channel:
        *undescribed*

.. _`ds2482_set_channel.description`:

Description
-----------

\ ``param``\  pdev          The ds2482 client pointer
\ ``param``\  channel       0-7
\ ``return``\               -1 (failure) or 0 (success)

.. _`ds2482_w1_touch_bit`:

ds2482_w1_touch_bit
===================

.. c:function:: u8 ds2482_w1_touch_bit(void *data, u8 bit)

    bit function, which writes a 0 or 1 and reads the level.

    :param void \*data:
        *undescribed*

    :param u8 bit:
        *undescribed*

.. _`ds2482_w1_touch_bit.description`:

Description
-----------

\ ``param``\  data  The ds2482 channel pointer

.. _`ds2482_w1_triplet`:

ds2482_w1_triplet
=================

.. c:function:: u8 ds2482_w1_triplet(void *data, u8 dbit)

    :param void \*data:
        *undescribed*

    :param u8 dbit:
        *undescribed*

.. _`ds2482_w1_triplet.the-bit-written-is-determined-by-the-two-reads`:

The bit written is determined by the two reads
----------------------------------------------

00 => dbit, 01 => 0, 10 => 1

\ ``param``\  data  The ds2482 channel pointer
\ ``param``\  dbit  The direction to choose if both branches are valid
\ ``return``\       b0=read1 b1=read2 b3=bit written

.. _`ds2482_w1_write_byte`:

ds2482_w1_write_byte
====================

.. c:function:: void ds2482_w1_write_byte(void *data, u8 byte)

    :param void \*data:
        *undescribed*

    :param u8 byte:
        *undescribed*

.. _`ds2482_w1_write_byte.description`:

Description
-----------

\ ``param``\  data  The ds2482 channel pointer
\ ``param``\  byte  The value to write

.. _`ds2482_w1_read_byte`:

ds2482_w1_read_byte
===================

.. c:function:: u8 ds2482_w1_read_byte(void *data)

    :param void \*data:
        *undescribed*

.. _`ds2482_w1_read_byte.description`:

Description
-----------

\ ``param``\  data  The ds2482 channel pointer
\ ``return``\       The value read

.. _`ds2482_w1_reset_bus`:

ds2482_w1_reset_bus
===================

.. c:function:: u8 ds2482_w1_reset_bus(void *data)

    wire interface

    :param void \*data:
        *undescribed*

.. _`ds2482_w1_reset_bus.description`:

Description
-----------

\ ``param``\  data  The ds2482 channel pointer
\ ``return``\       0=Device present, 1=No device present or error

.. This file was automatic generated / don't edit.

