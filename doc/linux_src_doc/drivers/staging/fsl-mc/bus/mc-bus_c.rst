.. -*- coding: utf-8; mode: rst -*-

========
mc-bus.c
========


.. _`fsl_mc_bus_match`:

fsl_mc_bus_match
================

.. c:function:: int fsl_mc_bus_match (struct device *dev, struct device_driver *drv)

    device to driver matching callback

    :param struct device \*dev:
        the MC object device structure to match against

    :param struct device_driver \*drv:
        the device driver to search for matching MC object device id
        structures



.. _`fsl_mc_bus_match.description`:

Description
-----------

Returns 1 on success, 0 otherwise.



.. _`fsl_mc_bus_uevent`:

fsl_mc_bus_uevent
=================

.. c:function:: int fsl_mc_bus_uevent (struct device *dev, struct kobj_uevent_env *env)

    callback invoked when a device is added

    :param struct device \*dev:

        *undescribed*

    :param struct kobj_uevent_env \*env:

        *undescribed*



.. _`__fsl_mc_driver_register`:

__fsl_mc_driver_register
========================

.. c:function:: int __fsl_mc_driver_register (struct fsl_mc_driver *mc_driver, struct module *owner)

    registers a child device driver with the MC bus

    :param struct fsl_mc_driver \*mc_driver:

        *undescribed*

    :param struct module \*owner:

        *undescribed*



.. _`__fsl_mc_driver_register.description`:

Description
-----------


This function is implicitly invoked from the registration function of
fsl_mc device drivers, which is generated by the
:c:func:`module_fsl_mc_driver` macro.



.. _`fsl_mc_driver_unregister`:

fsl_mc_driver_unregister
========================

.. c:function:: void fsl_mc_driver_unregister (struct fsl_mc_driver *mc_driver)

    unregisters a device driver from the MC bus

    :param struct fsl_mc_driver \*mc_driver:

        *undescribed*



.. _`fsl_mc_bus_exists`:

fsl_mc_bus_exists
=================

.. c:function:: bool fsl_mc_bus_exists ( void)

    check if a root dprc exists

    :param void:
        no arguments



.. _`fsl_mc_get_root_dprc`:

fsl_mc_get_root_dprc
====================

.. c:function:: void fsl_mc_get_root_dprc (struct device *dev, struct device **root_dprc_dev)

    function to traverse to the root dprc

    :param struct device \*dev:

        *undescribed*

    :param struct device \*\*root_dprc_dev:

        *undescribed*



.. _`fsl_mc_is_root_dprc`:

fsl_mc_is_root_dprc
===================

.. c:function:: bool fsl_mc_is_root_dprc (struct device *dev)

    function to check if a given device is a root dprc

    :param struct device \*dev:

        *undescribed*



.. _`fsl_mc_device_add`:

fsl_mc_device_add
=================

.. c:function:: int fsl_mc_device_add (struct dprc_obj_desc *obj_desc, struct fsl_mc_io *mc_io, struct device *parent_dev, struct fsl_mc_device **new_mc_dev)

    :param struct dprc_obj_desc \*obj_desc:

        *undescribed*

    :param struct fsl_mc_io \*mc_io:

        *undescribed*

    :param struct device \*parent_dev:

        *undescribed*

    :param struct fsl_mc_device \*\*new_mc_dev:

        *undescribed*



.. _`fsl_mc_device_remove`:

fsl_mc_device_remove
====================

.. c:function:: void fsl_mc_device_remove (struct fsl_mc_device *mc_dev)

    Remove a MC object device from being visible to Linux

    :param struct fsl_mc_device \*mc_dev:
        Pointer to a MC object device object



.. _`fsl_mc_bus_probe`:

fsl_mc_bus_probe
================

.. c:function:: int fsl_mc_bus_probe (struct platform_device *pdev)

    callback invoked when the root MC bus is being added

    :param struct platform_device \*pdev:

        *undescribed*



.. _`fsl_mc_bus_remove`:

fsl_mc_bus_remove
=================

.. c:function:: int fsl_mc_bus_remove (struct platform_device *pdev)

    callback invoked when the root MC bus is being removed

    :param struct platform_device \*pdev:

        *undescribed*

