.. -*- coding: utf-8; mode: rst -*-
.. src-file: drivers/staging/iio/accel/sca3000.h

.. _`sca3000_state`:

struct sca3000_state
====================

.. c:type:: struct sca3000_state

    device instance state information

.. _`sca3000_state.definition`:

Definition
----------

.. code-block:: c

    struct sca3000_state {
        struct spi_device *us;
        const struct sca3000_chip_info *info;
        struct work_struct interrupt_handler_ws;
        s64 last_timestamp;
        int mo_det_use_count;
        struct mutex lock;
        int bpse;
        u8 rx[2] ____cacheline_aligned;
        u8 tx[6] ____cacheline_aligned;
    }

.. _`sca3000_state.members`:

Members
-------

us
    the associated spi device

info
    chip variant information

interrupt_handler_ws
    event interrupt handler for all events

last_timestamp
    the timestamp of the last event

mo_det_use_count
    reference counter for the motion detection unit

lock
    lock used to protect elements of sca3000_state
    and the underlying device state.

bpse
    number of bits per scan element

rx
    dma-able receive buffer

tx
    dma-able transmit buffer

.. _`sca3000_chip_info`:

struct sca3000_chip_info
========================

.. c:type:: struct sca3000_chip_info

    model dependent parameters

.. _`sca3000_chip_info.definition`:

Definition
----------

.. code-block:: c

    struct sca3000_chip_info {
        unsigned int scale;
        bool temp_output;
        int measurement_mode_freq;
        int option_mode_1;
        int option_mode_1_freq;
        int option_mode_2;
        int option_mode_2_freq;
        int mot_det_mult_xz[6];
        int mot_det_mult_y[7];
    }

.. _`sca3000_chip_info.members`:

Members
-------

scale
    scale \* 10^-6

temp_output
    some devices have temperature sensors.

measurement_mode_freq
    normal mode sampling frequency

option_mode_1
    first optional mode. Not all models have one

option_mode_1_freq
    option mode 1 sampling frequency

option_mode_2
    second optional mode. Not all chips have one

option_mode_2_freq
    option mode 2 sampling frequency

.. _`sca3000_chip_info.description`:

Description
-----------

This structure is used to hold information about the functionality of a given
sca3000 variant.

.. _`sca3000_write_reg`:

sca3000_write_reg
=================

.. c:function:: int sca3000_write_reg(struct sca3000_state *st, u8 address, u8 val)

    :param struct sca3000_state \*st:
        *undescribed*

    :param u8 address:
        address of register on chip

    :param u8 val:
        value to be written to register

.. _`sca3000_write_reg.description`:

Description
-----------

The main lock must be held.

.. _`sca3000_register_ring_funcs`:

sca3000_register_ring_funcs
===========================

.. c:function:: void sca3000_register_ring_funcs(struct iio_dev *indio_dev)

    :param struct iio_dev \*indio_dev:
        *undescribed*

.. _`sca3000_configure_ring`:

sca3000_configure_ring
======================

.. c:function:: int sca3000_configure_ring(struct iio_dev *indio_dev)

    allocate and configure ring buffer

    :param struct iio_dev \*indio_dev:
        iio-core device whose ring is to be configured

.. _`sca3000_configure_ring.description`:

Description
-----------

The hardware ring buffer needs far fewer ring buffer functions than
a software one as a lot of things are handled automatically.
This function also tells the iio core that our device supports a
hardware ring buffer mode.

.. _`sca3000_unconfigure_ring`:

sca3000_unconfigure_ring
========================

.. c:function:: void sca3000_unconfigure_ring(struct iio_dev *indio_dev)

    deallocate the ring buffer

    :param struct iio_dev \*indio_dev:
        iio-core device whose ring we are freeing

.. _`sca3000_ring_int_process`:

sca3000_ring_int_process
========================

.. c:function:: void sca3000_ring_int_process(u8 val, struct iio_buffer *ring)

    :param u8 val:
        the event code

    :param struct iio_buffer \*ring:
        *undescribed*

.. This file was automatic generated / don't edit.

